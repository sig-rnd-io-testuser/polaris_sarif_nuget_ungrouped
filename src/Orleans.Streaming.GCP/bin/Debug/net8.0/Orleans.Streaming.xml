<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Streaming</name>
    </assembly>
    <members>
        <member name="T:Orleans.Providers.Streams.Common.EventSequenceToken">
            <summary>
            Stream sequence token that tracks sequence number and event index
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceToken.SequenceNumber">
            <summary>
            Gets the number of event batches in stream prior to this event batch
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceToken.EventIndex">
            <summary>
            Gets the number of events in batch prior to this event
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceToken"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceToken" /> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="eventIndex">The event index, for events which are part of a batch.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceToken" /> class.
            </summary>
            <remarks>
            This constructor is exposed for serializer use only.
            </remarks>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.CreateSequenceTokenForEvent(System.Int32)">
            <summary>
            Creates a sequence token for a specific event in the current batch.
            </summary>
            <param name="eventInd">The event index, for events which are part of a batch.</param>
            <returns>The sequence token.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.Equals(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.CompareTo(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.EventSequenceTokenV2">
            <summary>
            Stream sequence token that tracks sequence number and event index
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceTokenV2.SequenceNumber">
            <summary>
            Gets the number of event batches in stream prior to this event batch
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceTokenV2.EventIndex">
            <summary>
            Gets the number of events in batch prior to this event
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceTokenV2"/> class.
            </summary>
            <param name="seqNumber">The sequence number.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceTokenV2"/> class.
            </summary>
            <param name="seqNumber">The sequence number.</param>
            <param name="eventInd">The event index, for events which are part of a batch of events.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.EventSequenceTokenV2"/> class.
            </summary>
            <remarks>
            This constructor is for serializer use only.
            </remarks>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.CreateSequenceTokenForEvent(System.Int32)">
            <summary>
            Creates a sequence token for a specific event in the current batch
            </summary>
            <param name="eventInd">The event index.</param>
            <returns>A new sequence token.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.Equals(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.CompareTo(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor">
            <summary>
            Block pool monitor used as a default option in GeneratorStreamProvider and MemoryStreamProvider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.#ctor(Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor"/> class.
            </summary>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.TrackMemoryReleased(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.TrackMemoryAllocated(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultCacheMonitor">
            <summary>
            cache monitor used as a default option in GeneratorStreamprovider and MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.DefaultCacheMonitor"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.#ctor(Orleans.Providers.Streams.Common.CacheMonitorDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.DefaultCacheMonitor"/> class.
            </summary>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackCachePressureMonitorStatusChange(System.String,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.ReportCacheSize(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.ReportMessageStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMemoryAllocated(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMemoryReleased(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMessagesAdded(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMessagesPurged(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor">
            <summary>
            Queue adapter receiver monitor used as a default option in GeneratorStreamprovider and MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.#ctor(Orleans.Providers.Streams.Common.ReceiverMonitorDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor"/> class.
            </summary>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackInitialization(System.Boolean,System.TimeSpan,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackRead(System.Boolean,System.TimeSpan,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackMessagesReceived(System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackShutdown(System.Boolean,System.TimeSpan,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IBlockPoolMonitor">
            <summary>
            Monitor track block pool related metrics. Block pool is used in cache system for memory management 
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.TrackMemoryAllocated(System.Int64)">
            <summary>
            Called when memory is newly allocated by the cache.
            </summary>
            <param name="allocatedMemoryInBytes">The allocated memory, in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.TrackMemoryReleased(System.Int64)">
            <summary>
            Called when memory is released by the cache.
            </summary>
            <param name="releasedMemoryInBytes">The released memory, in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <summary>
            Periodically report block pool status
            </summary>
            <param name="totalSizeInByte">Total memory this block pool allocated.</param>
            <param name="availableMemoryInByte">Memory which is available for allocating to caches.</param>
            <param name="claimedMemoryInByte">Memory in use by caches.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge">
            <summary>
            ObjectPoolMonitor report metrics for ObjectPool, which are based on object count. BlockPoolMonitor report metrics for BlockPool, which are based on memory size. 
            These two monitor converge in orleans cache infrastructure, where ObjectPool is used as block pool to allocate memory, where each object represent a block of memory
            which has a size. ObjectPoolMonitorBridge is the bridge between these two monitors in cache infrastructure. When ObjectPoolMonitor is reporting a metric, 
            the user configured BlockPoolMonitor will call its counterpart method and reporting metric based on the math: memoryInByte = objectCount*objectSizeInByte
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.#ctor(Orleans.Providers.Streams.Common.IBlockPoolMonitor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge"/> class.
            </summary>
            <param name="blockPoolMonitor">The block pool monitor.</param>
            <param name="blockSizeInBytes">The block size in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.TrackObjectAllocated">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.TrackObjectReleased">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.Report(System.Int64,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ICacheMonitor">
            <summary>
            Responsible for monitoring cache related metrics.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackCachePressureMonitorStatusChange(System.String,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Called when the cache pressure monitor encounter a status change.
            </summary>
            <param name="pressureMonitorType">Type of the pressure monitor.</param>
            <param name="underPressure">if set to <see langword="true" />, the cache is under pressure.</param>
            <param name="cachePressureContributionCount">The cache pressure contribution count.</param>
            <param name="currentPressure">The current pressure.</param>
            <param name="flowControlThreshold">The flow control threshold.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMessagesAdded(System.Int64)">
            <summary>
            Called when messages are added to the cache.
            </summary>
            <param name="messagesAdded">The number of messages added.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMessagesPurged(System.Int64)">
            <summary>
            Called when messages are purged from the cache.
            </summary>
            <param name="messagesPurged">The number of messages purged.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMemoryAllocated(System.Int32)">
            <summary>
            Called when new memory is allocated by the cache.
            </summary>
            <param name="memoryInBytes">The memory in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMemoryReleased(System.Int32)">
            <summary>
            Called when memory returned to block pool.
            </summary>
            <param name="memoryInBytes">The memory in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.ReportMessageStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int64)">
            <summary>
            Called to report cache status metrics.
            </summary>
            <param name="oldestMessageEnqueueTimeUtc">The time in UTC when the oldest message was enqueued to the queue.</param>
            <param name="oldestMessageDequeueTimeUtc">The time in UTC when the oldest message was read from the queue and put in the cache.</param>
            <param name="newestMessageEnqueueTimeUtc">The time in UTC when the newest message was enqueued to the queue.</param>
            <param name="totalMessageCount">The total message count.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.ReportCacheSize(System.Int64)">
            <summary>
            Called to report the total cache size.
            </summary>
            <param name="totalCacheSizeInBytes">The total cache size in bytes.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IObjectPoolMonitor">
            <summary>
            Monitor track object pool related metrics
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.TrackObjectAllocated">
            <summary>
            Called every time when an object is allocated.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.TrackObjectReleased">
            <summary>
            Called every time an object was released back to the pool.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <summary>
            Called to report object pool status.
            </summary>
            <param name="totalObjects">Total size of object pool.</param>
            <param name="availableObjects">Count for objects in the pool which is available for allocating.</param>
            <param name="claimedObjects">Count for objects which are claimed, hence not available.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor">
            <summary>
            Responsible for monitoring receiver performance metrics.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackInitialization(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to initialize the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Init operation time.</param>
            <param name="exception">Exception caught if initialize fail.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackRead(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to read from the partition.    Tracked per partition read operation.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Time spent in read operation.</param>
            <param name="exception">The exception caught if read failed.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackMessagesReceived(System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Tracks messages read and time taken per successful read.  Tracked per successful partition read operation.
            </summary>
            <param name="count">Messages read.</param>
            <param name="oldestMessageEnqueueTimeUtc">The oldest message enqueue time (UTC).</param>
            <param name="newestMessageEnqueueTimeUtc">The newest message enqueue time (UTC).</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackShutdown(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to shutdown the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Shutdown operation time.</param>
            <param name="exception">Exception caught if shutdown fail.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions">
            <summary>
            Aggregation dimensions for receiver monitor.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions"/> class.
            </summary>
            <param name="queueId">The queue identifier.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions"/> class.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.QueueId">
            <summary>
            Gets the queue identifier.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CacheMonitorDimensions">
            <summary>
            Aggregation dimensions for cache monitor.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CacheMonitorDimensions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.CacheMonitorDimensions"/> class.
            </summary>
            <param name="queueId">The queue identifier.</param>
            <param name="blockPoolId">The block pool identifier.</param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CacheMonitorDimensions.BlockPoolId">
            <summary>
            Gets or sets the block pool identifier.
            </summary>
            <value>The block pool identifier.</value>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions">
            <summary>
            Aggregation dimensions for block pool monitors.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions"/> class.
            </summary>
            <param name="blockPoolId">The block pool identifier.</param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions.BlockPoolId">
            <summary>
            Gets or sets the block pool identifier.
            </summary>
            <value>The block pool identifier.</value>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessage">
            <summary>
            This is a tightly packed cached structure containing a queue message.
            It should only contain value types.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.StreamId">
            <summary>
            Identity of the stream this message is a part of.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.SequenceNumber">
            <summary>
            Sequence number. Position of event in queue.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.EventIndex">
            <summary>
            Event index. Index in batch.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.EnqueueTimeUtc">
            <summary>
            Time event was written to the queuing system.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.DequeueTimeUtc">
            <summary>
            Time event was read from the queuing system into this cache.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.CachedMessage.Segment">
            <summary>
            Segment containing the serialized event data.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessageExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Providers.Streams.Common.CachedMessage"/>.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageExtensions.Compare(Orleans.Providers.Streams.Common.CachedMessage@,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Compares the specified cached message.
            </summary>
            <param name="cachedMessage">The cached message.</param>
            <param name="token">The token.</param>
            <returns>A value indicating the relative order of the token to the cached message.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageExtensions.CompareStreamId(Orleans.Providers.Streams.Common.CachedMessage@,Orleans.Runtime.StreamId)">
            <summary>
            Compares the stream identifier of a cached message.
            </summary>
            <param name="cachedMessage">The cached message.</param>
            <param name="streamId">The stream identifier.</param>
            <returns><see langword="true"/> if streamId is equal to the <see cref="F:Orleans.Providers.Streams.Common.CachedMessage.StreamId"/> value; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessageBlock">
            <summary>
            CachedMessageBlock is a block of tightly packed structures containing tracking data for cached messages.  This data is 
              tightly packed to reduced GC pressure.  The tracking data is used by the queue cache to walk the cache serving ordered
              queue messages by stream.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.Node">
            <summary>
            Linked list node, so this message block can be kept in a linked list.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.HasCapacity">
            <summary>
            Gets a value indicating whether more messages can be added to the block.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.IsEmpty">
            <summary>
            Gets a value indicating whether this block is empty.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.NewestMessageIndex">
            <summary>
            Gets the index of most recent message added to the block.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.OldestMessageIndex">
            <summary>
            Gets the index of the oldest message in this block.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.OldestMessage">
            <summary>
            Gets the oldest message in the block.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.NewestMessage">
            <summary>
            Gets the newest message in this block.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.ItemCount">
            <summary>
            Gets the number of messages in this block.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.#ctor(System.Int32)">
            <summary>
            Block of cached messages.
            </summary>
            <param name="blockSize">The block size, expressed as a number of messages.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.Remove">
            <summary>
            Removes a message from the start of the block (oldest data).
            </summary>
            <returns><see langword="true"/> if there are more items remaining; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.Add(Orleans.Providers.Streams.Common.CachedMessage)">
            <summary>
            Add a message from the queue to the block.
            Converts the queue message to a cached message and stores it at the end of the block.
            </summary>        
            <param name="message">
            The message to add to this block.
            </param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock.Item(System.Int32)">
            <summary>
            Access the cached message at the provided index.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The message at the specified index.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.GetSequenceToken(System.Int32,Orleans.Providers.Streams.Common.ICacheDataAdapter)">
            <summary>
            Gets the sequence token of the cached message a the provided index
            </summary>
            <param name="index">The index of the message to access.</param>
            <param name="dataAdapter">The data adapter.</param>
            <returns>The sequence token.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.GetNewestSequenceToken(Orleans.Providers.Streams.Common.ICacheDataAdapter)">
            <summary>
            Gets the sequence token of the newest message in this block
            </summary>
            <param name="dataAdapter">The data adapter.</param>
            <returns>The sequence token of the newest message in this block.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.GetOldestSequenceToken(Orleans.Providers.Streams.Common.ICacheDataAdapter)">
            <summary>
            Gets the sequence token of the oldest message in this block
            </summary>
            <param name="dataAdapter">The data adapter.</param>
            <returns>The sequence token of the oldest message in this block.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.GetIndexOfFirstMessageLessThanOrEqualTo(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Gets the index of the first message in this block that has a sequence token at or before the provided token
            </summary>
            <param name="token">The sequence token.</param>
            <returns>The index of the first message in this block that has a sequence token equal to or before the provided token.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.TryFindFirstMessage(Orleans.Runtime.StreamId,Orleans.Providers.Streams.Common.ICacheDataAdapter,System.Int32@)">
            <summary>
            Tries to find the first message in the block that is part of the provided stream.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <param name="dataAdapter">The data adapter.</param>
            <param name="index">The index.</param>
            <returns><see langword="true" /> if the message was found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.TryFindNextMessage(System.Int32,Orleans.Runtime.StreamId,Orleans.Providers.Streams.Common.ICacheDataAdapter,System.Int32@)">
            <summary>
            Tries to get the next message from the provided stream, starting at the start index.
            </summary>        
            <param name="start">The start index.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="dataAdapter">The data adapter.</param>
            <param name="index">The index.</param>
            <returns><see langword="true" /> if the message was found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock.OnResetState">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessagePool">
            <summary>
            Pool of tightly packed cached messages that are kept in large blocks to reduce GC pressure.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessagePool.#ctor(Orleans.Providers.Streams.Common.ICacheDataAdapter)">
            <summary>
            Allocates a pool of cached message blocks.
            </summary>
            <param name="cacheDataAdapter">The cache data adapter.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessagePool.AllocateMessage(Orleans.Providers.Streams.Common.CachedMessage)">
            <summary>
            Allocates a message in a block and returns the block the message is in.
            </summary>
            <returns>The cached message block which the message was allocated in.</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy">
            <summary>
            Eviction strategy that evicts data based off of age.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.inUseBuffers">
            <summary>
            Buffers which are currently in use in the cache
            Protected for test purposes
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.#ctor(Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.TimePurgePredicate,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="timePurage">The time-based purge predicate.</param>
            <param name="cacheMonitor">The cache monitor.</param>
            <param name="monitorWriteInterval">"Interval to write periodic statistics. Only triggered for active caches.</param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.PurgeObservable">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.OnPurged">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.OnBlockAllocated(Orleans.Providers.Streams.Common.FixedSizeBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.PerformPurge(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.ShouldPurge(Orleans.Providers.Streams.Common.CachedMessage@,Orleans.Providers.Streams.Common.CachedMessage@,System.DateTime)">
            <summary>
            Given a cached message, indicates whether it should be purged from the cache.
            </summary>
            <param name="cachedMessage">The cached message.</param>
            <param name="newestCachedMessage">The newest cached message.</param>
            <param name="nowUtc">The current time (UTC).</param>
            <returns><see langword="true" /> if the message should be purged, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy.ReportPurge(Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.IPurgeObservable,System.Int32)">
            <summary>
            Logs cache purge activity
            </summary>
            <param name="logger">The logger.</param>
            <param name="purgeObservable">The purge observable.</param>
            <param name="itemsPurged">The items purged.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.FixedSizeBuffer">
            <summary>
            Manages a contiguous block of memory.
            Calls purge action with itself as the purge request when it's signaled to purge.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.FixedSizeBuffer.SizeInByte">
            <summary>
            Buffer size in bytes.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.FixedSizeBuffer.Id">
            <summary>
            Unique identifier of this buffer.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.#ctor(System.Int32)">
            <summary>
            Manages access to a fixed size byte buffer.
            </summary>
            <param name="blockSizeInByte">The block size, in bytes.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.TryGetSegment(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Try to get a segment with a buffer of the specified size from this block.
            Fail if there is not enough space available
            </summary>
            <param name="size">The size.</param>
            <param name="value">The segment.</param>
            <returns><see langword="true"/> if the segment was retrieved; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.OnResetState">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ICacheDataAdapter">
            <summary>
            Pooled queue cache stores data in tightly packed structures that need to be transformed to various
              other formats quickly.  Since the data formats may change by queue type and data format,
              this interface allows adapter developers to build custom data transforms appropriate for 
              the various types of queue data.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter.GetBatchContainer(Orleans.Providers.Streams.Common.CachedMessage@)">
            <summary>
            Converts a cached message to a batch container for delivery
            </summary>
            <param name="cachedMessage">The cached message.</param>
            <returns>The batch container.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter.GetSequenceToken(Orleans.Providers.Streams.Common.CachedMessage@)">
            <summary>
            Gets the stream sequence token from a cached message.
            </summary>
            <param name="cachedMessage">The cached message.</param>
            <returns>The sequence token.</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IEvictionStrategy">
            <summary>
            Eviction strategy for the PooledQueueCache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IEvictionStrategy.PurgeObservable">
            <summary>
            Gets the <see cref="T:Orleans.Providers.Streams.Common.IPurgeObservable"/>, which is implemented by the cache to do purge related actions and invoked by the eviction strategy.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IEvictionStrategy.OnPurged">
            <summary>
            Gets or sets the method which will be called when purge is finished.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IEvictionStrategy.PerformPurge(System.DateTime)">
            <summary>
            Method which should be called when pulling agent try to do a purge on the cache
            </summary>
            <param name="utcNow">The current time (UTC)</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IEvictionStrategy.OnBlockAllocated(Orleans.Providers.Streams.Common.FixedSizeBuffer)">
            <summary>
            Method which should be called when data adapter allocated a new block
            </summary>
            <param name="newBlock">The new block.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IPurgeObservable">
            <summary>
            Functionality for purge-related actions.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IPurgeObservable.RemoveOldestMessage">
            <summary>
            Removes oldest message in the cache.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable.Newest">
            <summary>
            Gets the newest message in the cache.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable.Oldest">
            <summary>
            Gets the oldest message in the cache.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable.ItemCount">
            <summary>
            Gets the message count.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IObjectPool`1">
            <summary>
            Simple object pool Interface.
            Objects allocated should be returned to the pool when disposed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPool`1.Allocate">
            <summary>
            Allocates a pooled resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPool`1.Free(`0)">
            <summary>
            Returns a resource to the pool
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PooledResource`1">
            <summary>
            Utility class to support pooled objects by allowing them to track the pool they came from and return to it when disposed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledResource`1.Pool">
            <summary>
            Gets the pool to return this resource to upon disposal.
            A pool must set this property upon resource allocation.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.SignalPurge">
            <summary>
            If this object is to be used in a fixed size object pool, this call should be
              overridden with the purge implementation that returns the object to the pool.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.Dispose">
            <summary>
            Returns item to pool.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.OnResetState">
            <summary>
            Notifies the object that it has been purged, so it can reset itself to
              the state of a newly allocated object.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ObjectPool`1">
            <summary>
            Simple object pool that uses a stack to store available objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.ObjectPool`1.monitor">
            <summary>
            monitor to report statistics for current object pool
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.#ctor(System.Func{`0},Orleans.Providers.Streams.Common.IObjectPoolMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Simple object pool
            </summary>
            <param name="factoryFunc">Function used to create new resources of type T</param>
            <param name="monitor">monitor to report statistics for object pool</param>
            <param name="monitorWriteInterval"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.Allocate">
            <summary>
            Allocates a pooled resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.Free(`0)">
            <summary>
            Returns a resource to the pool
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PooledQueueCache">
            <summary>
            The PooledQueueCache is a cache that is intended to serve as a message cache in an IQueueCache.
            It is capable of storing large numbers of messages (gigs worth of messages) for extended periods
              of time (minutes to indefinite), while incurring a minimal performance hit due to garbage collection.
            This pooled cache allocates memory and never releases it. It keeps freed resources available in pools 
              that remain in application use through the life of the service. This means these objects go to gen2,
              are compacted, and then stay there. This is relatively cheap, as the only cost they now incur is
              the cost of checking to see if they should be freed in each collection cycle. Since this cache uses
              small numbers of large objects with relatively simple object graphs, they are less costly to check
              then large numbers of smaller objects with more complex object graphs.
            For performance reasons this cache is designed to more closely align with queue specific data.  This is,
              in part, why, unlike the SimpleQueueCache, this cache does not implement IQueueCache.  It is intended
              to be used in queue specific implementations of IQueueCache.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache.Newest">
            <summary>
            Gets the cached message most recently added.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache.Oldest">
            <summary>
            Gets the oldest message in cache.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache.ItemCount">
            <summary>
            Gets the cached message count.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache.#ctor(Orleans.Providers.Streams.Common.ICacheDataAdapter,Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Pooled queue cache is a cache of message that obtains resource from a pool
            </summary>
            <param name="cacheDataAdapter">The cache data adapter.</param>
            <param name="logger">The logger.</param>
            <param name="cacheMonitor">The cache monitor.</param>
            <param name="cacheMonitorWriteInterval">The cache monitor write interval. Only triggered for active caches.</param>
            <param name="purgeMetadataInterval">The interval after which to purge cache metadata.</param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache.IsEmpty">
            <summary>
            Indicates whether the cache is empty
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache.GetCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquires a cursor to enumerate through the messages in the cache at the provided sequenceToken, 
              filtered on the specified stream.
            </summary>
            <param name="streamId">stream identity</param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache.TryGetNextMessage(System.Object,Orleans.Streams.IBatchContainer@)">
            <summary>
            Acquires the next message in the cache at the provided cursor
            </summary>
            <param name="cursorObj"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache.Add(System.Collections.Generic.List{Orleans.Providers.Streams.Common.CachedMessage},System.DateTime)">
            <summary>
            Add a list of queue message to the cache 
            </summary>
            <param name="messages"></param>
            <param name="dequeueTime"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache.RemoveOldestMessage">
            <summary>
            Remove oldest message in the cache, remove oldest block too if the block is empty
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.TimePurgePredicate">
            <summary>
            Determines if data should be purged based off time.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.TimePurgePredicate.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.TimePurgePredicate"/> class.
            </summary>
            <param name="minTimeInCache">The minimum time data should be kept in cache, unless purged due to data size.</param>
            <param name="maxRelativeMessageAge">The maximum age of data to keep in the cache.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.TimePurgePredicate.ShouldPurgeFromTime(System.TimeSpan,System.TimeSpan)">
            <summary>
            Checks to see if the message should be purged.
            Message should be purged if its relative age is greater than <c>maxRelativeMessageAge</c> and has been in the cache longer than the minTimeInCache.
            </summary>
            <param name="timeInCache">The amount of time message has been in this cache</param>
            <param name="relativeAge">The age of message relative to the most recent events read</param>
            <returns><see langword="true"/> if the message should be purged; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SegmentBuilder">
            <summary>
            Utility class for encoding data into an ArraySegment.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.CalculateAppendSize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calculates how much space will be needed to append the provided bytes into the segment.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.CalculateAppendSize(System.String)">
            <summary>
            Calculates how much space will be needed to append the provided string into the segment.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.Append(System.ArraySegment{System.Byte},System.Int32@,System.ReadOnlySpan{System.Byte})">
            <summary>
            Appends a <see cref="T:System.ReadOnlyMemory`1"/> of bytes to the end of the segment
            </summary>
            <param name="writerOffset"></param>
            <param name="bytes"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.Append(System.ArraySegment{System.Byte},System.Int32@,System.String)">
            <summary>
            Appends a string to the end of the segment
            </summary>
            <param name="writerOffset"></param>
            <param name="str"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.ReadNextBytes(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            Reads the next item in the segment as a byte array.  For performance, this is returned as a sub-segment of the original segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SegmentBuilder.ReadNextString(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            Reads the next item in the segment as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache">
            <summary>
            Adapter for simple queue caches.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.CacheSizePropertyName">
            <summary>
            Cache size property name for configuration
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.#ctor(Orleans.Configuration.SimpleQueueCacheOptions,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Adapter for simple queue caches.
            </summary>
            <param name="options">The options.</param>
            <param name="providerName">The stream provider name.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueCache">
            <summary>
            A queue cache that keeps items in memory.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.SimpleQueueCache.Size">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.GetMaxAddCount">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.#ctor(System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Common.SimpleQueueCache"/> class.
            </summary>
            <param name="cacheSize">Size of the cache.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.IsUnderPressure">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.GetCacheCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.TryGetNextMessage(Orleans.Providers.Streams.Common.SimpleQueueCacheCursor,Orleans.Streams.IBatchContainer@)">
            <summary>
            Acquires the next message in the cache at the provided cursor
            </summary>
            <param name="cursor"></param>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor">
            <summary>
            Cursor into a simple queue cache.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.#ctor(Orleans.Providers.Streams.Common.SimpleQueueCache,Orleans.Runtime.StreamId,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Cursor into a simple queue cache
            </summary>
            <param name="cache">The cache instance.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.GetCurrent(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Refresh(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.RecordDeliveryFailure">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Dispose(System.Boolean)">
            <summary>
            Clean up cache data when done
            </summary>
            <param name="disposing"><see langword="true"/> if the instance is being disposed; <see langword="false"/> if it is being called from a finalizer.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand">
            <summary>
            Commands which can be handled by the <see cref="T:Orleans.Providers.Streams.Common.PersistentStreamProvider" />.
            </summary>
            <seealso cref="T:Orleans.Providers.IControllable"/>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.StartAgents">
            <summary>
            Starts the agents.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.StopAgents">
            <summary>
            Stops the agents.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.GetAgentsState">
            <summary>
            Retrieves agent state.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.GetNumberRunningAgents">
            <summary>
            Gets the number of running agents.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.AdapterCommandStartRange">
            <summary>
            The command start range for custom adapters.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.AdapterCommandEndRange">
            <summary>
            The command end range for custom adapters.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.AdapterFactoryCommandStartRange">
            <summary>
            The command start range for custom adapter factories.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.PersistentStreamProviderCommand.AdapterFactoryCommandEndRange">
            <summary>
            The command end range for custom adapter factories.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PersistentStreamProvider">
            <summary>
            Persistent stream provider that uses an adapter for persistence
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.StreamGeneratorCommand">
            <summary>
            Stream generator commands
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.StreamGeneratorCommand.Configure">
            <summary>
            Command to configure the generator
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory">
            <summary>
            Adapter factory for stream generator stream provider.
            This factory acts as the adapter and the adapter factory.  It creates receivers that use configurable generator
              to generate event streams, rather than reading them from storage.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.queueMapperOptions">
            <summary>
            Configuration property name for generator configuration type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.IsRewindable">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Direction">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Name">
            <inheritdoc />
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CacheMonitorFactory">
            <summary>
            Create a cache monitor to report cache related metrics
            Return a ICacheMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.BlockPoolMonitorFactory">
            <summary>
            Create a block pool monitor to monitor block pool related metrics
            Return a IBlockPoolMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.ReceiverMonitorFactory">
            <summary>
            Create a monitor to monitor QueueAdapterReceiver related metrics
            Return a IQueueAdapterReceiverMonitor
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Init">
            <summary>
            Initializes the factory.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateAdapter">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetQueueAdapterCache">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetStreamQueueMapper">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.QueueMessageBatchAsync``1(Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateReceiver(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.ExecuteCommand(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateQueueCache(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory"/> instance.
            </summary>
            <param name="services">The services.</param>
            <param name="name">The provider name.</param>
            <returns>The newly created <see cref="T:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory"/> instance.</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorPooledCache">
            <summary>
            Pooled cache for generator stream provider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.#ctor(Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},Microsoft.Extensions.Logging.ILogger,Orleans.Serialization.Serializer,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Pooled cache for generator stream provider.
            </summary>
            <param name="bufferPool">The buffer pool.</param>
            <param name="logger">The logger.</param>
            <param name="serializer">The serializer.</param>
            <param name="cacheMonitor">The cache monitor.</param>
            <param name="monitorWriteInterval">The monitor write interval. Only triggered for active caches</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetBatchContainer(Orleans.Providers.Streams.Common.CachedMessage@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetSequenceToken(Orleans.Providers.Streams.Common.CachedMessage@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetMaxAddCount">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetCacheCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.IsUnderPressure">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratedBatchContainer">
            <summary>
            <see cref="T:Orleans.Streams.IBatchContainer"/> implementation for generated event payloads.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.StreamId">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.SequenceToken">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.RealToken">
            <summary>
            Gets the real token.
            </summary>
            <value>The real token.</value>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.EnqueueTimeUtc">
            <summary>
            Gets the enqueue time (UTC).
            </summary>
            <value>The enqueue time (UTC).</value>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.Payload">
            <summary>
            Gets the payload.
            </summary>
            <value>The payload.</value>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.#ctor(Orleans.Runtime.StreamId,System.Object,Orleans.Providers.Streams.Common.EventSequenceTokenV2)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.Generator.GeneratedBatchContainer"/> class.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <param name="payload">The payload.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.GetEvents``1">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratedBatchContainer.ImportRequestContext">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratedEvent">
            <summary>
            Event use in generated streams
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType">
            <summary>
            Generated event type
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType.Fill">
            <summary>
            Filler event
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType.Report">
            <summary>
            Event that should trigger reporting
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedEvent.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedEvent.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.SimpleGenerator">
            <summary>
            Simple Generator
            Generates a single stream of a configurable number of events.  One event per poll.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGenerator.Configure(System.IServiceProvider,Orleans.Providers.Streams.Generator.IStreamGeneratorConfig)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGenerator.TryReadEvents(System.DateTime,System.Int32,System.Collections.Generic.List{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Until we've generated the configured number of events, return a single generated event
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.IStreamGenerator">
            <summary>
            Interface of generators used by the GeneratorStreamProvider.  Any method of generating events
             must conform to this interface to be used by the GeneratorStreamProvider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.IStreamGenerator.TryReadEvents(System.DateTime,System.Int32,System.Collections.Generic.List{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Tries to get an event, if the generator is configured to generate any at this time
            </summary>
            <param name="utcNow">The current UTC time.</param>
            <param name="maxCount">The maximum number of events to read.</param>
            <param name="events">The events.</param>
            <returns><see langword="true" /> if events were read, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.IStreamGenerator.Configure(System.IServiceProvider,Orleans.Providers.Streams.Generator.IStreamGeneratorConfig)">
            <summary>
            Configures the stream generator.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="generatorConfig">The generator configuration.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.IStreamGeneratorConfig">
            <summary>
            Interface of configuration for generators used by the GeneratorStreamProvider.  This interface covers
              the minimal set of information the stream provider needs to configure a generator to generate data.  Generators should
              add any additional configuration information needed to it's implementation of this interface.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.IStreamGeneratorConfig.StreamGeneratorType">
            <summary>
            Gets the stream generator type
            </summary>
        </member>
        <member name="T:Orleans.Providers.IMemoryStreamQueueGrain">
            <summary>
            Interface for In-memory stream queue grain.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IMemoryStreamQueueGrain.Enqueue(Orleans.Providers.MemoryMessageData)">
            <summary>
            Enqueues an event.
            </summary>
            <param name="data">The data.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Providers.IMemoryStreamQueueGrain.Dequeue(System.Int32)">
            <summary>
            Dequeues up to <paramref name="maxCount"/> events.
            </summary>
            <param name="maxCount">
            The maximum number of events to dequeue.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Providers.MemoryAdapterFactory`1">
            <summary>
            Adapter factory for in memory stream provider.
            This factory acts as the adapter and the adapter factory.  The events are stored in an in-memory grain that 
            behaves as an event queue, this provider adapter is primarily used for testing
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.Name">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.IsRewindable">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.Direction">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.StreamFailureHandlerFactory">
            <summary>
            Creates a failure handler for a partition.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.CacheMonitorFactory">
            <summary>
            Create a cache monitor to report cache related metrics
            Return a ICacheMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.BlockPoolMonitorFactory">
            <summary>
            Create a block pool monitor to monitor block pool related metrics
            Return a IBlockPoolMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.ReceiverMonitorFactory">
            <summary>
            Create a monitor to monitor QueueAdapterReceiver related metrics
            Return a IQueueAdapterReceiverMonitor
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateAdapter">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetQueueAdapterCache">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetStreamQueueMapper">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateReceiver(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.QueueMessageBatchAsync``1(Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateQueueCache(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GenerateDeterministicGuid(Orleans.Streams.QueueId)">
            <summary>
            Generate a deterministic Guid from a queue Id. 
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetQueueGrain(Orleans.Streams.QueueId)">
            <summary>
            Get a MemoryStreamQueueGrain instance by queue Id. 
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Providers.MemoryAdapterFactory`1"/> instance.
            </summary>
            <param name="services">The services.</param>
            <param name="name">The provider name.</param>
            <returns>A mew <see cref="T:Orleans.Providers.MemoryAdapterFactory`1"/> instance.</returns>
        </member>
        <member name="T:Orleans.Providers.IMemoryMessageBodySerializer">
            <summary>
            Implementations of this interface are responsible for serializing MemoryMessageBody objects
            </summary>
        </member>
        <member name="M:Orleans.Providers.IMemoryMessageBodySerializer.Serialize(Orleans.Providers.MemoryMessageBody)">
            <summary>
            Serialize <see cref="T:Orleans.Providers.MemoryMessageBody"/> to an array segment of bytes.
            </summary>
            <param name="body">The body.</param>
            <returns>The serialized data.</returns>
        </member>
        <member name="M:Orleans.Providers.IMemoryMessageBodySerializer.Deserialize(System.ArraySegment{System.Byte})">
            <summary>
            Deserialize an array segment into a <see cref="T:Orleans.Providers.MemoryMessageBody"/>
            </summary>
            <param name="bodyBytes">The body bytes.</param>
            <returns>The deserialized message body.</returns>
        </member>
        <member name="T:Orleans.Providers.DefaultMemoryMessageBodySerializer">
            <summary>
            Default <see cref="T:Orleans.Providers.IMemoryMessageBodySerializer"/> implementation.
            </summary>
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.#ctor(Orleans.Serialization.Serializer{Orleans.Providers.MemoryMessageBody})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.DefaultMemoryMessageBodySerializer" /> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.Serialize(Orleans.Providers.MemoryMessageBody)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.Deserialize(System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.Orleans#Serialization#IOnDeserialized#OnDeserialized(Orleans.Serialization.DeserializationContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.MemoryMessageBody">
            <summary>
            Message body used by the in-memory stream provider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryMessageBody.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.MemoryMessageBody"/> class.
            </summary>
            <param name="events">Events that are part of this message.</param>
            <param name="requestContext">Context in which this message was sent.</param>        
        </member>
        <member name="P:Orleans.Providers.MemoryMessageBody.Events">
            <summary>
            Gets the events in the message.
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryMessageBody.RequestContext">
            <summary>
            Gets the message request context.
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryMessageData">
            <summary>
            Represents the event sent and received from an In-Memory queue grain. 
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.StreamId">
            <summary>
            The stream identifier.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.SequenceNumber">
            <summary>
            The position of the event in the stream.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.DequeueTimeUtc">
            <summary>
            The time this message was read from the message queue.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.EnqueueTimeUtc">
            <summary>
            The time message was written to the message queue.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.Payload">
            <summary>
            The serialized event data.
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryPooledCache`1">
            <summary>
            Pooled cache for memory stream provider
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.#ctor(Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},Orleans.Providers.Streams.Common.TimePurgePredicate,Microsoft.Extensions.Logging.ILogger,`0,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Pooled cache for memory stream provider.
            </summary>
            <param name="bufferPool">The buffer pool.</param>
            <param name="purgePredicate">The purge predicate.</param>
            <param name="logger">The logger.</param>
            <param name="serializer">The serializer.</param>
            <param name="cacheMonitor">The cache monitor.</param>
            <param name="monitorWriteInterval">The monitor write interval.</param>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetMaxAddCount">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetCacheCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.IsUnderPressure">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetBatchContainer(Orleans.Providers.Streams.Common.CachedMessage@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetSequenceToken(Orleans.Providers.Streams.Common.CachedMessage@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Providers.MemoryStreamQueueGrain">
            <summary>
            Memory stream queue grain. This grain works as a storage queue of event data. Enqueue and Dequeue operations are supported.
            the max event count sets the max storage limit to the queue.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryStreamQueueGrain.MaxEventCount">
            <summary>
            The maximum event count. 
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryStreamQueueGrain.Enqueue(Orleans.Providers.MemoryMessageData)">
            <summary>
            Enqueues an event data. If the current total count reaches the max limit. throws an exception.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryStreamQueueGrain.Dequeue(System.Int32)">
            <summary>
            Dequeues up to a max amount of maxCount event data from the queue.
            </summary>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Hosting.ISiloRecoverableStreamConfigurator">
            <summary>
            Silo-specific configuration builder for recoverable streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.SiloRecoverableStreamConfiguratorExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Hosting.ISiloRecoverableStreamConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloRecoverableStreamConfiguratorExtensions.ConfigureStatistics(Orleans.Hosting.ISiloRecoverableStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StreamStatisticOptions}})">
            <summary>
            Configures statistics options for a reliable stream provider.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloRecoverableStreamConfiguratorExtensions.ConfigureCacheEviction(Orleans.Hosting.ISiloRecoverableStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StreamCacheEvictionOptions}})">
            <summary>
            Configures cache eviction options for a reliable stream provider.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.SiloRecoverableStreamConfigurator">
            <summary>
            Configures reliable streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloRecoverableStreamConfigurator.#ctor(System.String,System.Action{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}},System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.SiloRecoverableStreamConfigurator"/> class.
            </summary>
            <param name="name">The stream provider name.</param>
            <param name="configureDelegate">The configuration delegate.</param>
            <param name="adapterFactory">The adapter factory.</param>
        </member>
        <member name="T:Orleans.Hosting.SimpleGeneratorOptions">
            <summary>
            Simple generator configuration class.
            This class is used to configure a generator stream provider to generate streams using the SimpleGenerator
            </summary>
        </member>
        <member name="P:Orleans.Hosting.SimpleGeneratorOptions.StreamNamespace">
            <summary>
            Gets or sets the stream namespace.
            </summary>
            <value>The stream namespace.</value>
        </member>
        <member name="P:Orleans.Hosting.SimpleGeneratorOptions.StreamGeneratorType">
            <summary>
            Gets the stream generator type
            </summary>
            <value>The type of the stream generator.</value>
        </member>
        <member name="P:Orleans.Hosting.SimpleGeneratorOptions.EventsInStream">
            <summary>
            Gets or sets the number of events to generate.
            </summary>
            <value>The number of events to generate.</value>
        </member>
        <member name="F:Orleans.Hosting.SimpleGeneratorOptions.DEFAULT_EVENTS_IN_STREAM">
            <summary>
            The default number of events to generate.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderStreamingExtensions.AddStreaming(Orleans.Hosting.IClientBuilder)">
            <summary>
            Adds support for streaming to this client.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderStreamingExtensions.AddMemoryStreams(Orleans.Hosting.IClientBuilder,System.String,System.Action{Orleans.Hosting.IClusterClientMemoryStreamConfigurator})">
            <summary>
            Adds a new in-memory stream provider to the client, using the default message serializer
            (<see cref="T:Orleans.Providers.DefaultMemoryMessageBodySerializer"/>).
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The stream provider name.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderStreamingExtensions.AddMemoryStreams``1(Orleans.Hosting.IClientBuilder,System.String,System.Action{Orleans.Hosting.IClusterClientMemoryStreamConfigurator})">
            <summary>
            Adds a new in-memory stream provider to the client.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The stream provider name.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderStreamingExtensions.AddPersistentStreams(Orleans.Hosting.IClientBuilder,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory},System.Action{Orleans.Hosting.IClusterClientPersistentStreamConfigurator})">
            <summary>
            Adds a new persistent streams provider to the client.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The stream provider name.</param>
            <param name="adapterFactory">The adapter factory.</param>
            <param name="configureStream">The configuration delegate.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.IPersistentStreamConfigurator">
            <summary>
            Configuration builder for persistent streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.PersistentStreamConfiguratorExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Hosting.IPersistentStreamConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.PersistentStreamConfiguratorExtensions.ConfigureStreamPubSub(Orleans.Hosting.IPersistentStreamConfigurator,Orleans.Streams.StreamPubSubType)">
            <summary>
            Configures the stream pub/sub type.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="pubsubType">The stream pub/sub type to use.</param>
        </member>
        <member name="T:Orleans.Hosting.IClusterClientPersistentStreamConfigurator">
            <summary>
            Client-specific configuration builder for persistent stream.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ClusterClientPersistentStreamConfiguratorExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Hosting.IClusterClientPersistentStreamConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClusterClientPersistentStreamConfiguratorExtensions.ConfigureLifecycle(Orleans.Hosting.IClusterClientPersistentStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StreamLifecycleOptions}})">
            <summary>
            Configures the <see cref="T:Orleans.Configuration.StreamLifecycleOptions"/>.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.ClusterClientPersistentStreamConfigurator">
            <summary>
            Client-side configuration provider for persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClusterClientPersistentStreamConfigurator.#ctor(System.String,Orleans.Hosting.IClientBuilder,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.ClusterClientPersistentStreamConfigurator"/> class.
            </summary>
            <param name="name">The stream provider name.</param>
            <param name="clientBuilder">The client builder.</param>
            <param name="adapterFactory">The adapter factory.</param>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderMemoryStreamExtensions">
            <summary>
            <see cref="T:Orleans.Hosting.ISiloBuilder"/> extension methods for configuring in-memory streams. 
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderMemoryStreamExtensions.AddMemoryStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.ISiloMemoryStreamConfigurator})">
            <summary>
            Configure silo to use memory streams, using the default message serializer
            (<see cref="T:Orleans.Providers.DefaultMemoryMessageBodySerializer"/>).
            </summary>
            using the default built-in serializer
            <param name="builder">The builder.</param>
            <param name="name">The stream provider name.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderMemoryStreamExtensions.AddMemoryStreams``1(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.ISiloMemoryStreamConfigurator})">
            <summary>
            Configure silo to use memory streams.
            </summary>
            <typeparam name="TSerializer">The message serializer type, which must implement <see cref="T:Orleans.Providers.IMemoryMessageBodySerializer"/>.</typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The stream provider name.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStreamingExtensions">
            <summary>
            Extension methods for confiiguring streaming on silos.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStreamingExtensions.AddStreaming(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Add support for streaming to this application.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStreamingExtensions.AddPersistentStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory},System.Action{Orleans.Hosting.ISiloPersistentStreamConfigurator})">
            <summary>
            Configures the silo to use persistent streams.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The provider name.</param>
            <param name="adapterFactory">The provider adapter factory.</param>
            <param name="configureStream">The stream provider configuration delegate.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStreamingExtensions.AddStreamFilter``1(Orleans.Hosting.ISiloBuilder,System.String)">
            <summary>
            Adds a stream filter. 
            </summary>
            <typeparam name="T">The stream filter type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The stream filter name.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStreamingExtensions.AddStreamFilter``1(Orleans.Hosting.IClientBuilder,System.String)">
            <summary>
            Adds a stream filter. 
            </summary>
            <typeparam name="T">The stream filter type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The stream filter name.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.StreamingServiceCollectionExtensions">
            <summary>
            Extension methods for configuring streaming on silos.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamingServiceCollectionExtensions.AddSiloStreaming(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add support for streaming to this silo.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Orleans.Hosting.StreamingServiceCollectionExtensions.AddClientStreaming(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add support for streaming to this client.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Orleans.Hosting.StreamingServiceCollectionExtensions.AddStreamFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds a stream filter. 
            </summary>
            <typeparam name="T">The stream filter type.</typeparam>
            <param name="services">The service collection.</param>
            <param name="name">The stream filter name.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.Hosting.ISiloPersistentStreamConfigurator">
            <summary>
            Functionality for configuring persistent streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.SiloPersistentStreamConfiguratorExtensions">
            <summary>
            Extnesions for <see cref="T:Orleans.Hosting.ISiloPersistentStreamConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtensions.ConfigurePullingAgent(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StreamPullingAgentOptions}})">
            <summary>
            Configures the pulling agent.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtensions.ConfigureLifecycle(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StreamLifecycleOptions}})">
            <summary>
            Configures the lifecycle.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtensions.ConfigurePartitionBalancing(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IStreamQueueBalancer})">
            <summary>
            Configures partition balancing.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="factory">The partition balancer factory.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtensions.ConfigurePartitionBalancing``1(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IStreamQueueBalancer},System.Action{Microsoft.Extensions.Options.OptionsBuilder{``0}})">
            <summary>
            Configures partition balancing.
            </summary>
            <typeparam name="TOptions">The partition balancer options.</typeparam>
            <param name="configurator">The configuration builder.</param>
            <param name="factory">The partition balancer factory.</param>
            <param name="configureOptions">The configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.IMemoryStreamConfigurator">
            <summary>
            Configuration builder for memory streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.MemoryStreamConfiguratorExtensions">
            <summary>
            Configuration extensions for memory streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.MemoryStreamConfiguratorExtensions.ConfigurePartitioning(Orleans.Hosting.IMemoryStreamConfigurator,System.Int32)">
            <summary>
            Configures partitioning for memory streams.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="numOfQueues">The number of queues.</param>
        </member>
        <member name="T:Orleans.Hosting.ISiloMemoryStreamConfigurator">
            <summary>
            Silo-specific configuration builder for memory streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.SiloMemoryStreamConfigurator`1">
            <summary>
            Configures memory streams.
            </summary>
            <typeparam name="TSerializer">The message body serializer type, which must implement <see cref="T:Orleans.Providers.IMemoryMessageBodySerializer"/>.</typeparam>
        </member>
        <member name="M:Orleans.Hosting.SiloMemoryStreamConfigurator`1.#ctor(System.String,System.Action{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.SiloMemoryStreamConfigurator`1"/> class.
            </summary>
            <param name="name">The stream provider name.</param>
            <param name="configureServicesDelegate">The services configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.IClusterClientMemoryStreamConfigurator">
            <summary>
            Client-specific configuration builder for memory streams.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ClusterClientMemoryStreamConfigurator`1">
            <summary>
            Configures memory streams.
            </summary>
            <typeparam name="TSerializer">The message body serializer type, which must implement <see cref="T:Orleans.Providers.IMemoryMessageBodySerializer"/>.</typeparam>
        </member>
        <member name="M:Orleans.Hosting.ClusterClientMemoryStreamConfigurator`1.#ctor(System.String,Orleans.Hosting.IClientBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.ClusterClientMemoryStreamConfigurator`1"/> class.
            </summary>
            <param name="name">The stream provider name.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Orleans.Hosting.SiloPersistentStreamConfiguratorExtension">
            <summary>
            Extension methods for <see cref="T:Orleans.Hosting.ISiloPersistentStreamConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtension.UseConsistentRingQueueBalancer(Orleans.Hosting.ISiloPersistentStreamConfigurator)">
            <summary>
            Configures the stream provider to use the consistent ring queue balancer.
            </summary>
            <param name="configurator">The confiurator.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtension.UseStaticClusterConfigDeploymentBalancer(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Nullable{System.TimeSpan})">
            <summary>
            Configures the stream provider to use the static cluster configuration deployment balancer.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="siloMaturityPeriod">The silo maturity period.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtension.UseDynamicClusterConfigDeploymentBalancer(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Nullable{System.TimeSpan})">
            <summary>
            Configures the stream provider to use the dynamic cluster configuration deployment balancer.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="siloMaturityPeriod">The silo maturity period.</param>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfiguratorExtension.UseLeaseBasedQueueBalancer(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.LeaseBasedQueueBalancerOptions}})">
            <summary>
            Configures the stream provider to use the lease based queue balancer.
            </summary>
            <param name="configurator">The configuration builder.</param>
            <param name="configureOptions">The configure options.</param>
        </member>
        <member name="T:Orleans.Hosting.StaticClusterDeploymentOptions">
            <summary>
            Deployment configuration that reads from orleans cluster configuration
            </summary>
        </member>
        <member name="P:Orleans.Hosting.StaticClusterDeploymentOptions.SiloNames">
            <summary>
            Gets or sets the silo names.
            </summary>
            <value>The silo names.</value>
        </member>
        <member name="M:Orleans.Hosting.StaticClusterDeploymentOptions.Orleans#Streams#IDeploymentConfiguration#GetAllSiloNames">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Hosting.PersistentStreamStorageConfigurationValidator">
            <summary>
            Validates <see cref="T:Orleans.Configuration.StreamPubSubOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.PersistentStreamStorageConfigurationValidator.#ctor(System.IServiceProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.PersistentStreamStorageConfigurationValidator"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
        </member>
        <member name="M:Orleans.Hosting.PersistentStreamStorageConfigurationValidator.ValidateConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Hosting.PersistentStreamStorageConfigurationValidator.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Hosting.PersistentStreamStorageConfigurationValidator"/> instance.
            </summary>
            <param name="services">The services.</param>
            <param name="name">The name.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloPersistentStreamConfigurator">
            <summary>
            Configures persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloPersistentStreamConfigurator.#ctor(System.String,System.Action{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}},System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.SiloPersistentStreamConfigurator"/> class.
            </summary>
            <param name="name">The stream provider name.</param>
            <param name="configureDelegate">The configuration delegate.</param>
            <param name="adapterFactory">The adapter factory.</param>
        </member>
        <member name="T:Orleans.Configuration.StreamCacheEvictionOptions">
            <summary>
            Configuration options for stream cache eviction.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamCacheEvictionOptions.DataMinTimeInCache">
            <summary>
            Gets or sets the minimum time a message will stay in cache before it is available for time based purge.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamCacheEvictionOptions.DefaultDataMinTimeInCache">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.StreamCacheEvictionOptions.DataMinTimeInCache"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamCacheEvictionOptions.DataMaxAgeInCache">
            <summary>
            Gets or sets the difference in time between the newest and oldest messages in the cache.  Any messages older than this will be purged from the cache.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamCacheEvictionOptions.DefaultDataMaxAgeInCache">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.StreamCacheEvictionOptions.DataMaxAgeInCache"/>
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamCacheEvictionOptions.MetadataMinTimeInCache">
            <summary>
            Gets or sets the minimum time that message metadata (<see cref="T:Orleans.Streams.StreamSequenceToken"/>) will stay in cache before it is available for time based purge.
            Used to avoid cache miss if the full message was purged.
            Set to <see langword="null"/> to disable this tracking.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamCacheEvictionOptions.DefaultMetadataMinTimeInCache">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.StreamCacheEvictionOptions.MetadataMinTimeInCache"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.StreamStatisticOptions">
            <summary>
            Configuration options for stream statistics.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamStatisticOptions.StatisticMonitorWriteInterval">
            <summary>
            Gets or sets the statistic monitor write interval.
            Statistics generation is triggered by activity. Interval will be ignored when streams are inactive.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamStatisticOptions.DefaultStatisticMonitorWriteInterval">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.StreamStatisticOptions.StatisticMonitorWriteInterval"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SimpleQueueCacheOptions">
            <summary>
            Configuration options for the simple queue cache.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SimpleQueueCacheOptions.CacheSize">
            <summary>
            Gets or sets the size of the cache.
            </summary>
            <value>The size of the cache.</value>
        </member>
        <member name="F:Orleans.Configuration.SimpleQueueCacheOptions.DEFAULT_CACHE_SIZE">
            <summary>
            The default value of <see cref="P:Orleans.Configuration.SimpleQueueCacheOptions.CacheSize"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SimpleQueueCacheOptionsValidator">
            <summary>
            Validates <see cref="T:Orleans.Configuration.SimpleQueueCacheOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.SimpleQueueCacheOptionsValidator.#ctor(Orleans.Configuration.SimpleQueueCacheOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.SimpleQueueCacheOptionsValidator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Orleans.Configuration.SimpleQueueCacheOptionsValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Configuration.SimpleQueueCacheOptionsValidator.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Configuration.SimpleQueueCacheOptionsValidator"/> instance.
            </summary>
            <param name="services">The services.</param>
            <param name="name">The provider name.</param>
            <returns>A new <see cref="T:Orleans.Configuration.SimpleQueueCacheOptionsValidator"/> instance.</returns>
        </member>
        <member name="T:Orleans.Configuration.StreamLifecycleOptions">
            <summary>
            Options for managing stream system lifecycle.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.StreamLifecycleOptions.RunState">
            <summary>
            Identifies well-known points in the lifecycle of the streaming system.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamLifecycleOptions.RunState.None">
            <summary>
            Not running.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamLifecycleOptions.RunState.Initialized">
            <summary>
            Streaming has initialized.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamLifecycleOptions.RunState.AgentsStarted">
            <summary>
            The agents have started.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamLifecycleOptions.RunState.AgentsStopped">
            <summary>
            The agents have stopped.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamLifecycleOptions.StartupState">
            <summary>
            If set to <see cref="F:Orleans.Configuration.StreamLifecycleOptions.RunState.AgentsStarted"/>, stream pulling agents will be started during initialization.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamLifecycleOptions.InitStage">
            <summary>
            Gets or sets the lifecycle stage at which to initialize the stream runtime.
            </summary>
            <value>The initialization stage.</value>
        </member>
        <member name="P:Orleans.Configuration.StreamLifecycleOptions.StartStage">
            <summary>
            Gets or sets the lifecycle stage at which to start the stream runtime.
            </summary>
            <value>The startup stage.</value>
        </member>
        <member name="T:Orleans.Configuration.StreamPubSubOptions">
            <summary>
            Options for configuring stream pub/sub.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPubSubOptions.PubSubType">
            <summary>
            Gets or sets the pub sub type.
            </summary>
            <value>The type of the pub sub.</value>
        </member>
        <member name="T:Orleans.Configuration.StreamPullingAgentOptions">
            <summary>
            Options for stream pulling agents.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPullingAgentOptions.BatchContainerBatchSize">
            <summary>
            Gets or sets the size of each batch container batch.
            </summary>
            <value>The size of each batch container batch.</value>
        </member>
        <member name="F:Orleans.Configuration.StreamPullingAgentOptions.DEFAULT_BATCH_CONTAINER_BATCH_SIZE">
            <summary>
            The default batch container batch size.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPullingAgentOptions.GetQueueMsgsTimerPeriod">
            <summary>
            Gets or sets the period between polling for queue messages.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.StreamPullingAgentOptions.DEFAULT_GET_QUEUE_MESSAGES_TIMER_PERIOD">
            <summary>
            The default period between polling for queue messages.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPullingAgentOptions.InitQueueTimeout">
            <summary>
            Gets or sets the queue initialization timeout.
            </summary>
            <value>The queue initialization timeout.</value>
        </member>
        <member name="F:Orleans.Configuration.StreamPullingAgentOptions.DEFAULT_INIT_QUEUE_TIMEOUT">
            <summary>
            The default queue initialization timeout
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPullingAgentOptions.MaxEventDeliveryTime">
            <summary>
            Gets or sets the maximum event delivery time.
            </summary>
            <value>The maximum event delivery time.</value>
        </member>
        <member name="F:Orleans.Configuration.StreamPullingAgentOptions.DEFAULT_MAX_EVENT_DELIVERY_TIME">
            <summary>
            The default maximum event delivery time.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StreamPullingAgentOptions.StreamInactivityPeriod">
            <summary>
            Gets or sets the stream inactivity period.
            </summary>
            <value>The stream inactivity period.</value>
        </member>
        <member name="F:Orleans.Configuration.StreamPullingAgentOptions.DEFAULT_STREAM_INACTIVITY_PERIOD">
            <summary>
            The default stream inactivity period.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.HashRingStreamQueueMapperOptions">
            <summary>
            Options for <see cref="T:Orleans.Streams.HashRingBasedStreamQueueMapper"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.HashRingStreamQueueMapperOptions.TotalQueueCount">
            <summary>
            Gets or sets the total queue count.
            </summary>
            <value>The total queue count.</value>
        </member>
        <member name="F:Orleans.Configuration.HashRingStreamQueueMapperOptions.DEFAULT_NUM_QUEUES">
            <summary>
            The default number queues, which should be a power of two.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.DeploymentBasedQueueBalancerOptions">
            <summary>
            Options for <see cref="T:Orleans.Streams.DeploymentBasedQueueBalancer"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DeploymentBasedQueueBalancerOptions.SiloMaturityPeriod">
            <summary>
            Gets or sets the silo maturity period, which is the period of time to allow a silo to remain active for before rebalancing queues.
            </summary>
            <value>The silo maturity period.</value>
        </member>
        <member name="F:Orleans.Configuration.DeploymentBasedQueueBalancerOptions.DEFAULT_SILO_MATURITY_PERIOD">
            <summary>
            The default silo maturity period.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DeploymentBasedQueueBalancerOptions.IsFixed">
            <summary>
            Gets or sets a value indicating whether to presume a static (fixed) cluster.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.LeaseBasedQueueBalancerOptions">
            <summary>
            Config for LeaseBasedQueueBalancer. User need to configure this option in order to use LeaseBasedQueueBalancer in the
              stream provider.  Per stream provider options can be configured as named options using the same name as the provider.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LeaseBasedQueueBalancerOptions.LeaseLength">
            <summary>
            Gets or sets the length of the lease.
            </summary>
            <value>The length of the lease.</value>
        </member>
        <member name="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultLeaseLength">
            <summary>
            The default lease length.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LeaseBasedQueueBalancerOptions.LeaseRenewPeriod">
            <summary>
            Gets or sets the lease renew period.
            </summary>
            <value>The lease renew period.</value>
        </member>
        <member name="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultLeaseRenewPeriod">
            <summary>
            The default lease renew period
            </summary>
            <remarks>
            <see cref="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultLeaseRenewPeriod"/> set to (<see cref="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultLeaseLength"/>/2 - 1) to allow time for at least 2 renew calls before we lose the lease.        
            </remarks>
        </member>
        <member name="P:Orleans.Configuration.LeaseBasedQueueBalancerOptions.LeaseAquisitionPeriod">
            <summary>
            Gets or sets how often balancer attempts to aquire leases.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultMinLeaseAquisitionPeriod">
            <summary>
            The default minimum lease aquisition period.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LeaseBasedQueueBalancerOptions.LeaseCategory">
            <summary>
            Gets or sets the lease category, allows for more fine grain partitioning of leases.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.LeaseBasedQueueBalancerOptions.DefaultLeaseCategory">
            <summary>
            The default lease category
            </summary>
        </member>
        <member name="T:Orleans.Streams.DefaultStreamIdMapper">
            <summary>
            The default <see cref="T:Orleans.Streams.IStreamIdMapper"/> implementation.
            </summary>
        </member>
        <member name="F:Orleans.Streams.DefaultStreamIdMapper.Name">
            <summary>
            The name of this stream identity mapper.
            </summary>
        </member>
        <member name="M:Orleans.Streams.DefaultStreamIdMapper.GetGrainKeyId(Orleans.Metadata.GrainBindings,Orleans.Runtime.StreamId)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchObservable`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production and consumption of batches of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObservable`1.SubscribeAsync(Orleans.Streams.IAsyncBatchObserver{`0})">
            <summary>
            Subscribe a consumer to this batch observable.
            </summary>
            <param name="observer">The asynchronous batch observer to subscribe.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObservable`1.SubscribeAsync(Orleans.Streams.IAsyncBatchObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Subscribe a consumer to this batch observable.
            </summary>
            <param name="observer">The asynchronous batch observer to subscribe.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.SequentialItem`1">
            <summary>
            Represents a stream item within a sequence.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:Orleans.Streams.SequentialItem`1.#ctor(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.SequentialItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="token">The token.</param>
        </member>
        <member name="P:Orleans.Streams.SequentialItem`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Orleans.Streams.SequentialItem`1.Token">
            <summary>
            Gets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchObserver`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production and consumption of batches of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnNextAsync(System.Collections.Generic.IList{Orleans.Streams.SequentialItem{`0}})">
            <summary>
            Passes the next batch of items to the consumer.
            <para>
            The Task returned from this method should be completed when the items' processing has been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            When the consumer is the (producer endpoint of) a stream, the Task is completed when the stream implementation
            has accepted responsibility for the items and is assured of meeting its delivery guarantees.
            For instance, a stream based on a durable queue would complete the Task when the items have been durably saved.
            A stream that provides best-effort at most once delivery would return a Task that is already complete.
            </para>
            <para>
            When the producer is the (consumer endpoint of) a stream, the Task should be completed by the consumer code
            when it has accepted responsibility for the items. 
            In particular, if the stream provider guarantees at-least-once delivery, then the items should not be considered
            delivered until the Task returned by the consumer has been completed.
            </para>
            </summary>
            <param name="items">The item to be passed.</param>
            <returns>A Task that is completed when the item has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnCompletedAsync">
            <summary>
            Notifies the consumer that the stream was completed.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <returns>A Task that is completed when the stream-complete operation has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnErrorAsync(System.Exception)">
            <summary>
            Notifies the consumer that the stream had an error.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <param name="ex">An Exception that describes the error that occurred on the stream.</param>
            <returns>A Task that is completed when the close has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchProducer`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production of batches of items.
            <para>
            Note that this interface is invoked (used) by item producers.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchProducer`1.OnNextBatchAsync(System.Collections.Generic.IEnumerable{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next batch of items to the consumer.
            <para>
            The Task returned from this method should be completed when all items in the batch have been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            That is, the semantics of the returned Task is the same as for <see cref="M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)" />,
            extended for all items in the batch.
            </para>
            </summary>
            <param name="batch">The items to be passed.</param>
            <param name="token">The stream sequence token of this item.</param>
            <returns>A Task that is completed when the batch has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncObservable`1">
            <summary>
            This interface generalizes the standard .NET IObserveable interface to allow asynchronous consumption of items.
            Asynchronous here means that the consumer can process items asynchronously and signal item completion to the 
            producer by completing the returned Task.
            <para>
            Note that this interface is invoked (used) by item consumers and implemented by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,System.String)">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterData">Data object that will be passed in to the filter.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncObserver`1">
            <summary>
            This interface generalizes the standard .NET IObserver interface to allow asynchronous production of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next item to the consumer.
            <para>
            The Task returned from this method should be completed when the item's processing has been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            When the consumer is the (producer endpoint of) a stream, the Task is completed when the stream implementation
            has accepted responsibility for the item and is assured of meeting its delivery guarantees.
            For instance, a stream based on a durable queue would complete the Task when the item has been durably saved.
            A stream that provides best-effort at most once delivery would return a Task that is already complete.
            </para>
            <para>
            When the producer is the (consumer endpoint of) a stream, the Task should be completed by the consumer code
            when it has accepted responsibility for the item. 
            In particular, if the stream provider guarantees at-least-once delivery, then the item should not be considered
            delivered until the Task returned by the consumer has been completed.
            </para>
            </summary>
            <param name="item">The item to be passed.</param>
            <param name="token">The stream sequence token of this item.</param>
            <returns>A Task that is completed when the item has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnCompletedAsync">
            <summary>
            Notifies the consumer that the stream was completed.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <returns>A Task that is completed when the stream-complete operation has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnErrorAsync(System.Exception)">
            <summary>
            Notifies the consumer that the stream had an error.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <param name="ex">An Exception that describes the error that occurred on the stream.</param>
            <returns>A Task that is completed when the close has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncStream`1">
            <summary>
            This interface represents an object that serves as a distributed rendezvous between producers and consumers.
            It is similar to a Reactive Framework <code>Subject</code> and implements
            <code>IObserver</code> nor <code>IObservable</code> interfaces.
            </summary>
            <typeparam name="T">The type of object that flows through the stream.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles">
            <summary>
            Retrieves a list of all active subscriptions created by the caller for this stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncStream">
            <summary>
            This interface represents an object that serves as a distributed rendezvous between producers and consumers.
            It is similar to a Reactive Framework <code>Subject</code> and implements
            <code>IObserver</code> nor <code>IObservable</code> interfaces.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream.IsRewindable">
            <summary>
            Gets a value indicating whether this is a rewindable stream - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
            <value>The stream identifier.</value>
        </member>
        <member name="T:Orleans.Streams.ImplicitConsumerGrainExtensions">
            <summary>
            Extension methods for grains implicitly subscribed to streams.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitConsumerGrainExtensions.GetImplicitStreamIdentity(Orleans.IGrainWithGuidCompoundKey)">
            <summary>
            Constructs <see cref="T:Orleans.Streams.StreamIdentity"/> of the stream that the grain is implicitly subscribed to.
            </summary>
            <param name="grain">The implicitly subscribed grain.</param>
            <returns>The stream identity (key + namespace).</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamIdentity">
            <summary>
            Uniquely identifies a stream.
            </summary>
            <remarks>
            Use <see cref="T:Orleans.Runtime.StreamId"/> instead, where possible.
            </remarks>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Orleans.Streams.IStreamIdMapper">
            <summary>
            Common interface for components that map a <see cref="T:Orleans.Runtime.StreamId"/> to a <see cref="P:Orleans.Runtime.GrainId.Key"/>
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamIdMapper.GetGrainKeyId(Orleans.Metadata.GrainBindings,Orleans.Runtime.StreamId)">
            <summary>
            Gets the <see cref="P:Orleans.Runtime.GrainId.Key" /> which maps to the provided <see cref="T:Orleans.Runtime.StreamId" />
            </summary>
            <param name="grainBindings">The grain bindings.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>The <see cref="P:Orleans.Runtime.GrainId.Key"/> component.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.IStreamSubscriptionHandleFactory">
            <summary>
            Functionality for creating a stream subscription handle for a particular stream and subscription.
            </summary>
        </member>
        <member name="P:Orleans.Streams.Core.IStreamSubscriptionHandleFactory.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
            <value>The stream identifier.</value>
        </member>
        <member name="P:Orleans.Streams.Core.IStreamSubscriptionHandleFactory.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Orleans.Streams.Core.IStreamSubscriptionHandleFactory.SubscriptionId">
            <summary>
            Gets the subscription identifier.
            </summary>
            <value>The subscription identifier.</value>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionHandleFactory.Create``1">
            <summary>
            Creates a stream subscription handle for the stream and subscription identified by this instance.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <returns>The new stream subscription handle.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.IStreamSubscriptionManager">
            <summary>
            Functionality for managing stream subscriptions.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionManager.AddSubscription(System.String,Orleans.Runtime.StreamId,Orleans.Runtime.GrainReference)">
            <summary>
            Subscribes the specified grain to a stream.
            </summary>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="grainRef">The grain reference.</param>
            <returns>The stream subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionManager.RemoveSubscription(System.String,Orleans.Runtime.StreamId,System.Guid)">
            <summary>
            Unsubscribes a grain from a stream.
            </summary>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="subscriptionId">The subscription identifier.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionManager.GetSubscriptions(System.String,Orleans.Runtime.StreamId)">
            <summary>
            Gets the subscriptions for a stream.
            </summary>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>The subscriptions.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.IStreamSubscriptionManagerAdmin">
            <summary>
            Functionality for retrieving a <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionManagerAdmin.GetStreamSubscriptionManager(System.String)">
            <summary>
            Gets the stream subscription manager.
            </summary>
            <param name="managerType">Type of the manager.</param>
            <returns>The <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/>.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.StreamSubscriptionManagerType">
            <summary>
            Constants for <see cref="M:Orleans.Streams.Core.IStreamSubscriptionManagerAdmin.GetStreamSubscriptionManager(System.String)"/>.
            </summary>
        </member>
        <member name="F:Orleans.Streams.Core.StreamSubscriptionManagerType.ExplicitSubscribeOnly">
            <summary>
            The explicit subscription manager.
            </summary>
        </member>
        <member name="T:Orleans.Streams.Core.IStreamSubscriptionManagerRetriever">
            <summary>
            Provides functionality for retrieving an <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionManagerRetriever.GetStreamSubscriptionManager">
            <summary>
            Gets the stream subscription manager.
            </summary>
            <returns>The <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/>.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.IStreamSubscriptionObserver">
            <summary>
            When implemented by a grain, notifies the grain of any new or resuming subscriptions.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Core.IStreamSubscriptionObserver.OnSubscribed(Orleans.Streams.Core.IStreamSubscriptionHandleFactory)">
            <summary>
            Called when this grain receives a message for a stream which it has not yet explicitly subscribed to or resumed.
            </summary>
            <param name="handleFactory">The handle factory.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Streams.Core.StreamSubscription">
            <summary>
            Represents a subscription to a stream.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Core.StreamSubscription.#ctor(System.Guid,System.String,Orleans.Runtime.StreamId,Orleans.Runtime.GrainId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.Core.StreamSubscription"/> class.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="grainId">The grain identifier.</param>
        </member>
        <member name="P:Orleans.Streams.Core.StreamSubscription.SubscriptionId">
            <summary>
            Gets or sets the subscription identifier.
            </summary>
            <value>The subscription identifier.</value>
        </member>
        <member name="P:Orleans.Streams.Core.StreamSubscription.StreamProviderName">
            <summary>
            Gets or sets the name of the stream provider.
            </summary>
            <value>The name of the stream provider.</value>
        </member>
        <member name="P:Orleans.Streams.Core.StreamSubscription.StreamId">
            <summary>
            Gets or sets the stream identifier.
            </summary>
            <value>The stream identifier.</value>
        </member>
        <member name="P:Orleans.Streams.Core.StreamSubscription.GrainId">
            <summary>
            Gets or sets the grain identifier.
            </summary>
            <value>The grain identifier.</value>
        </member>
        <member name="T:Orleans.Streams.StreamIdentity">
            <summary>
            Stream identity contains the public stream information use to uniquely identify a stream.
            Stream identities are only unique per stream provider.
            </summary>
            <remarks>
            Use <see cref="T:Orleans.Runtime.StreamId"/> where possible, instead.
            </remarks>
        </member>
        <member name="M:Orleans.Streams.StreamIdentity.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamIdentity"/> class.
            </summary>
            <param name="streamGuid">The stream unique identifier.</param>
            <param name="streamNamespace">The stream namespace.</param>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Guid">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Namespace">
            <summary>
            Gets the stream namespace.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamIdentity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streams.StreamIdentity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streams.StreamSequenceToken">
            <summary>
            Handle representing stream sequence number/token.
            Consumer may subscribe to the stream while specifying the start of the subscription sequence token.
            That means that the stream infrastructure will deliver stream events starting from this sequence token.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSequenceToken.SequenceNumber">
            <summary>
            Gets the number of event batches in stream prior to this event batch
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSequenceToken.EventIndex">
            <summary>
            Gets the number of events in batch prior to this event
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSequenceToken.Equals(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.StreamSequenceToken.CompareTo(Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.StreamSequenceTokenUtilities">
            <summary>
            Utilities for comparing <see cref="T:Orleans.Streams.StreamSequenceToken"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSequenceTokenUtilities.Newer(Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Returns <see langword="true"/> if the first token is newer than the second token.
            </summary>
            <param name="me">The first token</param>
            <param name="other">The second token.</param>
            <returns><see langword="true" /> if the first token is newer than the second token, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamSequenceTokenUtilities.Older(Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Returns <see langword="true"/> if the first token is older than the second token.
            </summary>
            <param name="me">The first token</param>
            <param name="other">The second token.</param>
            <returns><see langword="true" /> if the first token is older than the second token, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandle`1">
            <summary>
            Handle representing this subscription.
            Consumer may serialize and store the handle in order to unsubscribe later, for example
            in another activation on this grain.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
            <value>The stream identifier.</value>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.HandleId">
            <summary>
            Gets the unique identifier for this StreamSubscriptionHandle
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.UnsubscribeAsync">
            <summary>
            Unsubscribe a stream consumer from this observable.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.ResumeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumed consumption from a subscription to a stream.
            </summary>
            <param name="observer">The observer object.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>
            The new stream subscription handle.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.ResumeAsync(Orleans.Streams.IAsyncBatchObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resume batch consumption from a subscription to a stream.
            </summary>
            <param name="observer">The batcj bserver object.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>
            The new stream subscription handle.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.Equals(Orleans.Streams.StreamSubscriptionHandle{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.AsyncBatchObservableExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Streams.IAsyncBatchObservable`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.AsyncBatchObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncBatchObservable{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncBatchObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncBatchObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncBatchObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncBatchObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncBatchObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncBatchObservable{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncBatchObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncBatchObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncBatchObserver.OnErrorAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncBatchObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncBatchObservable{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncBatchObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncBatchObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncBatchObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncBatchObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncBatchObservable{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncBatchObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncBatchObserver.OnNextAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="T:Orleans.Streams.AsyncObservableExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Streams.IAsyncObservable`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="T:Orleans.Streams.GenericAsyncObserver`1">
            <summary>
            Class used by the IAsyncObservable extension methods to allow observation via delegate.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="T:Orleans.Streams.GenericAsyncBatchObserver`1">
            <summary>
            Class used by the IAsyncBatchObservable extension methods to allow observation via delegate.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandleExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Streams.StreamSubscriptionHandle`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegate that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncBatchObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegate that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{System.Collections.Generic.IList{Orleans.Streams.SequentialItem{``0}},System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegate that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitly unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.Filtering.IStreamFilter">
            <summary>
            Functionality for filtering streams.
            </summary>
        </member>
        <member name="M:Orleans.Streams.Filtering.IStreamFilter.ShouldDeliver(Orleans.Runtime.StreamId,System.Object,System.String)">
            <summary>
            Returns a value indicating if the specified stream item should be delivered.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <param name="item">The stream item.</param>
            <param name="filterData">The filter data.</param>
            <returns><see langword="true" /> if the stream item should be delivered, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamControl">
            <summary>
            Stream control interface to allow stream runtime to perform management operations on streams 
            without needing to worry about concrete generic types used by this stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamControl.Cleanup(System.Boolean,System.Boolean)">
            <summary>
            Perform cleanup functions for this stream.
            </summary>
            <returns>Completion promise for the cleanup operations for this stream.</returns>
        </member>
        <member name="T:Orleans.Streams.StreamConsumerExtension">
            <summary>
            The extension multiplexes all stream related messages to this grain between different streams and their stream observers.
            
            On the silo, we have one extension object per activation and this extension multiplexes all streams on this activation 
                (streams of all types and ids: different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extension for every StreamConsumer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamDirectory">
            <summary>
            Stores all streams associated with a specific silo
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandlerFactory">
            <summary>
            Factory for creating <see cref="T:Orleans.Streams.StreamSubscriptionHandle`1"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandlerFactory.StreamId">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandlerFactory.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandlerFactory.SubscriptionId">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandlerFactory.#ctor(Orleans.Streams.IStreamProvider,Orleans.Runtime.StreamId,System.String,Orleans.Runtime.GuidId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamSubscriptionHandlerFactory"/> class.
            </summary>        
            <param name="streamProvider">
            The stream provider.
            </param>
            <param name="streamId">
            The stream identity.
            </param>
            <param name="providerName">
            The stream provider name.
            </param>
            <param name="subscriptionId">
            The subscription identity.
            </param>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandlerFactory.Create``1">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streams.LoadShedQueueFlowController">
            <summary>
            Flow control triggered by silo load shedding.
            This is an all-or-nothing trigger which will request <see cref="F:System.Int32.MaxValue"/>, or <c>0</c>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.LoadShedQueueFlowController.CreateAsPercentOfLoadSheddingLimit(Orleans.Configuration.LoadSheddingOptions,Orleans.Statistics.IHostEnvironmentStatistics,System.Int32)">
            <summary>
            Creates a flow controller triggered when the CPU reaches a percentage of the cluster load shedding limit.
            This is intended to reduce queue read rate prior to causing the silo to shed load.
            Note:  Triggered only when load shedding is enabled.
            </summary>
            <param name="options">The silo statistics options.</param>
            <param name="percentOfSiloSheddingLimit">Percentage of load shed limit which triggers a reduction of queue read rate.</param>
            <param name="hostEnvironmentStatistics">The host environment statistics.</param>
            <returns>The flow controller.</returns>
        </member>
        <member name="M:Orleans.Streams.LoadShedQueueFlowController.CreateAsPercentageOfCPU(System.Int32,Orleans.Configuration.LoadSheddingOptions,Orleans.Statistics.IHostEnvironmentStatistics)">
            <summary>
            Creates a flow controller triggered when the CPU reaches the specified limit.
            Note:  Triggered only when load shedding is enabled.
            </summary>
            <param name="loadSheddingLimit">Percentage of CPU which triggers queue read rate reduction</param>
            <param name="options">The silo statistics options.</param>
            <param name="hostEnvironmentStatistics">The host environment statistics.</param>
            <returns>The flow controller.</returns>
        </member>
        <member name="M:Orleans.Streams.LoadShedQueueFlowController.GetMaxAddCount">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.IDeploymentConfiguration">
            <summary>
            Interface for accessing the deployment configuration.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IDeploymentConfiguration.GetAllSiloNames">
            <summary>
            Get the silo instance names for all configured silos.
            </summary>
            <returns>The list of silo names.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueDataAdapter`1">
            <summary>
            Converts event data to queue message
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueDataAdapter`1.ToQueueMessage``1(Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a cloud queue message from stream event data.
            </summary>
            <typeparam name="T">The stream event type.</typeparam>
            <param name="streamId">The stream identifier.</param>
            <param name="events">The events.</param>
            <param name="token">The token.</param>
            <param name="requestContext">The request context.</param>
            <returns>A new queue message.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueDataAdapter`2">
            <summary>
            Converts event data to and from queue message
            </summary>
            <typeparam name="TQueueMessage">The type of the queue message.</typeparam>
            <typeparam name="TMessageBatch">The type of the message batch.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IQueueDataAdapter`2.FromQueueMessage(`0,System.Int64)">
            <summary>
            Creates a batch container from a cloud queue message
            </summary>
            <param name="queueMessage">The queue message.</param>
            <param name="sequenceId">The sequence identifier.</param>
            <returns>The message batch.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamFailureHandler">
            <summary>
            Functionality for handling stream failures.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IStreamFailureHandler.ShouldFaultSubsriptionOnError">
            <summary>
            Gets a value indicating whether the subscription should fault when there is an error.
            </summary>
            <value><see langword="true" /> if the subscription should fault when there is an error; otherwise, <see langword="false" />.</value>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Called once all measures to deliver an event to a consumer have been exhausted.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamIdentity">The stream identity.</param>
            <param name="sequenceToken">The sequence token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnSubscriptionFailure(Orleans.Runtime.GuidId,System.String,Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when establishing a subscription failed.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="streamIdentity">The stream identity.</param>
            <param name="sequenceToken">The sequence token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalancer">
            <summary>
            The stream queue balancer is responsible for load balancing queues across all other related queue balancers.  It
            notifies any listeners (<code>IStreamQueueBalanceListener</code>) of changes to the distribution of queues.
            Method GetMyQueues, SubscribeToQueueDistributionChangeEvents, and UnSubscribeFromQueueDistributionChangeEvents will 
            likely be called in the IStreamQueueBalanceListener's thread so they need to be thread safe
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.Initialize(Orleans.Streams.IStreamQueueMapper)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="queueMapper">The queue mapper.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.Shutdown">
            <summary>
            Shutdown the queue balancer.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.GetMyQueues">
            <summary>
            Retrieves the latest queue distribution for this balancer.
            </summary>
            <returns>Queue allocated to this balancer.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.SubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Subscribes to receive queue distribution change notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>A value indicating whether subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.UnSubscribeFromQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Unsubscribes from receiving queue distribution notifications.
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>A value indicating whether teh unsubscription succeeded or not</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalanceListener">
            <summary>
            The stream queue balancer listener receives notifications from a stream queue balancer (<code>IStreamQueueBalancer</code>)
            indicating that the balance of queues has changed.
            It should be implemented by components interested in stream queue load balancing.
            When change notification is received, listener should request updated list of queues from the queue balancer.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalanceListener.QueueDistributionChangeNotification">
            <summary>
            Called when adapter queue responsibility changes. 
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueCheckpointerFactory">
            <summary>
            Factory for creating <see cref="T:Orleans.Streams.IStreamQueueCheckpointer`1"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueCheckpointerFactory.Create(System.String)">
            <summary>
            Creates a stream checkpointer for the specified partition.
            </summary>
            <param name="partition">The partition.</param>
            <returns>The stream checkpointer.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueCheckpointer`1">
            <summary>
            Functionality for checkpointing a stream.
            </summary>
            <typeparam name="TCheckpoint">The checkpoint type.</typeparam>
        </member>
        <member name="P:Orleans.Streams.IStreamQueueCheckpointer`1.CheckpointExists">
            <summary>
            Gets a value indicating whether a checkpoint exists.
            </summary>
            <value><see langword="true" /> if checkpoint exists; otherwise, <see langword="false" />.</value>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueCheckpointer`1.Load">
            <summary>
            Loads the checkpoint.
            </summary>
            <returns>The checkpoint.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueCheckpointer`1.Update(`0,System.DateTime)">
            <summary>
            Updates the checkpoint.
            </summary>
            <param name="offset">The offset.</param>
            <param name="utcNow">The current UTC time.</param>
        </member>
        <member name="T:Orleans.Streams.NoOpStreamDeliveryFailureHandler">
            <summary>
            <see cref="T:Orleans.Streams.IStreamFailureHandler"/> which does nothing in response to failures.
            </summary>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.NoOpStreamDeliveryFailureHandler"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.NoOpStreamDeliveryFailureHandler"/> class.
            </summary>
            <param name="faultOnError">The value used for <see cref="P:Orleans.Streams.NoOpStreamDeliveryFailureHandler.ShouldFaultSubsriptionOnError"/>.</param>
        </member>
        <member name="P:Orleans.Streams.NoOpStreamDeliveryFailureHandler.ShouldFaultSubsriptionOnError">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.OnSubscriptionFailure(Orleans.Runtime.GuidId,System.String,Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamPullingAgent.Initialize">
            <summary>
            Take responsibility for a new queues that was assigned to me via a new range.
            We first store the new queue in our internal data structure, try to initialize it and start a pumping timer.
            ERROR HANDLING:
                The responsibility to handle initialization and shutdown failures is inside the INewQueueAdapterReceiver code.
                The agent will call Initialize once and log an error. It will not call initialize again.
                The receiver itself may attempt later to recover from this error and do initialization again.
                The agent will assume initialization has succeeded and will subsequently start calling pumping receive.
                Same applies to shutdown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamPullingAgent.ReadFromQueue(Orleans.Streams.QueueId,Orleans.Streams.IQueueAdapterReceiver,System.Int32)">
            <summary>
            Read from queue.
            Returns true, if data was read, false if it was not
            </summary>
            <param name="myQueueId"></param>
            <param name="rcvr"></param>
            <param name="maxCacheAddCount"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamPullingAgent.ContextualizedDeliverBatchToConsumer(Orleans.Streams.StreamConsumerData,Orleans.Streams.IBatchContainer)">
            <summary>
            Add call context for batch delivery call, then clear context immediately, without giving up turn.
            </summary>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamPullingManager.QueueDistributionChangeNotification">
            <summary>
            Actions to take when the queue distribution changes due to a failure or a join.
            Since this pulling manager is system target and queue distribution change notifications
            are delivered to it as grain method calls, notifications are not reentrant. To simplify
            notification handling we execute them serially, in a non-reentrant way.  We also suppress
            and don't execute an older notification if a newer one was already delivered.
            </summary>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamPullingManager.AddNewQueues(System.Collections.Generic.IEnumerable{Orleans.Streams.QueueId},System.Boolean)">
            <summary>
            Take responsibility for a set of new queues that were assigned to me via a new range.
            We first create one pulling agent for every new queue and store them in our internal data structure, then try to initialize the agents.
            ERROR HANDLING:
                The responsibility to handle initialization and shutdown failures is inside the Agents code.
                The manager will call Initialize once and log an error. It will not call initialize again and will assume initialization has succeeded.
                Same applies to shutdown.
            </summary>
            <param name="myQueues"></param>
            <param name="failOnInit"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.StreamEventDeliveryFailureException">
            <summary>
            This exception indicates that a stream event was not successfully delivered to the consumer.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamEventDeliveryFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamEventDeliveryFailureException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamEventDeliveryFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamEventDeliveryFailureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.StreamEventDeliveryFailureException.#ctor(Orleans.Runtime.QualifiedStreamId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamEventDeliveryFailureException"/> class.
            </summary>
            <param name="streamId">The stream identifier.</param>
        </member>
        <member name="M:Orleans.Streams.StreamEventDeliveryFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamEventDeliveryFailureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Streams.StreamEventDeliveryFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamEventDeliveryFailureException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Streams.StreamPosition">
            <summary>
            Stream position uniquely identifies the position of an event in a stream.
            If acquiring a stream position for a batch of events, the stream position will be of the first event in the batch.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamPosition.#ctor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Stream position consists of the stream identity and the sequence token
            </summary>
            <param name="streamId">The stream identity.</param>
            <param name="sequenceToken">The stream sequence token.</param>
        </member>
        <member name="P:Orleans.Streams.StreamPosition.StreamId">
            <summary>
            Gets the identity of the stream
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamPosition.SequenceToken">
            <summary>
            Gets the position in the stream
            </summary>
        </member>
        <member name="T:Orleans.Streams.AllStreamNamespacesPredicate">
            <summary>
            A stream namespace predicate which matches all namespaces.
            </summary>
        </member>
        <member name="P:Orleans.Streams.AllStreamNamespacesPredicate.PredicatePattern">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.AllStreamNamespacesPredicate.IsMatch(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.ExactMatchStreamNamespacePredicate">
            <summary>
            Stream namespace predicate which matches exactly one, specified
            </summary>
        </member>
        <member name="M:Orleans.Streams.ExactMatchStreamNamespacePredicate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.ExactMatchStreamNamespacePredicate"/> class.
            </summary>
            <param name="targetStreamNamespace">The target stream namespace.</param>
        </member>
        <member name="P:Orleans.Streams.ExactMatchStreamNamespacePredicate.PredicatePattern">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.ExactMatchStreamNamespacePredicate.IsMatch(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.IStreamNamespacePredicate">
            <summary>
            Stream namespace predicate used for filtering implicit subscriptions using 
            <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>.
            </summary>
            <remarks>All implementations must be serializable.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamNamespacePredicate.IsMatch(System.String)">
            <summary>
            Defines if the consumer grain should subscribe to the specified namespace.
            </summary>
            <param name="streamNamespace">The target stream namespace to check.</param>
            <returns><c>true</c>, if the grain should subscribe to the specified namespace; <c>false</c>, otherwise.
            </returns>
        </member>
        <member name="P:Orleans.Streams.IStreamNamespacePredicate.PredicatePattern">
            <summary>
            Gets a pattern to describe this predicate. This value is passed to instances of <see cref="T:Orleans.Streams.IStreamNamespacePredicateProvider"/> to recreate this predicate.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamNamespacePredicateProvider">
            <summary>
            Converts predicate pattern strings to <see cref="T:Orleans.Streams.IStreamNamespacePredicate"/> instances.
            </summary>
            <seealso cref="P:Orleans.Streams.IStreamNamespacePredicate.PredicatePattern"/>
        </member>
        <member name="M:Orleans.Streams.IStreamNamespacePredicateProvider.TryGetPredicate(System.String,Orleans.Streams.IStreamNamespacePredicate@)">
            <summary>
            Get the predicate matching the provided pattern. Returns <see langword="false"/> if this provider cannot match the predicate.
            </summary>
        </member>
        <member name="T:Orleans.Streams.RegexStreamNamespacePredicate">
            <summary>
            <see cref="T:Orleans.Streams.IStreamNamespacePredicate"/> implementation allowing to filter stream namespaces by regular
            expression.
            </summary>
        </member>
        <member name="P:Orleans.Streams.RegexStreamNamespacePredicate.PredicatePattern">
            <summary>
            Returns a pattern used to describe this instance. The pattern will be parsed by an <see cref="T:Orleans.Streams.IStreamNamespacePredicateProvider"/> instance on each node.
            </summary>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Orleans.Streams.RegexStreamNamespacePredicate"/> with the specified regular expression.
            </summary>
            <param name="regex">The stream namespace regular expression.</param>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streams.IStreamProvider">
            <summary>
            Functionality for providing streams to consumers and producers.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.Name">
            <summary>
            Gets the name of the stream provider.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Orleans.Streams.IStreamProvider.GetStream``1(Orleans.Runtime.StreamId)">
            <summary>
            Gets the stream with the specified identity.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamId">The stream identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.IsRewindable">
            <summary>
            Gets a value indicating whether this is a rewindable provider - supports creating rewindable streams 
            (streams that allow subscribing from previous point in time).
            </summary>
            <returns><see langword="true"/> if this is a rewindable provider, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Streams.StreamProviderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Streams.IStreamProvider"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.Guid)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.String,System.Guid)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="ns">The namespace.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.String)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.String,System.String)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="ns">The namespace.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.Int64)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Orleans.Streams.StreamProviderExtensions.GetStream``1(Orleans.Streams.IStreamProvider,System.String,System.Int64)">
            <summary>
            Gets the stream with the specified identity and namespace.
            </summary>
            <typeparam name="T">The stream element type.</typeparam>
            <param name="streamProvider">The stream provider.</param>
            <param name="ns">The namespace.</param>
            <param name="id">The identifier.</param>
            <returns>The stream.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.ExecutingEntityIdentity">
            <summary>
            Retrieves the opaque identity of currently executing grain or client object. 
            </summary>
            <remarks>Exposed for logging purposes.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetStreamDirectory">
            <summary>
            Returns the stream directory.
            </summary>
            <returns>The stream directory.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.PubSub(Orleans.Streams.StreamPubSubType)">
            <summary>
            A Pub Sub runtime interface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.ISiloSideStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.ISiloSideStreamProviderRuntime.InitializePullingAgents(System.String,Orleans.Streams.IQueueAdapterFactory,Orleans.Streams.IQueueAdapter)">
            <summary>Start the pulling agents for a given persistent stream provider.</summary>
        </member>
        <member name="T:Orleans.Streams.StreamPubSubType">
            <summary>
            Identifies the publish/subscribe system types which stream providers can use.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamPubSubType.ExplicitGrainBasedAndImplicit">
            <summary>
            Explicit and implicit pub/sub.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamPubSubType.ExplicitGrainBasedOnly">
            <summary>
            Explicit pub/sub.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamPubSubType.ImplicitOnly">
            <summary>
            Implicit pub/sub.
            </summary>
        </member>
        <member name="T:Orleans.Streams.ProviderStartException">
            <summary>
            Exception thrown whenever a provider has failed to be started.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ProviderStartException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.ProviderStartException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ProviderStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.ProviderStartException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.ProviderStartException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.ProviderStartException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Streams.ProviderStartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.ProviderStartException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Streams.StreamProviderDirection">
            <summary>
            Identifies whether a stream provider is read-only, read-write, or write-only.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamProviderDirection.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamProviderDirection.ReadOnly">
            <summary>
            This provider can receive messages but cannot send them.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamProviderDirection.WriteOnly">
            <summary>
            This provider can send messages but cannot receive them.
            </summary>
        </member>
        <member name="F:Orleans.Streams.StreamProviderDirection.ReadWrite">
            <summary>
            This provider can both send and receive messages.
            </summary>
        </member>
        <member name="T:Orleans.Streams.DefaultStreamNamespacePredicateProvider">
            <summary>
            Default implementation of <see cref="T:Orleans.Streams.IStreamNamespacePredicateProvider"/> for internally supported stream predicates.
            </summary>
        </member>
        <member name="M:Orleans.Streams.DefaultStreamNamespacePredicateProvider.TryGetPredicate(System.String,Orleans.Streams.IStreamNamespacePredicate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.ConstructorStreamNamespacePredicateProvider">
            <summary>
            Stream namespace predicate provider which supports objects which can be constructed and optionally accept a string as a constructor argument.
            </summary>
        </member>
        <member name="F:Orleans.Streams.ConstructorStreamNamespacePredicateProvider.Prefix">
            <summary>
            The prefix used to identify this predicate provider.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ConstructorStreamNamespacePredicateProvider.FormatPattern(System.Type,System.String)">
            <summary>
            Formats a stream namespace predicate which indicates a concrete <see cref="T:Orleans.Streams.IStreamNamespacePredicate"/> type to be constructed, along with an optional argument.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ConstructorStreamNamespacePredicateProvider.TryGetPredicate(System.String,Orleans.Streams.IStreamNamespacePredicate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.FaultedSubscriptionException">
            <summary>
            This exception indicates that an error has occurred on a stream subscription that has placed the subscription into
             a faulted state.  Work on faulted subscriptions should be abandoned.
            </summary>
        </member>
        <member name="M:Orleans.Streams.FaultedSubscriptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.FaultedSubscriptionException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.FaultedSubscriptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.FaultedSubscriptionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.FaultedSubscriptionException.#ctor(Orleans.Runtime.GuidId,Orleans.Runtime.QualifiedStreamId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.FaultedSubscriptionException"/> class.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="streamId">The stream identifier.</param>
        </member>
        <member name="M:Orleans.Streams.FaultedSubscriptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.FaultedSubscriptionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Streams.FaultedSubscriptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.FaultedSubscriptionException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetImplicitSubscribers(Orleans.Runtime.QualifiedStreamId,Orleans.IInternalGrainFactory)">
            <summary>
            Retrieve a map of implicit subscriptionsIds to implicit subscribers, given a stream ID. This method throws an exception if there's no namespace associated with the stream ID.
            </summary>
            <param name="streamId">A stream ID.</param>
            <param name="grainFactory">The grain factory used to get consumer references.</param>
            <returns>A set of GrainId that are implicitly subscribed grains. They are expected to support the streaming consumer extension.</returns>
            <exception cref="T:System.ArgumentException">The stream ID doesn't have an associated namespace.</exception>
            <exception cref="T:System.InvalidOperationException">Internal invariant violation.</exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.IsImplicitSubscriber(Orleans.Runtime.GrainId,Orleans.Runtime.QualifiedStreamId)">
            <summary>
            Determines whether the specified grain is an implicit subscriber of a given stream.
            </summary>
            <param name="grainId">The grain identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>true if the grain id describes an implicit subscriber of the stream described by the stream id.</returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.TryGetImplicitSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Runtime.QualifiedStreamId,System.Guid@)">
            <summary>
            Try to get the implicit subscriptionId.
            If an implicit subscription exists, return a subscription Id that is unique per grain type, grainId, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(Orleans.Runtime.GrainType,Orleans.Runtime.QualifiedStreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.FindImplicitSubscribers(System.String,System.Collections.Generic.List{Orleans.Streams.ImplicitStreamSubscriberTable.StreamSubscriberPredicate})">
            <summary>
            Finds all implicit subscribers for the given stream namespace.
            </summary>
        </member>
        <member name="M:Orleans.Streams.PubSubRendezvousGrain.TryClearState">
            <summary>
            Try clear state will only clear the state if there are no producers or consumers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,Orleans.Runtime.GrainId)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">The grain interface type.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="grainId">The grain to subscribe.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,System.Guid,System.String)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">An interface which the grain is the primary implementation of.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="primaryKey">The grain's primary key.</param>
            <param name="grainClassNamePrefix">The grain class name prefix.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,System.Int64,System.String)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">An interface which the grain is the primary implementation of.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="primaryKey">The grain's primary key.</param>
            <param name="grainClassNamePrefix">The grain class name prefix.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,System.String,System.String)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">An interface which the grain is the primary implementation of.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="primaryKey">The grain's primary key.</param>
            <param name="grainClassNamePrefix">The grain class name prefix.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,System.Guid,System.String,System.String)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">An interface which the grain is the primary implementation of.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="primaryKey">The grain's primary key.</param>
            <param name="keyExtension">The grain's key extension.</param>
            <param name="grainClassNamePrefix">The grain class name prefix.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.AddSubscription``1(Orleans.Streams.Core.IStreamSubscriptionManager,Orleans.IGrainFactory,Orleans.Runtime.StreamId,System.String,System.Int64,System.String,System.String)">
            <summary>
            Subscribes the specified grain to the specified stream.
            </summary>
            <typeparam name="TGrainInterface">An interface which the grain is the primary implementation of.</typeparam>
            <param name="manager">The manager.</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="streamProviderName">Name of the stream provider.</param>
            <param name="primaryKey">The grain's primary key.</param>
            <param name="keyExtension">The grain's key extension.</param>
            <param name="grainClassNamePrefix">The grain class name prefix.</param>
            <returns>The newly added subscription.</returns>
        </member>
        <member name="M:Orleans.Streams.PubSub.StreamSubscriptionManagerExtensions.TryGetStreamSubscriptionManager(Orleans.Streams.IStreamProvider,Orleans.Streams.Core.IStreamSubscriptionManager@)">
            <summary>
            Returns the <see cref="T:Orleans.Streams.Core.IStreamSubscriptionManager"/> for the provided stream provider.
            </summary>
            <param name="streamProvider">The stream provider.</param>
            <param name="manager">The manager.</param>
            <returns><see langword="true" /> if the stream subscription manager could be retrieved, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Orleans.Streams.SubscriptionMarker">
            <summary>
            Mark a subscriptionId as either an implicit subscription Id, or an explicit subscription Id.
            high bit of last byte in guild is the subscription type flag.
            1: implicit subscription
            0: explicit subscription
            </summary>
        </member>
        <member name="T:Orleans.Streams.AggregatedQueueFlowController">
            <summary>
            A <see cref="T:Orleans.Streams.IQueueFlowController"/> which aggregates multiple other <see cref="T:Orleans.Streams.IQueueFlowController"/> values.
            </summary>
        </member>
        <member name="M:Orleans.Streams.AggregatedQueueFlowController.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.AggregatedQueueFlowController"/> class.
            </summary>
            <param name="defaultMaxAddCount">The default maximum add count, see <see cref="M:Orleans.Streams.IQueueFlowController.GetMaxAddCount"/>.</param>
        </member>
        <member name="M:Orleans.Streams.AggregatedQueueFlowController.GetMaxAddCount">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.BatchContainerBatch">
            <summary>
            A batch of batch containers, that if configured (see StreamPullingAgentOptions), will be the data pulled by the
            PersistenStreamPullingAgent from it's underlying cache
            </summary>
        </member>
        <member name="P:Orleans.Streams.BatchContainerBatch.StreamId">
            <summary>
            Gets the stream identifier for the stream this batch is part of.
            Derived from the first batch container in the batch.
            </summary>
        </member>
        <member name="P:Orleans.Streams.BatchContainerBatch.SequenceToken">
            <summary>
            Gets the stream Sequence Token for the start of this batch.
            Derived from the first batch container in the batch.
            </summary>
        </member>
        <member name="P:Orleans.Streams.BatchContainerBatch.BatchContainers">
            <summary>
            Gets the batch containers comprising this batch
            </summary>
        </member>
        <member name="M:Orleans.Streams.BatchContainerBatch.GetEvents``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.BatchContainerBatch.ImportRequestContext">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.DataNotAvailableException">
            <summary>
            Exception indicates that the requested data is not available.
            </summary>
        </member>
        <member name="M:Orleans.Streams.DataNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.DataNotAvailableException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.DataNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.DataNotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.DataNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.DataNotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Orleans.Streams.DataNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.DataNotAvailableException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Streams.CacheFullException">
            <summary>
            Indicates that the queue message cache is full.
            </summary>
        </member>
        <member name="M:Orleans.Streams.CacheFullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.CacheFullException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.CacheFullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.CacheFullException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.CacheFullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.CacheFullException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Orleans.Streams.CacheFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.CacheFullException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Streams.HashRingBasedStreamQueueMapper">
            <summary>
            A <see cref="T:Orleans.Streams.IConsistentRingStreamQueueMapper"/> and hence <see cref="T:Orleans.Streams.IStreamQueueMapper"/> which balances queues by mapping them onto a hash ring consisting of silos.
            </summary>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedStreamQueueMapper.#ctor(Orleans.Configuration.HashRingStreamQueueMapperOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.HashRingBasedStreamQueueMapper"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="queueNamePrefix">The queue name prefix.</param>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedStreamQueueMapper.GetQueuesForRange(Orleans.Runtime.IRingRange)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedStreamQueueMapper.GetAllQueues">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedStreamQueueMapper.GetQueueForStream(Orleans.Runtime.StreamId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedStreamQueueMapper.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.HashRingBasedPartitionedStreamQueueMapper">
            <summary>
            Queue mapper that tracks which partition was mapped to which QueueId
            </summary>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedPartitionedStreamQueueMapper.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Queue mapper that tracks which partition was mapped to which QueueId
            </summary>
            <param name="partitionIds">List of partitions</param>
            <param name="queueNamePrefix">Prefix for QueueIds.  Must be unique per stream provider</param>
        </member>
        <member name="M:Orleans.Streams.HashRingBasedPartitionedStreamQueueMapper.QueueToPartition(Orleans.Streams.QueueId)">
            <summary>
            Gets the partition by QueueId
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IBatchContainer">
            <summary>
            Each queue message is allowed to be a heterogeneous, ordered set of events.
            <see cref="T:Orleans.Streams.IBatchContainer"/> contains these events and allows users to query the batch for a specific type of event.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamId">
            <summary>
            Ges the stream identifier for the stream this batch is part of.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.GetEvents``1">
            <summary>
            Gets events of a specific type from the batch.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.SequenceToken">
            <summary>
            Ges the stream sequence token for the start of this batch.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ImportRequestContext">
            <summary>
            Gives an opportunity to <see cref="T:Orleans.Streams.IBatchContainer"/> to set any data in the <see cref="T:Orleans.Runtime.RequestContext"/> before this <see cref="T:Orleans.Streams.IBatchContainer"/> is sent to consumers.
            It can be the data that was set at the time event was generated and enqueued into the persistent provider or any other data.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Orleans.Runtime.RequestContext"/> was indeed modified, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Streams.IBatchContainerBatch">
            <summary>
            A batch of queue messages (see IBatchContainer for description of batch contents)
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainerBatch.BatchContainers">
            <summary>
            Gets the batch containers comprising this batch
            </summary>
        </member>
        <member name="T:Orleans.Streams.IConsistentRingStreamQueueMapper">
            <summary>
            The stream queue mapper is responsible for mapping ring ranges from the load balancing ring provider to stream queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IConsistentRingStreamQueueMapper.GetQueuesForRange(Orleans.Runtime.IRingRange)">
            <summary>
            Gets the queues which map to the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns>The queues which map to the specified range.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapter">
            <summary>
            Stream queue storage adapter.  This is an abstraction layer that hides the implementation details of the underlying queuing system.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Name">
            <summary>
            Gets the name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.QueueMessageBatchAsync``1(Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T">The queue element type.</typeparam>
            <param name="streamId">The stream identifier.</param>
            <param name="events">The events.</param>
            <param name="token">The token.</param>
            <param name="requestContext">The request context.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a queue receiver for the specified queueId
            </summary>
            <param name="queueId">The queue identifier.</param>
            <returns>The receiver.</returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.IsRewindable">
            <summary>
            Gets a value indicating whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Direction">
            <summary>
            Gets the direction of this queue adapter: <see cref="F:Orleans.Streams.StreamProviderDirection.ReadOnly"/>, <see cref="F:Orleans.Streams.StreamProviderDirection.WriteOnly"/>, or <see cref="F:Orleans.Streams.StreamProviderDirection.ReadWrite"/>.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="T:Orleans.Streams.QueueAdapterExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Streams.IQueueAdapter"/>
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueAdapterExtensions.QueueMessageAsync``1(Orleans.Streams.IQueueAdapter,Orleans.Runtime.StreamId,``0,Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided <paramref name="streamId"/>.
            </summary>
            <typeparam name="T">The queue element type.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="evt">The event.</param>
            <param name="token">The token.</param>
            <param name="requestContext">The request context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterCache">
            <summary>
            Functionality for creating an <see cref="T:Orleans.Streams.IQueueCache"/> for a given queue.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId">The queue id.</param>
            <returns>The queue cache..</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterFactory">
            <summary>
            Adapter factory. This should create an adapter from the stream provider configuration
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.CreateAdapter">
            <summary>
            Creates a queue adapter.
            </summary>
            <returns>The queue adapter</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetQueueAdapterCache">
            <summary>
            Creates queue message cache adapter.
            </summary>
            <returns>The queue adapter cache.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetStreamQueueMapper">
            <summary>
            Creates a queue mapper.
            </summary>
            <returns>The queue mapper.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Acquire delivery failure handler for a queue
            </summary>
            <param name="queueId">The queue identifier.</param>
            <returns>The stream failure handler.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterReceiver">
            <summary>
            Receives batches of messages from a single partition of a message queue.  
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Initialize(System.TimeSpan)">
            <summary>
            Initializes this receiver.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.GetQueueMessagesAsync(System.Int32)">
            <summary>
            Retrieves batches from a message queue.
            </summary>
            <param name="maxCount">
            The maximum number of message batches to retrieve.
            </param>
            <returns>The message batches.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.MessagesDeliveredAsync(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Notifies the adapter receiver that the messages were delivered to all consumers,
            so the receiver can take an appropriate action (e.g., delete the messages from a message queue).
            </summary>
            <param name="messages">
            The message batches.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Shutdown(System.TimeSpan)">
            <summary>
            Receiver is no longer used. Shutdown and clean up.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Adds messages to the cache.
            </summary>
            <param name="messages">The message batches.</param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Requests that the cache purge any items that can be purged.
            </summary>
            <param name="purgedItems">The purged items.</param>
            <returns><see langword="true" /> if items were successfully purged from the cache., <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.GetCacheCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retrieve messages from the
            cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <param name="token">The token.</param>
            <returns>The queue cache cursor.</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.IsUnderPressure">
            <summary>
            Returns <see langword="true" /> if this cache is under pressure, <see langword="false" /> otherwise.
            </summary>
            <returns><see langword="true" /> if this cache is under pressure; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Orleans.Streams.IQueueCacheCursor">
            <summary>
            Enumerates the messages in a stream.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.GetCurrent(System.Exception@)">
            <summary>
            Get the current value.
            </summary>
            <param name="exception">The resulting exception.</param>
            <returns>
            Returns the current batch container.
            If null then the stream has completed or there was a stream error.  
            If there was a stream error, an error exception will be provided in the output.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.MoveNext">
            <summary>
            Move to next message in the stream.
            If it returns false, there are no more messages.  The enumerator is still
             valid however and can be called again when more data has come in on this
             stream.
            </summary>
            <returns><see langword="true"/> if there are more items, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.Refresh(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Refreshes the cache cursor. Called when new data is added into a cache.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.RecordDeliveryFailure">
            <summary>
            Records that delivery of the current event has failed
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueFlowController">
            <summary>
            Functionality for controlling the flow of retrieved queue items.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueFlowController.GetMaxAddCount">
            <summary>
            Gets the maximum number of items that can be added.
            </summary>
            <returns>
            The maximum number of items that can be added.
            </returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueMapper">
            <summary>
            The stream queue mapper returns a list of all queues and is also responsible for mapping streams to queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueMapper.GetAllQueues">
            <summary>
            Gets all queues.
            </summary>
            <returns>All queues.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueMapper.GetQueueForStream(Orleans.Runtime.StreamId)">
            <summary>
            Gets the queue for the specified stream.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <returns>The queue responsible for the specified stream.</returns>
        </member>
        <member name="T:Orleans.Streams.QueueAdapterConstants">
            <summary>
            Constants for queue adapters.
            </summary>
        </member>
        <member name="F:Orleans.Streams.QueueAdapterConstants.UNLIMITED_GET_QUEUE_MSG">
            <summary>
            The value used to indicate an unlimited number of messages can be retrieved, when returned by <see cref="M:Orleans.Streams.IQueueFlowController.GetMaxAddCount"/>.
            </summary>
        </member>
        <member name="T:Orleans.Streams.QueueCacheMissException">
            <summary>
            Exception indicates that the requested message is not in the queue cache.
            </summary>
        </member>
        <member name="P:Orleans.Streams.QueueCacheMissException.Requested">
            <summary>
            Gets the requested sequence token.
            </summary>
            <value>The requested sequence token.</value>
        </member>
        <member name="P:Orleans.Streams.QueueCacheMissException.Low">
            <summary>
            Gets the earliest available sequence token.
            </summary>
        </member>
        <member name="P:Orleans.Streams.QueueCacheMissException.High">
            <summary>
            Gets the latest available sequence token.
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor(Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
            <param name="requested">The requested sequence token.</param>
            <param name="low">The earliest available sequence token.</param>
            <param name="high">The latest available sequence token.</param>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
            <param name="requested">The requested sequence token.</param>
            <param name="low">The earliest available sequence token.</param>
            <param name="high">The latest available sequence token.</param>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueCacheMissException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Orleans.Streams.QueueCacheMissException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.BestFitBalancer`2">
            <summary>
            Best fit balancer keeps each active bucket responsible for its ideal set of resources, and redistributes
            resources from inactive buckets evenly over active buckets.  If there are large numbers of inactive buckets,
            this can lead to quite a bit of shuffling of resources from inactive buckets as buckets come back online.
            Requirements:
            - Even distribution of resources across buckets
            - Must be consistent results for same inputs regardless of input order.
            - Minimize movement of resources when rebalancing from changes in active buckets.
            - Must be deterministic independent of previous distribution state.
            Algorithm:
            - On creation generate an ideal distribution of resources across all buckets, that is, each bucket has no more than 1 resource more
               than any other bucket.
            - When requesting new resource distribution for a list of active buckets:
                1) Initialize the new distribution of each active bucket with the ideal resources for that bucket.  This prevents
                   these resources from ever being assigned to another bucket unless a bucket becomes inactive.
                2) Build a list of inactive buckets.
                3) For each inactive bucket, add its ideal resource allocation to the list of resources to be reallocated.
                4) Order the active buckets by the number of resources allocated to each and begin assigning them more resources
                   from the list of resources to be reallocated.
                    i) Continue iterating over the active buckets assigning resources until there are no more resources that need
                       reallocated.
            </summary>
            <typeparam name="TBucket">Type of bucket upon which resources will be distributed among</typeparam>
            <typeparam name="TResource">Type of resources being distributed</typeparam>
        </member>
        <member name="M:Orleans.Streams.BestFitBalancer`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Constructor.
            Initializes an ideal distribution to be used to aid in resource to bucket affinity.
            </summary>
            <param name="buckets">Buckets among which to distribute resources.</param>
            <param name="resources">Resources to be distributed.</param>
        </member>
        <member name="M:Orleans.Streams.BestFitBalancer`2.GetDistribution(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets a distribution for the active buckets.
            Any active buckets keep their ideal distribution.  Resources from inactive buckets are redistributed evenly
            among the active buckets, starting with those with the fewest allocated resources.
            </summary>
            <param name="activeBuckets">currently active buckets</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.BestFitBalancer`2.BuildIdealDistribution(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Distribute resources evenly among buckets in a deterministic way.
            - Must distribute resources evenly regardless off order of inputs.
            </summary>
            <param name="buckets">Buckets among which to distribute resources.</param>
            <param name="resources">Resources to be distributed.</param>
            <returns>Dictionary of resources evenly distributed among the buckets</returns>
        </member>
        <member name="T:Orleans.Streams.DeploymentBasedQueueBalancer">
            <summary>
            DeploymentBasedQueueBalancer is a stream queue balancer that uses deployment information to
            help balance queue distribution.
            DeploymentBasedQueueBalancer uses the deployment configuration to determine how many silos
            to expect and uses a silo status oracle to determine which of the silos are available.  With
            this information it tries to balance the queues using a best fit resource balancing algorithm.
            </summary>
        </member>
        <member name="M:Orleans.Streams.DeploymentBasedQueueBalancer.GetBalancer">
            <summary>
            Checks to see if deployment configuration has changed, by adding or removing silos.
            If so, it updates the list of all silo names and creates a new resource balancer.
            This should occur rarely.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IResourceSelector`1">
            <summary>
            IResourceSelector selects a certain amount of resources from a resource list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Orleans.Streams.IResourceSelector`1.Count">
            <summary>
            Number of resources
            </summary>
        </member>
        <member name="M:Orleans.Streams.IResourceSelector`1.NextSelection(System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            Try to select certain count of resources from resource list, which doesn't overlap with existing selection
            </summary>
            <param name="newSelectionCount"></param>
            <param name="existingSelection"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.LeaseBasedQueueBalancer">
            <summary>
            LeaseBasedQueueBalancer. This balancer supports queue balancing in cluster auto-scale scenarios,
            unexpected server failure scenarios, and tries to support ideal distribution as much as possible. 
            </summary>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.#ctor(System.String,Orleans.Configuration.LeaseBasedQueueBalancerOptions,Orleans.LeaseProviders.ILeaseProvider,Orleans.Timers.ITimerRegistry,System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.LeaseBasedQueueBalancer"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="options">The options.</param>
            <param name="leaseProvider">The lease provider.</param>
            <param name="timerRegistry">The timer registry.</param>
            <param name="services">The services.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Streams.LeaseBasedQueueBalancer"/> instance.
            </summary>
            <param name="services">The services.</param>
            <param name="name">The name.</param>
            <returns>The new <see cref="T:Orleans.Streams.LeaseBasedQueueBalancer"/> instance.</returns>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.Initialize(Orleans.Streams.IStreamQueueMapper)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.GetMyQueues">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.RenewLeases">
            <summary>
            Renew leases
            </summary>
            <returns>bool - false if we failed to renew all leases</returns>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.OnClusterMembershipChange(System.Collections.Generic.HashSet{Orleans.Runtime.SiloAddress})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.LeaseBasedQueueBalancer.AmGreedy(System.Int32,System.Collections.Generic.HashSet{Orleans.Runtime.SiloAddress})">
            <summary>
            Checks to see if this balancer should be greedy, which means it attempts to grab one
              more queue than the non-greedy balancers.
            </summary>
            <param name="overflow">number of free queues, assuming all balancers meet their minimum responsibilities</param>
            <param name="activeSilos">number of active silos hosting queues</param>
            <returns>bool - true indicates that the balancer should try to acquire one
              more queue than the non-greedy balancers</returns>
        </member>
        <member name="T:Orleans.Streams.QueueBalancerBase">
            <summary>
            Base class for StreamQueueBalancer
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueBalancerBase.#ctor(Orleans.Runtime.IClusterMembershipService,Orleans.Runtime.ILocalSiloDetails,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            This should be primary constructor once IAsyncEnumerable is released
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueBalancerBase.GetMyQueues">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueBalancerBase.Initialize(Orleans.Streams.IStreamQueueMapper)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueBalancerBase.SubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueBalancerBase.UnSubscribeFromQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Streams.RoundRobinSelector`1">
            <summary>
            Selector using round robin algorithm
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Streams.RoundRobinSelector`1.NextSelection(System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            Try to select certain count of resources from resource list, which doesn't overlap with existing resources
            </summary>
            <param name="newSelectionCount"></param>
            <param name="existingSelection"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.QueueId">
            <summary>
            Identifier of a durable queue.
            Used by Orleans streaming extensions.
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueId.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.QueueId"/> class.
            </summary>
            <param name="queuePrefix">The queue prefix.</param>
            <param name="id">The identifier.</param>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:Orleans.Streams.QueueId.GetQueueId(System.String,System.UInt32,System.UInt32)">
            <summary>
            Gets the queue identifier.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="queueId">The queue identifier.</param>
            <param name="hash">The hash.</param>
            <returns>The queue identifier.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueId.GetStringNamePrefix">
            <summary>
            Gets the queue name prefix.
            </summary>
            <returns>The queue name prefix.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueId.GetNumericId">
            <summary>
            Gets the numeric identifier.
            </summary>
            <returns>The numeric identifier.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueId.GetUniformHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Streams.QueueId.IsDefault">
            <summary>
            Gets a value indicating whether the instance is the default instance.
            </summary>
        </member>
        <member name="M:Orleans.Streams.QueueId.CompareTo(Orleans.Streams.QueueId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueId.Equals(Orleans.Streams.QueueId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streams.QueueId.ToStringWithHashCode">
            <summary>
            Returns a string representation of this instance which includes its uniform hash code.
            </summary>
            <returns>A string representation of this instance which includes its uniform hash code.</returns>
        </member>
        <member name="T:Orleans.Streams.StreamConsumerGrainContextAction">
            <summary>
            Installs an <see cref="T:Orleans.Streams.IStreamConsumerExtension"/> extension on a <see cref="T:Orleans.Runtime.IGrainContext"/> for grains which implement <see cref="T:Orleans.Streams.Core.IStreamSubscriptionObserver"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamConsumerGrainContextAction.#ctor(Orleans.Streams.IStreamProviderRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streams.StreamConsumerGrainContextAction"/> class.
            </summary>
            <param name="streamProviderRuntime">The stream provider runtime.</param>
        </member>
        <member name="M:Orleans.Streams.StreamConsumerGrainContextAction.Configure(Orleans.Runtime.IGrainContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.GrainStreamingExtensions">
            <summary>
            Extension methods for accessing stream providers from a <see cref="T:Orleans.Grain"/> or <see cref="T:Orleans.IGrainBase"/> implementation.
            </summary>
        </member>
        <member name="M:Orleans.GrainStreamingExtensions.GetStreamProvider(Orleans.Grain,System.String)">
            <summary>
            Gets the stream provider with the specified <paramref name="name"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="name">The provider name.</param>
            <returns>The stream provider.</returns>
        </member>
        <member name="M:Orleans.GrainStreamingExtensions.GetStreamProvider(Orleans.IGrainBase,System.String)">
            <summary>
            Gets the stream provider with the specified <paramref name="name"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="name">The provider name.</param>
            <returns>The stream provider.</returns>
        </member>
        <member name="T:Orleans.ClientStreamingExtensions">
            <summary>
            Extension methods for accessing stream providers from a client.
            </summary>
        </member>
        <member name="M:Orleans.ClientStreamingExtensions.GetStreamProvider(Orleans.IClusterClient,System.String)">
            <summary>
            Gets the stream provider with the specified <paramref name="name"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="name">The provider name.</param>
            <returns>The stream provider.</returns>
        </member>
        <member name="M:Orleans.Runtime.Providers.SiloStreamProviderRuntime.ExecutingEntityIdentity">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Providers.SiloStreamProviderRuntime.GetStreamDirectory">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.StreamId">
            <summary>
            Identifies a Stream within a provider
            </summary>
        </member>
        <member name="P:Orleans.Runtime.StreamId.FullKey">
            <summary>
            Gets the full key.
            </summary>
            <value>The full key.</value>
        </member>
        <member name="P:Orleans.Runtime.StreamId.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Orleans.Runtime.StreamId.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Create(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StreamId"/> struct.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Create(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StreamId"/> struct.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Create(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StreamId"/> struct.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Create(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StreamId"/> struct.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Create(Orleans.Streams.IStreamIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StreamId"/> struct.
            </summary>
            <param name="streamIdentity">The stream identity.</param>
        </member>
        <member name="M:Orleans.Runtime.StreamId.CompareTo(Orleans.Runtime.StreamId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Equals(Orleans.Runtime.StreamId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.op_Equality(Orleans.Runtime.StreamId,Orleans.Runtime.StreamId)">
            <summary>
            Compares two <see cref="T:Orleans.Runtime.StreamId"/> instances for equality.
            </summary>
            <param name="s1">The first stream identity.</param>
            <param name="s2">The second stream identity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Orleans.Runtime.StreamId.op_Inequality(Orleans.Runtime.StreamId,Orleans.Runtime.StreamId)">
            <summary>
            Compares two <see cref="T:Orleans.Runtime.StreamId"/> instances for equality.
            </summary>
            <param name="s1">The first stream identity.</param>
            <param name="s2">The second stream identity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Orleans.Runtime.StreamId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a <see cref="T:Orleans.Runtime.StreamId"/> instance from a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The UTF-8 encoded value.</param>
            <returns>The parsed stream identity.</returns>
        </member>
        <member name="M:Orleans.Runtime.StreamId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StreamId.GetKeyAsString">
            <summary>
            Returns the <see cref="P:Orleans.Runtime.StreamId.Key"/> component of this instance as a string.
            </summary>
            <returns>The key component of this instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.StreamId.GetNamespace">
            <summary>
            Returns the <see cref="P:Orleans.Runtime.StreamId.Namespace"/> component of this instance as a string.
            </summary>
            <returns>The namespace component of this instance.</returns>
        </member>
        <member name="T:Orleans.ImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.ImplicitStreamSubscription] attribute is used to mark grains as implicit stream subscriptions.
            </summary>
        </member>
        <member name="P:Orleans.ImplicitStreamSubscriptionAttribute.Predicate">
            <summary>
            Gets the stream namespace filter predicate.
            </summary>
        </member>
        <member name="P:Orleans.ImplicitStreamSubscriptionAttribute.StreamIdMapper">
            <summary>
            Gets the name of the stream identifier mapper.
            </summary>
            <value>The name of the stream identifier mapper.</value>
            <remarks>
            This value is the name used to resolve the <see cref="T:Orleans.Streams.IStreamIdMapper"/> registered in the dependency injection container.
            </remarks>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor">
            <summary>
            Used to subscribe to all stream namespaces.
            </summary>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Used to subscribe to the specified stream namespace.
            </summary>
            <param name="streamNamespace">The stream namespace to subscribe.</param>
            <param name="streamIdMapper">The name of the stream identity mapper.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Allows to pass an arbitrary predicate type to filter stream namespaces to subscribe. The predicate type 
            must have a constructor without parameters.
            </summary>
            <param name="predicateType">The stream namespace predicate type.</param>
            <param name="streamIdMapper">The name of the stream identity mapper.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(Orleans.Streams.IStreamNamespacePredicate,System.String)">
            <summary>
            Allows to pass an instance of the stream namespace predicate. To be used mainly as an extensibility point
            via inheriting attributes.
            </summary>
            <param name="predicate">The stream namespace predicate.</param>
            <param name="streamIdMapper">The name of the stream identity mapper.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.GetBindings(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.RegexImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.RegexImplicitStreamSubscription] attribute is used to mark grains as implicit stream
            subscriptions by filtering stream namespaces to subscribe using a regular expression.
            </summary>
        </member>
        <member name="M:Orleans.RegexImplicitStreamSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Allows to pass a regular expression to filter stream namespaces to subscribe to.
            </summary>
            <param name="pattern">The stream namespace regular expression filter.</param>
        </member>
    </members>
</doc>
