<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Core.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Orleans.GrainCancellationToken">
            <summary>
            An analogue to <see cref="P:Orleans.GrainCancellationToken.CancellationToken"/> which can be sent between grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationToken._cancellationTokenSource">
            <summary>
            The underlying cancellation token source.
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationToken._targetGrainReferences">
            <summary>
            References to remote grains to which this token was passed.
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationToken._cancellationTokenRuntime">
            <summary>
            The runtime used to manage grain cancellation tokens.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
            <param name="id">
            The token id.
            </param>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid,System.Boolean,Orleans.Runtime.IGrainCancellationTokenRuntime)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
            <param name="id">
            The token id.
            </param>
            <param name="canceled">
            Whether or not the instance is already canceled.
            </param>
            <param name="runtime">
            The runtime.
            </param>
        </member>
        <member name="P:Orleans.GrainCancellationToken.Id">
            <summary>
            Gets the unique id of the token
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.CancellationToken">
            <summary>
            Gets the underlying cancellation token.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.IsCancellationRequested">
            <summary>
            Gets a value indicating if cancellation is requested.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.Cancel">
            <summary>
            Cancels the cancellation token.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.GrainCancellationToken.AddGrainReference(Orleans.Runtime.IGrainCancellationTokenRuntime,Orleans.Runtime.GrainReference)">
            <summary>
            Subscribes the provided grain reference to cancellation notifications.
            </summary>
            <param name="runtime">The grain cancellation runtime.</param>
            <param name="grainReference">The grain reference to add.</param>
        </member>
        <member name="M:Orleans.GrainCancellationToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainCancellationTokenSource">
            <summary>
            An analogue to <see cref="T:System.Threading.CancellationTokenSource"/> which can be sent between grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationTokenSource._grainCancellationToken">
            <summary>
            The underlying grain cancellation token.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.#ctor">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.Token">
            <summary>
            Gets the <see cref="T:Orleans.GrainCancellationTokenSource">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
            <value>The <see cref="T:Orleans.GrainCancellationToken">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationToken"/>.</value>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.IsCancellationRequested">
            <summary>
            Gets a value indicating whether cancellation has been requested.
            </summary>
            <remarks>
            <para>
            This property indicates whether cancellation has been requested for this token source, such as due to a call to its <see cref="M:Orleans.GrainCancellationTokenSource.Cancel" /> method.
            </para>
            <para>
            If this property returns true, it only guarantees that cancellation has been requested. It does not guarantee that every handler registered with the corresponding token has finished executing, nor that
            cancellation requests have finished propagating to all registered handlers and remote targets. Additional synchronization may be required, particularly in situations where related objects are being canceled
            concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Cancel">
            <summary>
            Communicates a request for cancellation.
            </summary>
            <remarks>
            <para>
            The associated <see cref="T:Orleans.GrainCancellationToken" /> will be notified of the cancellation and will transition to a state where
            <see cref="P:Orleans.GrainCancellationToken.CancellationToken"><see cref="P:Orleans.GrainCancellationTokenSource.IsCancellationRequested"/></see> returns true. Any callbacks or cancelable operations registered with the
            <see cref="T:System.Threading.CancellationToken" /> will be executed.
            </para>
            <para>
            Cancelable operations and callbacks registered with the token should not <see langword="throw"/> exceptions. However, this overload of <see cref="M:Orleans.GrainCancellationTokenSource.Cancel"/> will aggregate any exceptions thrown into a
            <see cref="T:System.AggregateException" /> , such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>The <see cref="T:System.Threading.ExecutionContext" /> that was captured when each callback was registered will be reestablished when the callback is invoked.</para>
            </remarks>
            <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:Orleans.GrainCancellationToken" /> .</exception>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Orleans.GrainCancellationTokenSource" /> has been disposed.</exception>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Dispose">
            <summary>
            Releases the resources used by this <see cref="T:Orleans.Async.GrainCancellationTokenSource" />.
            </summary>
            <remarks>
            This method is not thread-safe for any other concurrent calls.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.ICancellationSourcesExtension">
            <summary>
            Extension used by the grain cancellation runtime to propagate cancellation notifications to grains.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICancellationSourcesExtension.CancelRemoteToken(System.Guid)">
            <summary>
            Indicates that a cancellation token has been canceled.
            </summary>
            <param name="tokenId">
            The token id.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainContext">
            <summary>
            Represents a grain from the perspective of the runtime.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.GrainReference">
            <summary>
            Gets a reference to this grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.GrainId">
            <summary>
            Gets the grain identity.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.GrainInstance">
            <summary>
            Gets the grain instance, or <see langword="null"/> if the grain instance has not been set yet.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.ActivationId">
            <summary>
            Gets the activation id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.Address">
            <summary>
            Gets the activation address.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.ActivationServices">
            <summary>
            Gets the <see cref="T:System.IServiceProvider" /> that provides access to the grain activation's service container.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.ObservableLifecycle">
            <summary>
            Gets the observable <see cref="T:Orleans.Grain"/> lifecycle, which can be used to add lifecycle hooks.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContext.Deactivated">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.Task"/> which completes when the grain has deactivated.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.SetComponent``1(``0)">
            <summary>
            Sets the provided value as the component for type <typeparamref name="TComponent"/>.
            </summary>
            <typeparam name="TComponent">The type used to lookup this component.</typeparam>
            <param name="value">The component instance.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.ReceiveMessage(System.Object)">
            <summary>
            Submits an incoming message to this instance.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.Activate(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Start activating this instance.
            </summary>
            <param name="requestContext">The request context of the request which is causing this instance to be activated, if any.</param>
            <param name="cancellationToken">A cancellation token which, when canceled, indicates that the process should complete promptly.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.Deactivate(Orleans.DeactivationReason,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Start deactivating this instance.
            </summary>
            <param name="deactivationReason">The reason for deactivation, for informational purposes.</param>
            <param name="cancellationToken">A cancellation token which, when canceled, indicates that the process should complete promptly.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.Rehydrate(Orleans.Runtime.IRehydrationContext)">
            <summary>
            Start rehydrating this instance from the provided rehydration context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainContext.Migrate(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Starts an attempt to migrating this instance to another location.
            Migration captures the current <see cref="T:Orleans.Runtime.RequestContext"/>, making it available to the activation's placement director so that it can consider it when selecting a new location.
            Migration will occur asynchronously, when no requests are executing, and will not occur if the activation's placement director does not select an alternative location.
            </summary>
            <param name="requestContext">The request context, which is provided to the placement director so that it can be examined when selecting a new location.</param>
            <param name="cancellationToken">A cancellation token which, when canceled, indicates that the process should complete promptly.</param>
        </member>
        <member name="T:Orleans.Runtime.GrainContextExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Runtime.IGrainContext"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainContextExtensions.DeactivateAsync(Orleans.Runtime.IGrainContext,Orleans.DeactivationReason,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deactivates the provided grain.
            </summary>
            <param name="grainContext">
            The grain context.
            </param>
            <param name="deactivationReason">
            The deactivation reason.
            </param>
            <param name="cancellationToken">A cancellation token which when canceled, indicates that the process should complete promptly.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which will complete once the grain has deactivated.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.ICollectibleGrainContext">
            <summary>
            Defines functionality required for grains which are subject to activation collection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.IsValid">
            <summary>
            Gets a value indicating whether the instance is available to process messages.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.IsExemptFromCollection">
            <summary>
            Gets a value indicating whether this instance is exempt from collection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.IsInactive">
            <summary>
            Gets a value indicating whether this instance is not currently processing a request.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.CollectionAgeLimit">
            <summary>
            Gets the collection age limit, which defines how long an instance must be inactive before it is eligible for collection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.KeepAliveUntil">
            <summary>
            Gets the keep alive override value, which is the earliest time after which this instance will be available for collection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICollectibleGrainContext.CollectionTicket">
            <summary>
            Gets or sets the collection ticket, which is a special value used for tracking this activation's lifetime.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICollectibleGrainContext.IsStale">
            <summary>
            Gets a value indicating whether this activation has been idle longer than its <see cref="P:Orleans.Runtime.ICollectibleGrainContext.CollectionAgeLimit"/>.
            </summary>
            <returns><see langword="true"/> if the activation is stale, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.ICollectibleGrainContext.GetIdleness">
            <summary>
            Gets the duration which this activation has been idle for.
            </summary>
            <returns>
            The duration which this activation has been idle for.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.ICollectibleGrainContext.DelayDeactivation(System.TimeSpan)">
            <summary>
            Delays activation collection until at least until the specified duration has elapsed.
            </summary>
            <param name="timeSpan">The period of time to delay activation collection for.</param>
        </member>
        <member name="T:Orleans.Runtime.IGrainTimerRegistry">
            <summary>
            Provides functionality to record the creation and deletion of grain timers.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainTimerRegistry.OnTimerCreated(Orleans.Runtime.IGrainTimer)">
            <summary>
            Signals to the registry that a timer was created.
            </summary>
            <param name="timer">
            The timer.
            </param>
        </member>
        <member name="M:Orleans.Runtime.IGrainTimerRegistry.OnTimerDisposed(Orleans.Runtime.IGrainTimer)">
            <summary>
            Signals to the registry that a timer was disposed.
            </summary>
            <param name="timer">
            The timer.
            </param>
        </member>
        <member name="T:Orleans.Runtime.IWorkItemScheduler">
            <summary>
            Functionality to schedule tasks on a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IWorkItemScheduler.QueueAction(System.Action)">
            <summary>
            Schedules an action for execution by this instance.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:Orleans.Runtime.IWorkItemScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Schedules a task to be started by this instance.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.Runtime.IWorkItemScheduler.QueueWorkItem(System.Threading.IThreadPoolWorkItem)">
            <summary>
            Schedules a work item for execution by this instance.
            </summary>
            <param name="workItem">The work item.</param>
        </member>
        <member name="T:Orleans.Runtime.IGrainContextAccessor">
            <summary>
            Provides access to the currently executing grain context.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainContextAccessor.GrainContext">
            <summary>
            Gets the currently executing grain context.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainExtensionBinder">
            <summary>
            Functionality for accessing or installing an extension on a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainExtensionBinder.GetExtension``1">
            <summary>
            Returns the grain extension registered for the provided <typeparamref name="TExtensionInterface"/>.
            </summary>
            <typeparam name="TExtensionInterface">
            The grain extension interface.
            </typeparam>
            <returns>
            The implementation of the extension which is bound to this grain.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IGrainExtensionBinder.GetOrSetExtension``2(System.Func{``0})">
            <summary>
            Binds an extension to an addressable object, if not already done.
            </summary>
            <typeparam name="TExtension">The type of the extension (e.g. StreamConsumerExtension).</typeparam>
            <typeparam name="TExtensionInterface">The public interface type of the implementation.</typeparam>
            <param name="newExtensionFunc">A factory function that constructs a new extension object.</param>
            <returns>A tuple, containing first the extension and second an addressable reference to the extension's interface.</returns>
        </member>
        <member name="T:Orleans.Runtime.ClientNotAvailableException">
            <summary>
            Indicates that a client is not longer reachable.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientNotAvailableException.#ctor(Orleans.Runtime.GrainId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClientNotAvailableException"/> class.
            </summary>
            <param name="clientId">
            The client id.
            </param>
        </member>
        <member name="M:Orleans.Runtime.ClientNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClientNotAvailableException"/> class.
            </summary>
            <param name="message">
            The exception message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.ClientNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClientNotAvailableException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.ClientNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClientNotAvailableException"/> class.
            </summary>
            <param name="info">
            The info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Orleans.Runtime.GatewayTooBusyException">
            <summary>
            Signifies that a gateway silo is currently in overloaded / load shedding state 
            and is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is usually a transient condition.
            The message is likely to be accepted by this or another gateway if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.GatewayTooBusyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GatewayTooBusyException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GatewayTooBusyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GatewayTooBusyException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GatewayTooBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GatewayTooBusyException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GatewayTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GatewayTooBusyException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Orleans.Runtime.GrainExtensionNotInstalledException">
            <summary>
            Signifies that an attempt was made to invoke a grain extension method on a grain where that extension was not installed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainExtensionNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainExtensionNotInstalledException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainExtensionNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainExtensionNotInstalledException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainExtensionNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainExtensionNotInstalledException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainExtensionNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainExtensionNotInstalledException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Orleans.Runtime.LimitExceededException">
            <summary>
            Signifies that a grain is in an overloaded state where some runtime limit setting is currently being exceeded, 
            and so that grain is unable to currently accept the message being sent.
            </summary>
            <remarks>
            This situation is often a transient condition.
            The message is likely to be accepted by this grain if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.LimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.LimitExceededException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.LimitExceededException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.LimitExceededException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.LimitExceededException.#ctor(System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.LimitExceededException"/> class.
            </summary>
            <param name="limitName">
            The limit name.
            </param>
            <param name="current">
            The current value.
            </param>
            <param name="threshold">
            The threshold value.
            </param>
            <param name="extraInfo">
            Extra, descriptive information.
            </param>
        </member>
        <member name="M:Orleans.Runtime.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.LimitExceededException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Orleans.Runtime.OrleansConfigurationException">
            <summary>
            Represents a configuration exception.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Orleans.Runtime.OrleansException">
            <summary>
            An exception class used by the Orleans runtime for reporting errors.
            </summary>
            <remarks>
            This is also the base class for any more specific exceptions 
            raised by the Orleans runtime.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.OrleansException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Orleans.Runtime.OrleansLifecycleCanceledException">
            <summary>
            Indicates a lifecycle was canceled, either by request or due to observer error.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansLifecycleCanceledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansLifecycleCanceledException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLifecycleCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansLifecycleCanceledException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLifecycleCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansLifecycleCanceledException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Orleans.Runtime.OrleansMessageRejectionException">
            <summary>
            Indicates that an Orleans message was rejected.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansMessageRejectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansMessageRejectionException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansMessageRejectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansMessageRejectionException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.OrleansMessageRejectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OrleansMessageRejectionException"/> class. 
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null"/> or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Orleans.Runtime.SiloUnavailableException">
            <summary>
            Signifies that an request was canceled due to target silo unavailability.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloUnavailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloUnavailableException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloUnavailableException"/> class.
            </summary>
            <param name="msg">
            The msg.
            </param>
        </member>
        <member name="M:Orleans.Runtime.SiloUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloUnavailableException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.SiloUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloUnavailableException"/> class.
            </summary>
            <param name="info">
            The info.
            </param>
            <param name="context">
            The context.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Orleans.Runtime.WrappedException">
            <summary>
            An exception class used by the Orleans runtime for reporting errors.
            </summary>
            <remarks>
            This is also the base class for any more specific exceptions 
            raised by the Orleans runtime.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.WrappedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.WrappedException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.WrappedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.WrappedException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:Orleans.Runtime.WrappedException.OriginalExceptionType">
            <summary>
            Gets or sets the type of the original exception.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.WrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.WrappedException.CreateAndRethrow(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Orleans.Runtime.WrappedException"/> class and rethrows it using the provided exception's stack trace.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Orleans.Runtime.WrappedException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.ActivationId">
            <summary>
            Uniquely identifies a grain activation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ActivationId"/> struct.
            </summary>
            <param name="key">The activation id.</param>
        </member>
        <member name="P:Orleans.Runtime.ActivationId.IsDefault">
            <summary>
            Gets a value indicating whether the instance is the default instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.NewId">
            <summary>
            Returns a new, random activation id.
            </summary>
            <returns>A new, random activation id.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.GetDeterministic(Orleans.Runtime.GrainId)">
            <summary>
            Returns an activation id which has been computed deterministically and reproducibly from the provided grain id.
            </summary>
            <param name="grain">The grain id.</param>
            <returns>An activation id which has been computed deterministically and reproducibly from the provided grain id.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ActivationId.Equals(Orleans.Runtime.ActivationId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ActivationId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ActivationId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ActivationId.ToParsableString">
            <summary>
            Returns a string representation of this activation id which can be parsed by <see cref="M:Orleans.Runtime.ActivationId.FromParsableString(System.String)"/>.
            </summary>
            <returns>A string representation of this activation id which can be parsed by <see cref="M:Orleans.Runtime.ActivationId.FromParsableString(System.String)"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.FromParsableString(System.String)">
            <summary>
            Parses a string representation of an activation id which was created using <see cref="M:Orleans.Runtime.ActivationId.ToParsableString"/>.
            </summary>
            <param name="activationId">The string representation of the activation id.</param>
            <returns>The activation id.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.op_Equality(Orleans.Runtime.ActivationId,Orleans.Runtime.ActivationId)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.op_Inequality(Orleans.Runtime.ActivationId,Orleans.Runtime.ActivationId)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.ActivationIdConverter">
            <summary>
            Functionality for converting <see cref="T:Orleans.Runtime.ActivationId"/> instances to and from their JSON representation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationIdConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ActivationIdConverter.Write(System.Text.Json.Utf8JsonWriter,Orleans.Runtime.ActivationId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ClientGrainId">
            <summary>
            Identifies a client.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.#ctor(Orleans.Runtime.GrainId)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.ClientGrainId"/> instance.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ClientGrainId.GrainId">
            <summary>
            Gets the underlying <see cref="F:Orleans.Runtime.ClientGrainId.GrainId"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.Create">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.ClientGrainId"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.ClientGrainId"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.Create(Orleans.Runtime.IdSpan)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.ClientGrainId"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.TryParse(Orleans.Runtime.GrainId,Orleans.Runtime.ClientGrainId@)">
            <summary>
            Converts the provided <see cref="F:Orleans.Runtime.ClientGrainId.GrainId"/> to a <see cref="T:Orleans.Runtime.ClientGrainId"/>. A return value indicates whether the operation succeeded.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.Equals(Orleans.Runtime.ClientGrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.CompareTo(Orleans.Runtime.ClientGrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.op_Equality(Orleans.Runtime.ClientGrainId,Orleans.Runtime.ClientGrainId)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.ClientGrainId.op_Inequality(Orleans.Runtime.ClientGrainId,Orleans.Runtime.ClientGrainId)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainAddress">
            <summary>
            Represents an entry in a <see cref="T:Orleans.GrainDirectory.IGrainDirectory"/>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddress.GrainId">
            <summary>
            Identifier of the Grain
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddress.ActivationId">
            <summary>
            Id of the specific Grain activation
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddress.SiloAddress">
            <summary>
            Address of the silo where the grain activation lives
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddress.MembershipVersion">
            <summary>
            MembershipVersion at the time of registration
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainAddress.Matches(Orleans.Runtime.GrainAddress)">
            <summary>
            Two grain addresses match if they have equal <see cref="P:Orleans.Runtime.GrainAddress.SiloAddress"/> and <see cref="P:Orleans.Runtime.GrainAddress.GrainId"/> values
            and either one has a default <see cref="P:Orleans.Runtime.GrainAddress.ActivationId"/> value or both have equal <see cref="P:Orleans.Runtime.GrainAddress.ActivationId"/> values.
            </summary>
            <param name="other"> The other <see cref="T:Orleans.Runtime.GrainAddress"/> to compare this one with.</param>
            <returns> Returns <c>true</c> if the two <see cref="T:Orleans.Runtime.GrainAddress"/> are considered to match.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainAddressCacheUpdate">
            <summary>
            Represents a directive to update an invalid, cached <see cref="T:Orleans.Runtime.GrainAddress"/> to a valid <see cref="T:Orleans.Runtime.GrainAddress"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddressCacheUpdate.GrainId">
            <summary>
            Identifier of the Grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddressCacheUpdate.InvalidActivationId">
            <summary>
            Identifier of the invalid grain activation.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddressCacheUpdate.InvalidSiloAddress">
            <summary>
            Address of the silo indicated by the invalid grain activation cache entry.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddressCacheUpdate.ValidGrainAddress">
            <summary>
            Gets the valid grain activation address.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainAddressCacheUpdate.InvalidGrainAddress">
            <summary>
            Gets the invalid grain activation address.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainId">
            <summary>
            Identifies a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.#ctor(Orleans.Runtime.GrainType,Orleans.Runtime.IdSpan)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainId.Type">
            <summary>
            Gets the grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainId.Key">
            <summary>
            Gets the grain key.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Create(Orleans.Runtime.GrainType,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Create(Orleans.Runtime.GrainType,Orleans.Runtime.IdSpan)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:Orleans.Runtime.GrainId"/> from the span.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Orleans.Runtime.GrainId@)">
            <summary>
            Tries to parse a <see cref="T:Orleans.Runtime.GrainId"/> from the span.
            </summary>
            <returns><see langword="true"/> if a valid <see cref="T:Orleans.Runtime.GrainId"/> was parsed. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Orleans.Runtime.GrainId"/> from the string.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:Orleans.Runtime.GrainId"/> from the string.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.TryParse(System.String,Orleans.Runtime.GrainId@)">
            <summary>
            Tries to parse a <see cref="T:Orleans.Runtime.GrainId"/> from the string.
            </summary>
            <returns><see langword="true"/> if a valid <see cref="T:Orleans.Runtime.GrainId"/> was parsed. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.TryParse(System.String,System.IFormatProvider,Orleans.Runtime.GrainId@)">
            <summary>
            Tries to parse a <see cref="T:Orleans.Runtime.GrainId"/> from the string.
            </summary>
            <returns><see langword="true"/> if a valid <see cref="T:Orleans.Runtime.GrainId"/> was parsed. <see langword="false"/> otherwise</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainId.IsDefault">
            <summary>
            <see langword="true"/> if this instance is the default value, <see langword="false"/> if it is not.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainId.Equals(Orleans.Runtime.GrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetUniformHashCode">
            <summary>
            Generates a uniform, stable hash code for a grain id.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainId.CompareTo(Orleans.Runtime.GrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainId.op_Equality(Orleans.Runtime.GrainId,Orleans.Runtime.GrainId)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.op_Inequality(Orleans.Runtime.GrainId,Orleans.Runtime.GrainId)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.GrainIdJsonConverter">
            <summary>
            Functionality for converting a <see cref="T:Orleans.Runtime.GrainId"/> to and from a JSON string.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Orleans.Runtime.GrainId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.GrainIdKeyExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Runtime.GrainId"/> keys.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateIntegerKey(System.Int64)">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Int64"/> key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateIntegerKey(System.Int64,System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Int64"/> key and key extension string.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="keyExtension">
            The UTF-8 encoded key extension.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key and key extension.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateIntegerKey(System.Int64,System.String)">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Int64"/> key and key extension string.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="keyExtension">
            The key extension.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key and key extension.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateGuidKey(System.Guid)">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Guid"/> key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateGuidKey(System.Guid,System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Guid"/> key and key extension string.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="keyExtension">
            The UTF-8 encoded key extension.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key and key extension.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.CreateGuidKey(System.Guid,System.String)">
            <summary>
            Creates an <see cref="T:Orleans.Runtime.IdSpan"/> representing a <see cref="T:System.Guid"/> key and key extension string.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="keyExtension">
            The key extension.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> representing the provided key and key extension.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.TryGetIntegerKey(Orleans.Runtime.GrainId,System.Int64@,System.String@)">
            <summary>
            Tries to parse the <see cref="P:Orleans.Runtime.GrainId.Key"/> portion of the provided grain id to extract a <see cref="T:System.Int64"/> key and <see cref="T:System.String"/> key extension.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="keyExt">
            The key extension.
            </param>
            <returns>
            <see langword="true"/> when the grain id was successfully parsed, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.TryGetIntegerKey(Orleans.Runtime.GrainId,System.Int64@)">
            <summary>
            Tries to parse the <see cref="P:Orleans.Runtime.GrainId.Key"/> portion of the provided grain id to extract a <see cref="T:System.Int64"/> key.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            <see langword="true"/> when the grain id was successfully parsed, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.GetIntegerKey(Orleans.Runtime.GrainId,System.String@)">
            <summary>
            Returns the <see cref="T:System.Int64"/> representation of a grain key.
            </summary>
            <param name="grainId">The grain id.</param>
            <param name="keyExt">The output parameter to return the extended key part of the grain primary key, if extended primary key was provided for that grain.</param>
            <returns>A long representing the key for this grain.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.GetIntegerKey(Orleans.Runtime.GrainId)">
            <summary>
            Returns the <see cref="T:System.Int64"/> representation of a grain key.
            </summary>
            <param name="grainId">The grain to find the key for.</param>
            <returns>A <see cref="T:System.Int64"/> representing the key for this grain.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.TryGetGuidKey(Orleans.Runtime.GrainId,System.Guid@,System.String@)">
            <summary>
            Tries to parse the <see cref="P:Orleans.Runtime.GrainId.Key"/> portion of the provided grain id to extract a <see cref="T:System.Guid"/> key and <see cref="T:System.String"/> key extension.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="keyExt">
            The key extension.
            </param>
            <returns>
            <see langword="true"/> when the grain id was successfully parsed, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.TryGetGuidKey(Orleans.Runtime.GrainId,System.Guid@)">
            <summary>
            Tries to parse the <see cref="P:Orleans.Runtime.GrainId.Key"/> portion of the provided grain id to extract a <see cref="T:System.Guid"/> key.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            <see langword="true"/> when the grain id was successfully parsed, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.GetGuidKey(Orleans.Runtime.GrainId,System.String@)">
            <summary>
            Returns the <see cref="T:System.Guid"/> representation of a grain primary key.
            </summary>
            <param name="grainId">The grain to find the primary key for.</param>
            <param name="keyExt">The output parameter to return the extended key part of the grain primary key, if extended primary key was provided for that grain.</param>
            <returns>A <see cref="T:System.Guid"/> representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.GetGuidKey(Orleans.Runtime.GrainId)">
            <summary>
            Returns the <see cref="T:System.Guid"/> representation of a grain primary key.
            </summary>
            <param name="grainId">The grain to find the primary key for.</param>
            <returns>A <see cref="T:System.Guid"/> representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.ThrowInvalidGuidKeyFormat(Orleans.Runtime.GrainId)">
            <summary>
            Throws an exception indicating that a <see cref="T:System.Guid"/>-based grain id was incorrectly formatted.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainIdKeyExtensions.ThrowInvalidIntegerKeyFormat(Orleans.Runtime.GrainId)">
            <summary>
            Throws an exception indicating that a <see cref="T:System.Int64"/>-based grain id was incorrectly formatted.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceType">
            <summary>
            Uniquely identifies a grain interface.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainInterfaceType._value">
            <summary>
            The underlying value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.#ctor(Orleans.Runtime.IdSpan)">
            <summary>
            Creates a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainInterfaceType.Value">
            <summary>
            Returns the <see cref="T:Orleans.Runtime.IdSpan"/> value underlying this instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainInterfaceType.IsDefault">
            <summary>
            Returns true if this value is equal to the <see langword="default"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.Create(System.String)">
            <summary>
            Creates a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.Equals(Orleans.Runtime.GrainInterfaceType)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.ToString">
            <summary>
            Returns a UTF8 interpretation of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.op_Equality(Orleans.Runtime.GrainInterfaceType,Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceType.op_Inequality(Orleans.Runtime.GrainInterfaceType,Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainInterfaceTypeProvider">
            <summary>
            Gets a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> for an interface.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainInterfaceTypeProvider.TryGetGrainInterfaceType(System.Type,Orleans.Runtime.GrainInterfaceType@)">
            <summary>
            Gets the <see cref="T:Orleans.Runtime.GrainInterfaceType"/> corresponding to the specified <paramref name="type"/>.
            </summary>
            <param name="type">The grain interface type instance.</param>
            <param name="grainInterfaceType">The resulting grain interface type identifier.</param>
            <returns>
            <see langword="true"/> if a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> corresponding to the provided type was found, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.AttributeGrainInterfaceTypeProvider">
            <summary>
            Gets a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> from attributes implementing <see cref="T:Orleans.Runtime.IGrainInterfaceTypeProviderAttribute"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AttributeGrainInterfaceTypeProvider._serviceProvider">
            <summary>
            The service provider.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AttributeGrainInterfaceTypeProvider.#ctor(System.IServiceProvider)">
            <summary>
            Creates a <see cref="T:Orleans.Runtime.AttributeGrainInterfaceTypeProvider"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AttributeGrainInterfaceTypeProvider.TryGetGrainInterfaceType(System.Type,Orleans.Runtime.GrainInterfaceType@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.IGrainInterfaceTypeProviderAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> which implements this specifies the <see cref="T:Orleans.Runtime.GrainInterfaceType"/> of the
            type which it is attached to.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainInterfaceTypeProviderAttribute.GetGrainInterfaceType(System.IServiceProvider,System.Type)">
            <summary>
            Gets the grain interface identifier.
            </summary>
            <param name="services">The service provider.</param>
            <param name="type">The grain interface type.</param>
            <returns>
            The <see cref="T:Orleans.Runtime.GrainInterfaceType"/> corresponding to the provided type.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceTypeAttribute">
            <summary>
            When applied to a grain interface, specifies the <see cref="T:Orleans.Runtime.GrainInterfaceType"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainInterfaceTypeAttribute._value">
            <summary>
            The grain interface type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceTypeAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Orleans.Runtime.GrainInterfaceTypeAttribute"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainInterfaceTypeAttribute.GetGrainInterfaceType(System.IServiceProvider,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.GrainType">
            <summary>
            Represents the type of a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainType.#ctor(Orleans.Runtime.IdSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainType"/> struct. 
            </summary>
            <param name="id">
            The id.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainType.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainType"/> struct. 
            </summary>
            <param name="value">
            The raw id value.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainType"/> struct. 
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:Orleans.Runtime.GrainType.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainType.AsSpan">
            <summary>
            Returns a span representation of this instance.
            </summary>
            <returns>
            A <see cref="T:System.ReadOnlySpan`1"/> representation of the value.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The newly created <see cref="T:Orleans.Runtime.GrainType"/> instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.op_Explicit(Orleans.Runtime.GrainType)~Orleans.Runtime.IdSpan">
            <summary>
            Converts a <see cref="T:Orleans.Runtime.GrainType"/> to a <see cref="T:Orleans.Runtime.IdSpan"/>.
            </summary>
            <param name="kind">The grain type to convert.</param>
            <returns>The corresponding <see cref="T:Orleans.Runtime.IdSpan"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.op_Explicit(Orleans.Runtime.IdSpan)~Orleans.Runtime.GrainType">
            <summary>
            Converts a <see cref="T:Orleans.Runtime.IdSpan"/> to a <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
            <param name="id">The id span to convert.</param>
            <returns>The corresponding <see cref="T:Orleans.Runtime.GrainType"/>.</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainType.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainType.Equals(Orleans.Runtime.GrainType)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainType.GetUniformHashCode">
            <summary>
            Generates a uniform, stable hash code for this grain type. 
            </summary>
            <returns>
            A uniform, stable hash of this instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.UnsafeGetArray(Orleans.Runtime.GrainType)">
            <summary>
            Returns the array underlying a grain type instance.
            </summary>
            <param name="id">The grain type.</param>
            <returns>The array underlying a grain type instance.</returns>
            <remarks>
            The returned array must not be modified.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.GrainType.CompareTo(Orleans.Runtime.GrainType)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainType.ToString">
            <summary>
            Returns a string representation of this instance, decoding the value as UTF8.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.op_Equality(Orleans.Runtime.GrainType,Orleans.Runtime.GrainType)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainType.op_Inequality(Orleans.Runtime.GrainType,Orleans.Runtime.GrainType)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainTypePrefix">
            <summary>
            Prefixes and corresponding helper methods for <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.SystemPrefix">
            <summary>
            The prefix for system types.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.SystemTargetPrefix">
            <summary>
            The prefix for system targets.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.SystemTargetPrefixBytes">
            <summary>
            A span representation of <see cref="F:Orleans.Runtime.GrainTypePrefix.SystemTargetPrefix" />.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.GrainServicePrefix">
            <summary>
            The prefix for grain service types.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.GrainServicePrefixBytes">
            <summary>
            A span representation of <see cref="F:Orleans.Runtime.GrainTypePrefix.ClientPrefix" />.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.ClientPrefix">
            <summary>
            The prefix for clients.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.ClientPrefixBytes">
            <summary>
            A span representation of <see cref="F:Orleans.Runtime.GrainTypePrefix.ClientPrefix" />.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.ClientGrainType">
            <summary>
            The prefix used to represent a grain client.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.LegacyGrainPrefix">
            <summary>
            The prefix for legacy grains.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainTypePrefix.LegacyGrainPrefixBytes">
            <summary>
            A span representation of <see cref="F:Orleans.Runtime.GrainTypePrefix.LegacyGrainPrefixBytes" />.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsClient(Orleans.Runtime.GrainType@)">
            <summary>
            Returns <see langword="true"/> if the type is a client, <see langword="false"/> if not.
            </summary>
            <param name="type">The grain type.</param>
            <returns><see langword="true"/> if the type is a client, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsSystemTarget(Orleans.Runtime.GrainType@)">
            <summary>
            Returns <see langword="true"/> if the type is a system target, <see langword="false"/> if not.
            </summary>
            <param name="type">The grain type.</param>
            <returns><see langword="true"/> if the type is a system target, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsLegacyGrain(Orleans.Runtime.GrainType@)">
            <summary>
            Returns <see langword="true"/> if the type is a legacy grain, <see langword="false"/> if not.
            </summary>
            <param name="type">The grain type.</param>
            <returns><see langword="true"/> if the type is a legacy grain, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsGrainService(Orleans.Runtime.GrainType@)">
            <summary>
            Returns <see langword="true"/> if the type is a grain service, <see langword="false"/> if not.
            </summary>
            <param name="type">The grain type.</param>
            <returns><see langword="true"/> if the type is a grain service, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsClient(Orleans.Runtime.GrainId@)">
            <summary>
            Returns <see langword="true"/> if the id represents a client, <see langword="false"/> if not.
            </summary>
            <param name="id">The grain id.</param>
            <returns><see langword="true"/> if the type is a client, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainTypePrefix.IsSystemTarget(Orleans.Runtime.GrainId@)">
            <summary>
            Returns <see langword="true"/> if the id represents a system target, <see langword="false"/> if not.
            </summary>
            <param name="id">The grain id.</param>
            <returns><see langword="true"/> if the type is a system target, <see langword="false"/> if not.</returns>
        </member>
        <member name="T:Orleans.Runtime.GuidId">
            <summary>
            A unique identifier based on a <see cref="F:Orleans.Runtime.GuidId.Guid"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GuidId.Guid">
            <summary>
            The underlying <see cref="F:Orleans.Runtime.GuidId.Guid"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GuidId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GuidId"/> class.
            </summary>
            <param name="guid">
            The underlying <see cref="F:Orleans.Runtime.GuidId.Guid"/>.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GuidId.GetNewGuidId">
            <summary>
            Returns a new, randomly generated <see cref="T:Orleans.Runtime.GuidId"/>.
            </summary>
            <returns>A new, randomly generated <see cref="T:Orleans.Runtime.GuidId"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GuidId.GetGuidId(System.Guid)">
            <summary>
            Returns a <see cref="T:Orleans.Runtime.GuidId"/> instance corresponding to the provided <see cref="F:Orleans.Runtime.GuidId.Guid"/>.
            </summary>
            <param name="guid">The guid.</param>
            <returns>A <see cref="T:Orleans.Runtime.GuidId"/> instance corresponding to the provided <see cref="F:Orleans.Runtime.GuidId.Guid"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GuidId.FindOrCreateGuidId(System.Guid)">
            <summary>
            Returns a <see cref="T:Orleans.Runtime.GuidId"/> instance corresponding to the provided <see cref="F:Orleans.Runtime.GuidId.Guid"/>.
            </summary>
            <param name="guid">The <see cref="F:Orleans.Runtime.GuidId.Guid"/>.</param>
            <returns>A <see cref="T:Orleans.Runtime.GuidId"/> instance corresponding to the provided <see cref="F:Orleans.Runtime.GuidId.Guid"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GuidId.CompareTo(Orleans.Runtime.GuidId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GuidId.Equals(Orleans.Runtime.GuidId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GuidId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GuidId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GuidId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GuidId.op_Equality(Orleans.Runtime.GuidId,Orleans.Runtime.GuidId)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GuidId.op_Inequality(Orleans.Runtime.GuidId,Orleans.Runtime.GuidId)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.GuidId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.IdSpan">
            <summary>
            Primitive type for identities, representing a sequence of bytes.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.IdSpan._hashCode">
            <summary>
            The stable hash of the underlying value.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.IdSpan._value">
            <summary>
            The underlying value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.IdSpan"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.IdSpan"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="hashCode">
            The hash code of the value.
            </param>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.IdSpan"/> struct.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:Orleans.Runtime.IdSpan.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IdSpan.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.IdSpan"/> instance from the provided value.
            </summary>
            <returns>
            A new <see cref="T:Orleans.Runtime.IdSpan"/> corresponding to the provided id.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.AsSpan">
            <summary>
            Returns a span representation of this instance.
            </summary>
            <returns>
            A span representation fo this instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.Equals(Orleans.Runtime.IdSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.GetUniformHashCode">
            <summary>
            Returns a uniform, stable hash code for an <see cref="T:Orleans.Runtime.IdSpan"/>.
            </summary>
            <returns>
            The hash code of this instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.UnsafeCreate(System.Byte[],System.Int32)">
            <summary>
            Creates an instance, specifying both the hash code and the value.
            </summary>
            <remarks>
            This method is intended for use by serializers and other low-level libraries.
            </remarks>
            <param name="value">
            The underlying value.
            </param>
            <param name="hashCode">
            The hash of the underlying value.
            </param>
            <returns>
            An <see cref="T:Orleans.Runtime.IdSpan"/> instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.UnsafeGetArray(Orleans.Runtime.IdSpan)">
            <summary>
            Gets the underlying array from this instance.
            </summary>
            <param name="id">The id span.</param>
            <returns>The underlying array from this instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.CompareTo(Orleans.Runtime.IdSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.ToString">
            <summary>
            Returns a string representation of this instance, decoding the value as UTF8.
            </summary>
            <returns>
            A string representation fo this instance.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.op_Equality(Orleans.Runtime.IdSpan,Orleans.Runtime.IdSpan)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpan.op_Inequality(Orleans.Runtime.IdSpan,Orleans.Runtime.IdSpan)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IdSpanCodec">
            <summary>
            Functionality for serializing and deserializing <see cref="T:Orleans.Runtime.IdSpan"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IdSpanCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,Orleans.Runtime.IdSpan)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.IdSpanCodec.WriteRaw``1(Orleans.Serialization.Buffers.Writer{``0}@,Orleans.Runtime.IdSpan)">
            <summary>
            Writes an <see cref="T:Orleans.Runtime.IdSpan"/> value to the provided writer without field framing.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value to write.</param>
            <typeparam name="TBufferWriter">The underlying buffer writer type.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.IdSpanCodec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads an <see cref="T:Orleans.Runtime.IdSpan"/> value from a reader without any field framing.
            </summary>
            <typeparam name="TInput">The underlying reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>An <see cref="T:Orleans.Runtime.IdSpan"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.IdSpanCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.LegacyGrainId.GetUniformHashCode">
            <summary>
            Get a uniformly distributed hash code value for this grain, based on Jenkins Hash function.
            NOTE: Hash code value may be positive or NEGATIVE.
            </summary>
            <returns>Hash code for this LegacyGrainId</returns>
        </member>
        <member name="M:Orleans.Runtime.LegacyGrainId.ToParsableString">
            <summary>
            Return this LegacyGrainId in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>LegacyGrainId in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.LegacyGrainId.FromParsableString(System.String)">
            <summary>
            Create a new LegacyGrainId object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="grainId">String containing the LegacyGrainId info to be parsed.</param>
            <returns>New LegacyGrainId object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.LegacyGrainId.FromParsableString(System.ReadOnlySpan{System.Char})">
            <summary>
            Create a new LegacyGrainId object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="grainId">String containing the LegacyGrainId info to be parsed.</param>
            <returns>New LegacyGrainId object created from the input data.</returns>
        </member>
        <member name="T:Orleans.Runtime.UniqueKey.Category">
            <summary>
            Type id values encoded into UniqueKeys
            </summary>
        </member>
        <member name="M:Orleans.Runtime.UniqueKey.ToByteArray">
            <summary>
            If KeyExt not exists, returns following structure
            |8 bytes|8 bytes|8 bytes|4 bytes| - total 28 bytes.
            If KeyExt exists, adds additional KeyExt bytes length
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.ObserverGrainId">
            <summary>
            Identifies a client-side observer object.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ObserverGrainId.SegmentSeparator">
            <summary>
            The separator between the client id portion of the observer id and the client-scoped observer id portion.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.#ctor(Orleans.Runtime.GrainId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ObserverGrainId"/> struct.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ObserverGrainId.GrainId">
            <summary>
            Gets the underlying <see cref="F:Orleans.Runtime.ObserverGrainId.GrainId"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.Create(Orleans.Runtime.ClientGrainId)">
            <summary>
            Returns a new, random <see cref="T:Orleans.Runtime.ObserverGrainId"/> instance for the provided client id.
            </summary>
            <param name="clientId">
            The client id.
            </param>
            <returns>
            A new, random <see cref="T:Orleans.Runtime.ObserverGrainId"/> instance for the provided client id.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.Create(Orleans.Runtime.ClientGrainId,Orleans.Runtime.IdSpan)">
            <summary>
            Returns a new <see cref="T:Orleans.Runtime.ObserverGrainId"/> instance for the provided client id.
            </summary>
            <param name="clientId">
            The client id.
            </param>
            <param name="scopedId">
            The client-scoped observer id.
            </param>
            <returns>
            A new <see cref="T:Orleans.Runtime.ObserverGrainId"/> instance for the provided client id.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.IsObserverGrainId(Orleans.Runtime.GrainId)">
            <summary>
            Returns <see langword="true"/> if the provided instance represents an observer, <see langword="false"/> if otherwise.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <returns>
            <see langword="true"/> if the provided grain id is an observer id, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.TryParse(Orleans.Runtime.GrainId,Orleans.Runtime.ObserverGrainId@)">
            <summary>
            Converts the provided <see cref="F:Orleans.Runtime.ObserverGrainId.GrainId"/> to a <see cref="T:Orleans.Runtime.ObserverGrainId"/>. A return value indicates whether the operation succeeded.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="observerId">
            The corresponding observer id.
            </param>
            <returns>
            <see langword="true"/> if the provided grain id is an observer id, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.Equals(Orleans.Runtime.ObserverGrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ObserverGrainId.CompareTo(Orleans.Runtime.ObserverGrainId)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.SiloAddress">
            <summary>
            Data class encapsulating the details of silo addresses.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Endpoint">
            <summary>
            Gets the endpoint.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Generation">
            <summary>
            Gets the generation.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Zero">
            <summary>Gets the special constant value which indicate an empty <see cref="T:Orleans.Runtime.SiloAddress"/>.</summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.New(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Factory for creating new SiloAddresses with specified IP endpoint address and silo generation number.
            </summary>
            <param name="ep">IP endpoint address of the silo.</param>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with specified address and silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.New(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Factory for creating new SiloAddresses with specified IP endpoint address and silo generation number.
            </summary>
            <param name="address">IP address of the silo.</param>
            <param name="port">Port number</param>
            <param name="generation">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with specified address and silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloAddress"/> class.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="generation">The generation.</param>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.IsClient">
            <summary>
            Gets a value indicating whether this instance represents a client (versus a server).
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.AllocateNewGeneration">
            <summary> Allocate a new silo generation number. </summary>
            <returns>A new silo generation number.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToParsableString">
            <summary>
            Return this SiloAddress in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>SiloAddress in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToUtf8String">
            <summary>
            Returns a UTF8-encoded representation of this instance as a byte array.
            </summary>
            <returns>A UTF8-encoded representation of this instance as a byte array.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.FromParsableString(System.String)">
            <summary>
            Create a new SiloAddress object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the SiloAddress info to be parsed.</param>
            <returns>New SiloAddress object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.FromUtf8String(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a new SiloAddress object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the SiloAddress info to be parsed.</param>
            <returns>New SiloAddress object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToString">
            <summary>
            Return a long string representation of this SiloAddress.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <see cref="M:Orleans.Runtime.SiloAddress.FromParsableString(System.String)"/> method -- use the <see cref="M:Orleans.Runtime.SiloAddress.ToParsableString"/> method for that purpose.
            </remarks>
            <returns>String representation of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToStringWithHashCode">
            <summary>
            Return a long string representation of this SiloAddress, including it's consistent hash value.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representation of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetConsistentHashCode">
            <summary>Returns a consistent hash value for this silo address.</summary>
            <returns>Consistent hash value for this silo address.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetUniformHashCodes(System.Int32)">
            <summary>
            Returns a collection of uniform hash codes variants for this instance.
            </summary>
            <param name="numHashes">The number of hash codes to return.</param>
            <returns>A collection of uniform hash codes variants for this instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Matches(Orleans.Runtime.SiloAddress)">
            <summary>
            Two silo addresses match if they are equal or if one generation or the other is 0.
            </summary>
            <param name="other"> The other SiloAddress to compare this one with. </param>
            <returns>Returns <c>true</c> if the two SiloAddresses are considered to match -- if they are equal or if one generation or the other is 0. </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(Orleans.Runtime.SiloAddress)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.IsSameLogicalSilo(Orleans.Runtime.SiloAddress)">
            <summary>
            Returns <see langword="true"/> if the provided value represents the same logical server as this value, otherwise <see langword="false"/>.
            </summary>
            <param name="other">
            The other instance.
            </param>
            <returns>
            <see langword="true"/> if the provided value represents the same logical server as this value, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.IsSuccessorOf(Orleans.Runtime.SiloAddress)">
            <summary>
            Returns <see langword="true"/> if the provided value represents the same logical server as this value and is a successor to this server, otherwise <see langword="false"/>.
            </summary>
            <param name="other">
            The other instance.
            </param>
            <returns>
            <see langword="true"/> if the provided value represents the same logical server as this value and is a successor to this server, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.IsPredecessorOf(Orleans.Runtime.SiloAddress)">
            <summary>
            Returns <see langword="true"/> if the provided value represents the same logical server as this value and is a predecessor to this server, otherwise <see langword="false"/>.
            </summary>
            <param name="other">
            The other instance.
            </param>
            <returns>
            <see langword="true"/> if the provided value represents the same logical server as this value and is a predecessor to this server, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.CompareTo(Orleans.Runtime.SiloAddress)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.SiloAddressConverter">
            <summary>
            Functionality for converting <see cref="T:Orleans.Runtime.SiloAddress"/> instances to and from their JSON representation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddressConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloAddressConverter.Write(System.Text.Json.Utf8JsonWriter,Orleans.Runtime.SiloAddress,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.Serialization.SiloAddressCodec">
            <summary>
            Serializer and deserializer for <see cref="T:Orleans.Runtime.SiloAddress"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Serialization.SiloAddressCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Serialization.SiloAddressCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.SystemTargetGrainId">
            <summary>
            Identifies a system target.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.#ctor(Orleans.Runtime.GrainId)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SystemTargetGrainId"/> struct.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
        </member>
        <member name="P:Orleans.Runtime.SystemTargetGrainId.GrainId">
            <summary>
            Gets the underlying identity.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.Create(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.SystemTargetGrainId"/> instance.
            </summary>
            <param name="kind">
            The grain type.
            </param>
            <param name="address">
            The server which the system target exists on.
            </param>
            <returns>
            A <see cref="T:Orleans.Runtime.SystemTargetGrainId"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.Create(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress,System.String)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.SystemTargetGrainId"/> instance.
            </summary>
            <param name="kind">
            The grain type.
            </param>
            <param name="address">
            The server which the system target exists on.
            </param>
            <param name="extraIdentifier">
            An optional key extension.
            </param>
            <returns>
            A <see cref="T:Orleans.Runtime.SystemTargetGrainId"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.IsSystemTargetGrainId(Orleans.Runtime.GrainId@)">
            <summary>
            Returns <see langword="true"/> if the provided instance represents a system target, <see langword="false"/> if otherwise.
            </summary>
            <param name="id">
            The grain id.
            </param>
            <returns>
            <see langword="true"/> if the value is a system target grain id, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.TryParse(Orleans.Runtime.GrainId,Orleans.Runtime.SystemTargetGrainId@)">
            <summary>
            Converts the provided <see cref="P:Orleans.Runtime.SystemTargetGrainId.GrainId"/> to a <see cref="T:Orleans.Runtime.SystemTargetGrainId"/>. A return value indicates whether the operation succeeded.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="systemTargetId">
            The resulting system target id.
            </param>
            <returns>
            <see langword="true"/> if the value is a system target grain id, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.WithSiloAddress(Orleans.Runtime.SiloAddress)">
            <summary>
            Returns a new <see cref="T:Orleans.Runtime.SystemTargetGrainId"/> targeting the provided address.
            </summary>
            <param name="siloAddress">
            The silo address.
            </param>
            <returns>
            A new <see cref="T:Orleans.Runtime.SystemTargetGrainId"/> targeting the provided address.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.GetSiloAddress">
            <summary>
            Gets the <see cref="T:Orleans.Runtime.SiloAddress"/> of the system target.
            </summary>
            <returns>
            The silo address corresponding to this system target id.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.CreateGrainServiceGrainId(System.Int32,System.String,Orleans.Runtime.SiloAddress)">
            <summary>
            Creates a <see cref="P:Orleans.Runtime.SystemTargetGrainId.GrainId"/> for a grain service.
            </summary>
            <param name="typeCode">
            The type code.
            </param>
            <param name="grainSystemId">
            The system id.
            </param>
            <param name="address">
            The silo address.
            </param>
            <returns>A grain id for a grain service instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.CreateGrainServiceGrainType(System.Int32,System.String)">
            <summary>
            Creates a <see cref="P:Orleans.Runtime.SystemTargetGrainId.GrainId"/> for a grain service.
            </summary>
            <param name="typeCode">
            The type code.
            </param>
            <param name="grainSystemId">
            The system id.
            </param>
            <returns>A grain id for a grain service instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.CreateGrainServiceGrainId(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress)">
            <summary>
            Creates a <see cref="P:Orleans.Runtime.SystemTargetGrainId.GrainId"/> for a grain service.
            </summary>
            <param name="grainType">
            The grain type.
            </param>
            <param name="address">
            The silo address.
            </param>
            <returns>A grain id for a grain service instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.CreateGrainType(System.String)">
            <summary>
            Creates a system target <see cref="T:Orleans.Runtime.GrainType"/> with the provided name.
            </summary>
            <param name="name">
            The system target grain type name.
            </param>
            <returns>
            The grain type.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.Equals(Orleans.Runtime.SystemTargetGrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.CompareTo(Orleans.Runtime.SystemTargetGrainId)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_Equality(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_Inequality(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_LessThan(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_LessThanOrEqual(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_GreaterThan(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTargetGrainId.op_GreaterThanOrEqual(Orleans.Runtime.SystemTargetGrainId,Orleans.Runtime.SystemTargetGrainId)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainLifecycle">
            <summary>
            The observable grain lifecycle.
            </summary>
            <remarks>
            This type is usually used as the generic parameter in <see cref="T:Orleans.ILifecycleParticipant`1"/> as
            a means of participating in the lifecycle stages of a grain activation.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.IGrainLifecycle.AddMigrationParticipant(Orleans.Runtime.IGrainMigrationParticipant)">
            <summary>
            Registers a grain migration participant.
            </summary>
            <param name="participant">The participant.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainLifecycle.RemoveMigrationParticipant(Orleans.Runtime.IGrainMigrationParticipant)">
            <summary>
            Unregisters a grain migration participant.
            </summary>
            <param name="participant">The participant.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainMigrationParticipant.OnDehydrate(Orleans.Runtime.IDehydrationContext)">
            <summary>
            Called on the original activation when migration is initiated, after <see cref="M:Orleans.IGrainBase.OnDeactivateAsync(Orleans.DeactivationReason,System.Threading.CancellationToken)"/> completes.
            The participant can access and update the dehydration context.
            </summary>
            <param name="dehydrationContext">The dehydration context.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainMigrationParticipant.OnRehydrate(Orleans.Runtime.IRehydrationContext)">
            <summary>
            Called on the new activation after a migration, before <see cref="M:Orleans.IGrainBase.OnActivateAsync(System.Threading.CancellationToken)"/> is called.
            The participant can restore state from the migration context.
            </summary>
            <param name="rehydrationContext">The rehydration context.</param>
        </member>
        <member name="T:Orleans.Runtime.IDehydrationContext">
            <summary>
            Records the state of a grain activation which is in the process of being dehydrated for migration to another location.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IDehydrationContext.Keys">
            <summary>
            Gets the keys in the context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IDehydrationContext.AddBytes(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Adds a sequence of bytes to the dehydration context, associating the sequence with the provided key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Runtime.IDehydrationContext.AddBytes``1(System.String,System.Action{``0,System.Buffers.IBufferWriter{System.Byte}},``0)">
            <summary>
            Adds a sequence of bytes to the dehydration context, associating the sequence with the provided key.
            </summary>
            <param name="key">The key.</param>
            <param name="valueWriter">A delegate used to write the provided value to the context.</param>
            <param name="value">The value to provide to <paramref name="valueWriter"/>.</param>
        </member>
        <member name="M:Orleans.Runtime.IDehydrationContext.TryAddValue``1(System.String,``0)">
            <summary>
            Attempts to a value to the dehydration context, associated with the provided key, serializing it using <see cref="T:Orleans.Serialization.Serializer"/>.
            If a serializer is found for the value, and the key has not already been added, then the value is added and the method returns <see langword="true"/>.
            If no serializer exists or the key has already been added, then the value is not added and the method returns <see langword="false"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="T:Orleans.Runtime.IRehydrationContext">
            <summary>
            Contains the state of a grain activation which is in the process of being rehydrated after moving from another location.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRehydrationContext.Keys">
            <summary>
            Gets the keys in the context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRehydrationContext.TryGetBytes(System.String,System.Buffers.ReadOnlySequence{System.Byte}@)">
            <summary>
            Tries to get a sequence of bytes from the rehydration context, associated with the provided key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value, if present.</param>
            <returns><see langword="true"/> if the key exists in the context, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.IRehydrationContext.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get a value from the rehydration context, associated with the provided key, deserializing it using <see cref="T:Orleans.Serialization.Serializer"/>.
            If a serializer is found for the value, and the key is present, then the value is deserialized and the method returns <see langword="true"/>.
            If no serializer exists or the key has already been added, then the value is not added and the method returns <see langword="false"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value, if present.</param>
            <returns><see langword="true"/> if the key exists in the context, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.LogFormatter">
            <summary>
            Formats values for logging purposes.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintDate(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable data format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.ParseDate(System.String)">
            <summary>
            Parses a date.
            </summary>
            <param name="dateStr">The date string.</param>
            <returns>The parsed date.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintTime(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable time format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintException(System.Exception)">
            <summary>
            Utility function to convert an exception into printable format, including expanding and formatting any nested sub-expressions.
            </summary>
            <param name="exception">The exception to be printed.</param>
            <returns>Formatted string representation of the exception, including expanding and formatting any nested sub-expressions.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.SetExceptionDecoder(System.Type,System.Func{System.Exception,System.String})">
            <summary>
            Configures the exception decoder for the specified exception type.
            </summary>
            <param name="exceptionType">The exception type to configure a decoder for.</param>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="T:Orleans.Runtime.ActivationCountBasedPlacement">
            <summary>
            A placement strategy which attempts to achieve approximately even load based upon the number of recently-active grains on each server.
            </summary>
            <remarks>
            The intention of this placement strategy is to place new grain activations on the least heavily loaded server based on the number of recently busy grains.
            It includes a mechanism in which all servers periodically publish their total activation count to all other servers.
            The placement director then selects a server which is predicted to have the fewest activations by examining the most recently
            reported activation count and a making prediction of the current activation count based upon the recent activation count made by
            the placement director on the current server. The director selects a number of servers at random when making this prediction,
            in an attempt to avoid multiple separate servers overloading the same server. By default, two servers are selected at random,
            but this value is configurable via <c>Orleans.Runtime.ActivationCountBasedPlacementOptions</c>.
            <br/>
            This algorithm is based on the thesis The Power of Two Choices in Randomized Load Balancing by Michael David Mitzenmacher <see href="https://www.eecs.harvard.edu/~michaelm/postscripts/mythesis.pdf"/>,
            and is also used in NGINX for distributed load balancing, as described in the article NGINX and the "Power of Two Choices" Load-Balancing Algorithm <see href="https://www.nginx.com/blog/nginx-power-of-two-choices-load-balancing-algorithm/"/>.
            <br/>
            This placement strategy is configured by adding the <see cref="T:Orleans.Placement.ActivationCountBasedPlacementAttribute"/> attribute to a grain.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.ActivationCountBasedPlacement.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.HashBasedPlacement">
            <summary>
            Places activations on compatible silos by hashing the grain identifier using a stable hash and selecting a silo from a sorted set using a modulo operation.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.PlacementStrategy">
            <summary>
            The base type for all placement strategies.
            </summary>
            <remarks>
            Orleans uses a configurable placement system to decide which server to place a grain on.
            Placement directors are used to decide where a grain activation should be placed.
            Placement directors are associated with grains using a placement strategy.
            Grains indicate their preferred placement strategy using an attribute on the grain class.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.PlacementStrategy.IsUsingGrainDirectory">
            <summary>
            Gets a value indicating whether or not this placement strategy requires activations to be registered in
            the grain directory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.PlacementStrategy.Initialize(Orleans.Metadata.GrainProperties)">
            <summary>
            Initializes an instance of this type using the provided grain properties.
            </summary>
            <param name="properties">
            The grain properties.
            </param>
        </member>
        <member name="M:Orleans.Runtime.PlacementStrategy.PopulateGrainProperties(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Populates grain properties to specify the preferred placement strategy.
            </summary>
            <param name="services">The service provider.</param>
            <param name="grainClass">The grain class.</param>
            <param name="grainType">The grain type.</param>
            <param name="properties">The grain properties which will be populated by this method call.</param>
        </member>
        <member name="T:Orleans.Runtime.PreferLocalPlacement">
            <summary>
            The prefer local placement strategy indicates that a grain should always be placed on the local host if the grain
            is not already active elsewhere in the cluster and the local host is compatible with it.
            </summary>
            <remarks>
            If the host is not compatible with the grain type or if a grain receives an incompatible request, the grain will be
            placed on a random, compatible server.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.PreferLocalPlacement.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.RandomPlacement">
            <summary>
            The random placement strategy specifies that new activations of a grain should be placed on a random, compatible server.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RandomPlacement.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ResourceOptimizedPlacement">
            <summary>
            A placement strategy which attempts to optimize resource distribution across the cluster.
            </summary>
            <remarks>
            <para>It assigns weights to runtime statistics to prioritize different resources and calculates a normalized score for each silo.
            Following the <u>power of k-choices</u> algorithm, K silos are picked as potential targets, where K is equal to the square root of the number of silos.
            Out of those K silos, the one with the lowest score is chosen for placing the activation. Normalization ensures that each property contributes proportionally
            to the overall score. You can adjust the weights based on your specific requirements and priorities for load balancing.
            In addition to normalization, an <u>online adaptiv</u> algorithm provides a smoothing effect (filters out high frequency components) and avoids rapid signal
            drops by transforming it into a polynomial-like decay process. This contributes to avoiding resource saturation on the silos and especially newly joined silos.</para>
            <para>Silos which are overloaded by definition of the load shedding mechanism are not considered as candidates for new placements.</para>
            <para><i>This placement strategy is configured by adding the <see cref="T:Orleans.Placement.ResourceOptimizedPlacementAttribute"/> attribute to a grain.</i></para>
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.SiloRoleBasedPlacement">
            <summary>
            The silo role placement strategy specifies that a grain should be placed on a compatible silo which has the role specified by the strategy's placement attribute.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRoleBasedPlacement.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StatelessWorkerPlacement">
            <summary>
            The stateless worker placement strategy allows multiple instances of a given grain to co-exist simultaneously on any host and is reserved for stateless worker grains.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.StatelessWorkerPlacement.IsUsingGrainDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.StatelessWorkerPlacement.MaxLocal">
            <summary>
            Gets the maximum number of local instances which can be simultaneously active for a given grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StatelessWorkerPlacement.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StatelessWorkerPlacement"/> class.
            </summary>
            <param name="maxLocal">
            The maximum number of local instances which can be simultaneously active for a given grain.
            </param>
        </member>
        <member name="M:Orleans.Runtime.StatelessWorkerPlacement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.StatelessWorkerPlacement"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StatelessWorkerPlacement.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StatelessWorkerPlacement.Initialize(Orleans.Metadata.GrainProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.StatelessWorkerPlacement.PopulateGrainProperties(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.SystemTargetPlacementStrategy">
            <summary>
            The placement strategy used by system targets.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.EnumerationResult">
            <summary>
            Identifies enumeration results.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.Heartbeat">
            <summary>
            This result represents a heartbeat. Issue a subsequent enumeration call to receive a new result.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.Element">
            <summary>
            This result represents a value from the enumeration.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.Batch">
            <summary>
            This result represents a sequence of values from the enumeration.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.Completed">
            <summary>
            This result indicates that enumeration has completed and that no further results will be produced.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.MissingEnumeratorError">
            <summary>
            The attempt to enumerate failed because the enumerator was not found.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.CompletedWithElement">
            <summary>
            This result indicates that enumeration has completed and that no further results will be produced.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.EnumerationResult.CompletedWithBatch">
            <summary>
            This result indicates that enumeration has completed and that no further results will be produced.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IAsyncEnumerableGrainExtension">
            <summary>
            Grain extension interface for grains which return <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> from grain methods.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IAsyncEnumerableGrainExtension.StartEnumeration``1(System.Guid,Orleans.Runtime.IAsyncEnumerableRequest{``0})">
            <summary>
            Invokes an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> request and begins enumeration.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="requestId">The request id, generated by the caller.</param>
            <param name="request">The request.</param>
            <returns>The result of enumeration</returns>
        </member>
        <member name="M:Orleans.Runtime.IAsyncEnumerableGrainExtension.MoveNext``1(System.Guid)">
            <summary>
            Continues enumerating an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="requestId">The request id, generated by the caller.</param>
            <returns>The result of enumeration</returns>
        </member>
        <member name="M:Orleans.Runtime.IAsyncEnumerableGrainExtension.DisposeAsync(System.Guid)">
            <summary>
            Disposes an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> value.
            </summary>
            <param name="requestId">The request id, generated by the caller.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="T:Orleans.Runtime.IAsyncEnumerableRequest`1">
            <summary>
            Interface for requests to a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>-returning methods.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IAsyncEnumerableRequest`1.MaxBatchSize">
            <summary>
            Gets or sets the maximum batch size for the request.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IAsyncEnumerableRequest`1.InvokeImplementation">
            <summary>
            Invokes the request.
            </summary>
            <returns>The result of invocation.</returns>
        </member>
        <member name="T:Orleans.Runtime.AsyncEnumerableRequest`1">
            <summary>
            Represents a request to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>-returning method.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="P:Orleans.Runtime.AsyncEnumerableRequest`1.TargetGrain">
            <summary>
            The target grain instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncEnumerableRequest`1.MaxBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableRequest`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableRequest`1.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableRequest`1.InvokeImplementation">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.AsyncEnumeratorProxy`1">
            <summary>
            A proxy for an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instance returned from a grain method.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumeratorProxy`1.#ctor(Orleans.Runtime.AsyncEnumerableRequest{`0},System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.AsyncEnumeratorProxy`1"/> class.
            </summary>
            <param name="request">The request which this instanced proxies.</param>
        </member>
        <member name="P:Orleans.Runtime.AsyncEnumeratorProxy`1.Current">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumeratorProxy`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumeratorProxy`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.EnumerationAbortedException">
            <summary>
            Indicates that an enumeration was aborted.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.EnumerationAbortedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.EnumerationAbortedException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.EnumerationAbortedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.EnumerationAbortedException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.EnumerationAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.EnumerationAbortedException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.EnumerationAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.EnumerationAbortedException"/> class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainLifecycleStage">
            <summary>
            Stages of a grains lifecycle.
            TODO: Add more later, see ActivationInitializationStage
            Full grain lifecycle, including register, state setup, and 
              stream cleanup should all eventually be triggered by the 
              grain lifecycle.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.First">
            <summary>
            First valid stage in grain's lifecycle.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.SetupState">
            <summary>
            Setup grain state prior to activation.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.Activate">
            <summary>
            Activate grain.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.Last">
            <summary>
            Last valid stage in grain's lifecycle.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceShared">
            <summary>
            Properties common to <see cref="T:Orleans.Runtime.GrainReference"/> instances with the same <see cref="P:Orleans.Runtime.GrainReferenceShared.GrainType"/> and <see cref="T:Orleans.Runtime.GrainInterfaceType"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.Runtime">
            <summary>
            Gets the grain reference runtime.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.GrainType">
            <summary>
            Gets the grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.InterfaceType">
            <summary>
            Gets the interface type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.InvokeMethodOptions">
            <summary>
            Gets the common invocation options.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.CodecProvider">
            <summary>
            Gets the serialization codec provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.CopyContextPool">
            <summary>
            Gets the serialization copy context pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceShared.InterfaceVersion">
            <summary>
            Gets the interface version.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCodec">
            <summary>
            Functionality for serializing and deserializing <see cref="T:Orleans.Runtime.GrainReference"/> and derived types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodec.#ctor(Orleans.IGrainFactory,Orleans.Serialization.Serializers.IValueSerializer{Orleans.Runtime.GrainReferenceSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceCodec"/> class.
            </summary>
            <param name="grainFactory">The grain factory.</param>
            <param name="surrogateSerializer">The serializer for the surrogate type used by this class.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodec.ConvertFromSurrogate(Orleans.Runtime.GrainReferenceSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodec.ConvertToSurrogate(Orleans.Runtime.IAddressable,Orleans.Runtime.GrainReferenceSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCopierProvider">
            <summary>
            Provides specialized copier instances for grain reference types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCopierProvider.GetSpecializedCopier(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCopierProvider.IsSupportedType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.TypedGrainReferenceCopier`1">
            <summary>
            A strongly-typed copier for grain reference instances.
            </summary>
            <typeparam name="TInterface">The grain interface type.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.TypedGrainReferenceCopier`1.DeepCopy(`0,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCodecProvider">
            <summary>
            Provides specialized codec instances for grain reference types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodecProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceCodecProvider"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodecProvider.GetSpecializedCodec(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodecProvider.IsSupportedType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCodecProvider.ThrowGrainObserverInvalidException(Orleans.IGrainObserver)">
            <summary>
            Throws an exception indicating that a parameter type is not supported.
            </summary>
            <param name="observer">The observer.</param>
        </member>
        <member name="T:Orleans.Runtime.TypedGrainReferenceCodec`1">
            <summary>
            A strongly-typed codec for grain reference instances.
            </summary>
            <typeparam name="T">The grain reference interface type.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.TypedGrainReferenceCodec`1.#ctor(Orleans.IGrainFactory,Orleans.Serialization.Serializers.IValueSerializer{Orleans.Runtime.GrainReferenceSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.TypedGrainReferenceCodec`1"/> class.
            </summary>
            <param name="grainFactory">The grain factory.</param>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Runtime.TypedGrainReferenceCodec`1.ConvertFromSurrogate(Orleans.Runtime.GrainReferenceSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.TypedGrainReferenceCodec`1.ConvertToSurrogate(`0,Orleans.Runtime.GrainReferenceSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceSurrogate">
            <summary>
            A surrogate used to represent <see cref="T:Orleans.Runtime.GrainReference"/> implementations for serialization.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReferenceSurrogate.GrainId">
            <summary>
            Gets or sets the grain id.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReferenceSurrogate.GrainInterfaceType">
            <summary>
            Gets or sets the grain interface type.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReference">
            <summary>
            This is the base class for all grain references.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference._shared">
            <summary>
            The grain reference functionality which is shared by all grain references of a given type.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference._key">
            <summary>
            The underlying grain id key.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.Shared">
            <summary>
            Gets the grain reference functionality which is shared by all grain references of a given type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.Runtime">
            <summary>
            Gets the grain reference runtime.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.GrainId">
            <summary>
            Gets the grain id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceType">
            <summary>
            Gets the interface type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.CopyContextPool">
            <summary>
            Gets the serialization copy context pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.CodecProvider">
            <summary>
            Gets the serialization codec provider.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainReferenceShared,Orleans.Runtime.IdSpan)">
            <summary>Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReference"/> class.</summary>
            <param name="shared">
            The grain reference functionality which is shared by all grain references of a given type.
            </param>
            <param name="key">
            The key portion of the grain id.
            </param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.FromGrainId(Orleans.Runtime.GrainReferenceShared,Orleans.Runtime.GrainId)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.GrainReference"/> instance for the specified <paramref name="grainId"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Cast``1">
            <summary>
            Creates a new grain reference which implements the specified grain interface.
            </summary>
            <typeparam name="TGrainInterface">
            The grain interface type.
            </typeparam>
            <returns>A new grain reference which implements the specified interface type.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Equals(System.Object)">
            <summary>
            Tests this reference for equality to another object.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="obj">The object to test for equality against this reference.</param>
            <returns><c>true</c> if the object is equal to this reference.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Equals(Orleans.Runtime.GrainReference)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetUniformHashCode">
            <summary>
            Get a uniform hash code for this grain reference.
            </summary>
            <returns>
            The uniform hash code.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Equality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for equality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>true</c> if both grain references refer to the same grain (by grain identifier).</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Inequality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for inequality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>false</c> if both grain references are resolved to the same grain (by grain identifier).</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceVersion">
            <summary>
            Gets the interface version.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceName">
            <summary>
            Gets the interface name.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeAsync``1(Orleans.Runtime.IRequest)">
            <summary>
            Invokes the provided method.
            </summary>
            <typeparam name="T">The underlying method return type.</typeparam>
            <param name="methodDescription">The method description.</param>
            <returns>The result of the invocation.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeAsync(Orleans.Runtime.IRequest)">
            <summary>
            Invokes the provided method.
            </summary>
            <param name="methodDescription">The method description.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Invoke(Orleans.Runtime.IRequest)">
            <summary>
            Invokes the provided method.
            </summary>
            <param name="methodDescription">The method description.</param>
        </member>
        <member name="T:Orleans.Runtime.IRequest">
            <summary>
            Represents a request to invoke a method on a grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRequest.Options">
            <summary>
            Gets the invocation options.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRequest.AddInvokeMethodOptions(Orleans.CodeGeneration.InvokeMethodOptions)">
            <summary>
            Incorporates the provided invocation options.
            </summary>
            <param name="options">
            The options.
            </param>
        </member>
        <member name="M:Orleans.Runtime.IRequest.ToString(Orleans.Runtime.IRequest)">
            <summary>
            Returns a string representation of the request.
            </summary>
            <returns>A string representation of the request.</returns>
        </member>
        <member name="M:Orleans.Runtime.IRequest.ToMethodCallString(Orleans.Runtime.IRequest)">
            <summary>
            Returns a string representation of the request.
            </summary>
            <returns>A string representation of the request.</returns>
        </member>
        <member name="T:Orleans.Runtime.RequestBase">
            <summary>
            Base type used for method requests.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RequestBase.Options">
            <summary>
            Gets the invocation options.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetArgumentCount">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.AddInvokeMethodOptions(Orleans.CodeGeneration.InvokeMethodOptions)">
            <summary>
            Incorporates the provided invocation options.
            </summary>
            <param name="options">
            The options.
            </param>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetTarget">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.SetTarget(Orleans.Serialization.Invocation.ITargetHolder)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetArgument(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.SetArgument(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetMethodName">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetInterfaceName">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetActivityName">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetInterfaceType">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetMethod">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.RequestBase.GetDefaultResponseTimeout">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.Request">
            <summary>
            Base class for requests for methods which return <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Request`1">
            <summary>
            Base class for requests for methods which return <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </summary>
            <typeparam name="TResult">
            The underlying result type.
            </typeparam>
        </member>
        <member name="M:Orleans.Runtime.Request`1.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.Request`1.InvokeInner">
            <summary>
            Invokes the request against the target.
            </summary>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Orleans.Runtime.TaskRequest`1">
            <summary>
            Base class for requests for methods which return <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">
            The underlying result type.
            </typeparam>
        </member>
        <member name="M:Orleans.Runtime.TaskRequest`1.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.TaskRequest`1.InvokeInner">
            <summary>
            Invokes the request against the target.
            </summary>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Orleans.Runtime.TaskRequest">
            <summary>
            Base class for requests for methods which return <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TaskRequest.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.TaskRequest.InvokeInner">
            <summary>
            Invokes the request against the target.
            </summary>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Orleans.Runtime.VoidRequest">
            <summary>
            Base class for requests for void-returning methods.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.VoidRequest.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.VoidRequest.InvokeInner">
            <summary>
            Invokes the request against the target.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceNotBoundException">
            <summary>
            Indicates that a <see cref="T:Orleans.Runtime.GrainReference"/> was not bound to the runtime before being used.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceNotBoundException.#ctor(Orleans.Runtime.GrainReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceNotBoundException"/> class.
            </summary>
            <param name="grainReference">The unbound grain reference.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceNotBoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceNotBoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceNotBoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceNotBoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceNotBoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainReferenceNotBoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Runtime.IAddressable">
            <summary>
            Marker interface for addressable endpoints, such as grains, observers, and other system-internal addressable endpoints
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainCancellationTokenRuntime">
            <summary>
            Functionality required by <see cref="T:Orleans.GrainCancellationToken"/> and <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainCancellationTokenRuntime.Cancel(System.Guid,System.Threading.CancellationTokenSource,System.Collections.Concurrent.ConcurrentDictionary{Orleans.Runtime.GrainId,Orleans.Runtime.GrainReference})">
            <summary>
            Cancels the <see cref="T:Orleans.GrainCancellationToken"/> with the provided id.
            </summary>
            <param name="id">The grain cancellation token id.</param>
            <param name="tokenSource">The grain cancellation token source being canceled.</param>
            <param name="grainReferences">The grain references which are observing the cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainExtension">
            <summary>
            Marker interface for grain extensions, used by internal runtime extension endpoints.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainReferenceRuntime">
            <summary>
            Runtime logic for <see cref="T:Orleans.Runtime.GrainReference"/>s to be usable.
            This service is not meant to be used directly by user code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.InvokeMethodAsync``1(Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IInvokable,Orleans.CodeGeneration.InvokeMethodOptions)">
            <summary>
            Invokes the specified method on the provided grain interface.
            </summary>
            <typeparam name="T">The underlying return type of the method.</typeparam>
            <param name="reference">The grain reference.</param>
            <param name="request">The method description.</param>
            <param name="options">The invocation options.</param>
            <returns>The result of invocation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.InvokeMethodAsync(Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IInvokable,Orleans.CodeGeneration.InvokeMethodOptions)">
            <summary>
            Invokes the specified method on the provided grain interface.
            </summary>
            <param name="reference">The grain reference.</param>
            <param name="request">The method description.</param>
            <param name="options">The invocation options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the operation</returns>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.InvokeMethod(Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IInvokable,Orleans.CodeGeneration.InvokeMethodOptions)">
            <summary>
            Invokes the specified void-returning method on the provided grain interface without waiting for a response.
            </summary>
            <param name="reference">The grain reference.</param>
            <param name="request">The method description.</param>
            <param name="options">The invocation options.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Converts the provided <paramref name="grain"/> to the provided <paramref name="interfaceType"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="interfaceType">The resulting interface type.</param>
            <returns>A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainRuntime">
            <summary>
            The gateway of the <see cref="T:Orleans.Grain"/> to the Orleans runtime. The <see cref="T:Orleans.Grain"/> should only interact with the runtime through this interface.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.SiloIdentity">
            <summary>
            Gets a unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.SiloAddress">
            <summary>
            Gets the silo address associated with this instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.GrainFactory">
            <summary>
            Gets the grain factory.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.TimerRegistry">
            <summary>
            Gets the timer registry.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainRuntime.DeactivateOnIdle(Orleans.Runtime.IGrainContext)">
            <summary>
            Deactivates the provided grain when it becomes idle.
            </summary>
            <param name="grainContext">The grain context.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainRuntime.DelayDeactivation(Orleans.Runtime.IGrainContext,System.TimeSpan)">
            <summary>
            Delays idle activation collection of the provided grain due to inactivity until at least the specified time has elapsed.
            </summary>
            <param name="grainContext">The grain context.</param>
            <param name="timeSpan">The time to delay idle activation collection for.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainRuntime.GetStorage``1(Orleans.Runtime.IGrainContext)">
            <summary>
            Gets grain storage for the provided grain.
            </summary>
            <typeparam name="TGrainState">The grain state type.</typeparam>
            <param name="grainContext">The grain context.</param>
            <returns>The grain storage for the provided grain.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainTimer">
            <summary>
            Represents a grain timer and its functionality.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainTimer.GetCurrentlyExecutingTickTask">
            <summary>
            Gets the currently executing grain timer task.
            </summary>
            <returns>The currently executing grain timer task.</returns>
        </member>
        <member name="T:Orleans.Runtime.MembershipVersion">
            <summary>
            Identifies the version of a cluster membership configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipVersion"/> struct.
            </summary>
            <param name="version">The underlying version.</param>
        </member>
        <member name="P:Orleans.Runtime.MembershipVersion.Value">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipVersion.MinValue">
            <summary>
            Gets the minimum possible version.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.CompareTo(Orleans.Runtime.MembershipVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.Equals(Orleans.Runtime.MembershipVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_Equality(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_Inequality(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_GreaterThanOrEqual(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_LessThanOrEqual(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_GreaterThan(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersion.op_LessThan(Orleans.Runtime.MembershipVersion,Orleans.Runtime.MembershipVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.MembershipVersionConverter">
            <summary>
            Functionality for converting <see cref="T:Orleans.Runtime.MembershipVersion"/> instances to and from JSON.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipVersionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.MembershipVersionConverter.Write(System.Text.Json.Utf8JsonWriter,Orleans.Runtime.MembershipVersion,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.RequestContext">
            <summary>
            This class holds information regarding the request currently being processed.
            It is explicitly intended to be available to application code.
            </summary>
            <remarks>
            <para>
            The request context is represented as a property bag.
            Some values are provided by default; others are derived from messages headers in the
            request that led to the current processing.
            </para>
            <para>
            Information stored in <see cref="T:Orleans.Runtime.RequestContext"/> is propagated from Orleans clients to Orleans grains automatically by the Orleans runtime.
            </para>
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.AllowCallChainReentrancy">
            <summary>
            Allows reentrancy for subsequent calls issued before the returned <see cref="T:Orleans.Runtime.RequestContext.ReentrancySection"/> is disposed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.SuppressCallChainReentrancy">
            <summary>
            Suppresses reentrancy for subsequent calls issued before the returned <see cref="T:Orleans.Runtime.RequestContext.ReentrancySection"/> is disposed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Get(System.String)">
            <summary>
            Retrieves a value from the request context.
            </summary>
            <param name="key">The key for the value to be retrieved.</param>
            <returns>
            The value currently associated with the provided key, otherwise <see langword="null"/> if no data is present for that key.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Set(System.String,System.Object)">
            <summary>
            Sets a value in the request context.
            </summary>
            <param name="key">The key for the value to be updated or added.</param>
            <param name="value">The value to be stored into the request context.</param>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Remove(System.String)">
            <summary>
            Remove a value from the request context.
            </summary>
            <param name="key">The key for the value to be removed.</param>
            <returns><see langword="true"/> if the value was previously in the request context and has now been removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Clear">
            <summary>
            Clears the current request context.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.Keys">
            <summary>
            Gets the collection of keys for the values currently in the request context.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.Entries">
            <summary>
            Gets the collection of entries currently in the request context.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.RuntimeContext">
            <summary>
            Functionality for managing the current grain context.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.RuntimeContext._threadLocalContext">
            <summary>
            The thread-local context.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeContext.Current">
            <summary>
            Gets the current grain context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeContext.SetExecutionContext(Orleans.Runtime.IGrainContext)">
            <summary>
            Sets the current grain context.
            </summary>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Orleans.Runtime.RuntimeContext.SetExecutionContext(Orleans.Runtime.IGrainContext,Orleans.Runtime.IGrainContext@)">
            <summary>
            Sets the current grain context.
            </summary>
            <param name="newContext">The new context.</param>
            <param name="existingContext">The existing context.</param>
        </member>
        <member name="M:Orleans.Runtime.RuntimeContext.ResetExecutionContext">
            <summary>
            Resets the current grain context.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Utils">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utils.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Boolean)">
            <summary>
            Returns a human-readable text string that describes an IEnumerable collection of objects.
            </summary>
            <typeparam name="T">The type of the list elements.</typeparam>
            <param name="collection">The IEnumerable to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use.</param>
            <param name="putInBrackets">Puts elements within brackets</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            elements with square brackets and separating them with commas.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.DictionaryToString``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String},System.String)">
            <summary>
            Returns a human-readable text string that describes a dictionary that maps objects to objects.
            </summary>
            <typeparam name="T1">The type of the dictionary keys.</typeparam>
            <typeparam name="T2">The type of the dictionary elements.</typeparam>
            <param name="dict">The dictionary to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use. If none specified, the elements should appear separated by a new line.</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            pairs with square brackets and separating them with commas.
            Each key-value pair is represented as the string description of the key followed by
            the string description of the value,
            separated by " -> ", and enclosed in curly brackets.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToIPEndPoint(System.Uri)">
            <summary>
            Parse a Uri as an IPEndpoint.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayAddress(System.Uri)">
            <summary>
            Parse a Uri as a Silo address, excluding the generation identifier.
            </summary>
            <param name="uri">The input Uri</param>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(System.Net.IPEndPoint)">
            <summary>
            Represent an IP end point in the gateway URI format..
            </summary>
            <param name="ep">The input IP end point</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(Orleans.Runtime.SiloAddress)">
            <summary>
            Represent a silo address in the gateway URI format.
            </summary>
            <param name="address">The input silo address</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodOptions">
            <summary>
            Invoke options for an <c>InvokeMethodRequest</c>
            </summary>
            <remarks>
            These flag values are used in Orleans generated invoker code, and should not be altered. </remarks>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.None">
            <summary>No options defined.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.OneWay">
            <summary>Invocation is one-way with no feedback on whether the call succeeds or fails.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.ReadOnly">
            <summary>Invocation is read-only and can interleave with other read-only invocations.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.AlwaysInterleave">
            <summary>The invocation can interleave with any other request type, including write requests.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.Unordered">
            <summary>Invocation does not care about ordering and can consequently be optimized.</summary>
        </member>
        <member name="T:Orleans.CodeGeneration.VersionAttribute">
            <summary>
            The VersionAttribute allows to specify the version number of the interface
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.VersionAttribute.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.VersionAttribute"/> class.
            </summary>
            <param name="version">
            The version.
            </param>
        </member>
        <member name="P:Orleans.CodeGeneration.VersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.VersionAttribute.Orleans#Metadata#IGrainInterfacePropertiesProviderAttribute#Populate(System.IServiceProvider,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.IOnDeserialized">
            <summary>
            Indicates that a class is to be notified when it has been deserialized.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IOnDeserialized.OnDeserialized(Orleans.Serialization.DeserializationContext)">
            <summary>
            Notifies this instance that it has been fully deserialized.
            </summary>
            <param name="context">The serializer context.</param>
        </member>
        <member name="T:Orleans.Concurrency.ReadOnlyAttribute">
            <summary>
            The ReadOnly attribute is used to mark methods that do not modify the state of a grain.
            <para>
            Marking methods as ReadOnly allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ReentrantAttribute">
            <summary>
            The Reentrant attribute is used to mark grain implementation classes that allow request interleaving within a task.
            <para>
            This is an advanced feature and should not be used unless the implications are fully understood.
            That said, allowing request interleaving allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.ReentrantAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Concurrency.UnorderedAttribute">
            <summary>
            The Unordered attribute is used to mark grain interface in which the delivery order of
            messages is not significant.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.StatelessWorkerAttribute">
            <summary>
            The StatelessWorker attribute is used to mark grain class in which there is no expectation
            of preservation of grain state between requests and where multiple activations of the same grain are allowed to be created by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.StatelessWorkerAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Concurrency.StatelessWorkerAttribute"/> class.
            </summary>
            <param name="maxLocalWorkers">
            The maximum local workers.
            </param>
        </member>
        <member name="M:Orleans.Concurrency.StatelessWorkerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Concurrency.StatelessWorkerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.StatelessWorkerAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Concurrency.AlwaysInterleaveAttribute">
            <summary>
            The AlwaysInterleaveAttribute attribute is used to mark methods that can interleave with any method, including write (non ReadOnly) requests.
            </summary>
            <remarks>
            Note that this attribute is applied to method declaration in the grain interface,
            and not to the method in the implementation class itself.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.MayInterleaveAttribute">
            <summary>
            The MayInterleaveAttribute attribute is used to mark classes
            that want to control request interleaving via supplied method callback.
            </summary>
            <remarks>
            The callback method name should point to a public static function declared on the same class
            and having the following signature: <c>public static bool MayInterleave(IInvokable req)</c>
            </remarks>
        </member>
        <member name="M:Orleans.Concurrency.MayInterleaveAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Concurrency.MayInterleaveAttribute"/> class.
            </summary>
            <param name="callbackMethodName">
            The callback method name. This should resolve to a method with the 
            following signature: <c>public static bool NameOfMethod(IInvokable req)</c>
            </param>
        </member>
        <member name="P:Orleans.Concurrency.MayInterleaveAttribute.CallbackMethodName">
            <summary>
            Gets the name of the callback method
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.MayInterleaveAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Concurrency.OneWayAttribute">
            <summary>
            Indicates that a method on a grain interface is one-way and that no response message will be sent to the caller.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.Immutable`1">
            <summary>
            Wrapper class for carrying immutable data.
            </summary>
            <remarks>
            Objects that are known to be immutable are given special fast-path handling by the Orleans serializer 
            -- which in a nutshell allows the DeepCopy step to be skipped during message sends where the sender and receiver grain are in the same silo.
            
            One very common usage pattern for Immutable is when passing byte[] parameters to a grain. 
            If a program knows it will not alter the contents of the byte[] (for example, if it contains bytes from a static image file read from disk)
            then considerable savings in memory usage and message throughput can be obtained by marking that byte[] argument as <c>Immutable</c>.
            </remarks>
            <typeparam name="T">Type of data to be wrapped by this Immutable</typeparam>
        </member>
        <member name="F:Orleans.Concurrency.Immutable`1.Value">
            <summary> Return reference to the original value stored in this Immutable wrapper. </summary>
        </member>
        <member name="M:Orleans.Concurrency.Immutable`1.#ctor(`0)">
            <summary>
            Constructor to wrap the specified data object in new Immutable wrapper.
            </summary>
            <param name="value">Value to be wrapped and marked as immutable.</param>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableExtensions">
            <summary>
            Utility class to add the .AsImmutable method to all objects.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.ImmutableExtensions.AsImmutable``1(``0)">
            <summary>
            Extension method to return this value wrapped in <c>Immutable</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be wrapped.</param>
            <returns>Immutable wrapper around the original object.</returns>
            <seealso cref="T:Orleans.Concurrency.Immutable`1"/>"/>
        </member>
        <member name="T:Orleans.DeactivationReason">
            <summary>
            Represents a reason for initiating grain deactivation.
            </summary>
        </member>
        <member name="M:Orleans.DeactivationReason.#ctor(Orleans.DeactivationReasonCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.DeactivationReason"/> struct.
            </summary>
            <param name="code">
            The code identifying the deactivation reason.
            </param>
            <param name="text">
            A descriptive reason for the deactivation.
            </param>
        </member>
        <member name="M:Orleans.DeactivationReason.#ctor(Orleans.DeactivationReasonCode,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.DeactivationReason"/> struct.
            </summary>
            <param name="code">
            The code identifying the deactivation reason.
            </param>
            <param name="exception">
            The exception which resulted in deactivation.
            </param>
            <param name="text">
            A descriptive reason for the deactivation.
            </param>
        </member>
        <member name="P:Orleans.DeactivationReason.Description">
            <summary>
            Gets the descriptive reason for the deactivation.
            </summary>
        </member>
        <member name="P:Orleans.DeactivationReason.ReasonCode">
            <summary>
            Gets the reason for deactivation.
            </summary>
        </member>
        <member name="P:Orleans.DeactivationReason.Exception">
            <summary>
            Gets the exception which resulted in deactivation.
            </summary>
        </member>
        <member name="T:Orleans.Grain">
            <summary>
            The abstract base class for all grain classes.
            </summary>
        </member>
        <member name="P:Orleans.Grain.GrainFactory">
            <summary>
            Gets an object which can be used to access other grains. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="P:Orleans.Grain.ServiceProvider">
            <summary>
            Gets the IServiceProvider managed by the runtime. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of Grain) do not have to add a constructor.
            Client code should use the GrainFactory property to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor(Orleans.Runtime.IGrainContext,Orleans.Runtime.IGrainRuntime)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity and IGrainRuntime with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="P:Orleans.Grain.IdentityString">
            <summary>
            String representation of grain's SiloIdentity including type and primary key.
            </summary>
        </member>
        <member name="P:Orleans.Grain.RuntimeIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="M:Orleans.Grain.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a timer to send periodic callbacks to this grain.
            </summary>
            <remarks>
            <para>
            This timer will not prevent the current grain from being deactivated.
            If the grain is deactivated, then the timer will be discarded.
            </para>
            <para>
            Until the Task returned from the asyncCallback is resolved,
            the next timer tick will not be scheduled.
            That is to say, timer callbacks never interleave their turns.
            </para>
            <para>
            The timer may be stopped at any time by calling the <c>Dispose</c> method
            on the timer handle returned from this call.
            </para>
            <para>
            Any exceptions thrown by or faulted Task's returned from the asyncCallback
            will be logged, but will not prevent the next timer tick from being queued.
            </para>
            </remarks>
            <param name="asyncCallback">Callback function to be invoked when timer ticks.</param>
            <param name="state">State object that will be passed as argument when calling the asyncCallback.</param>
            <param name="dueTime">Due time for first timer tick.</param>
            <param name="period">Period of subsequent timer ticks.</param>
            <returns>Handle for this Timer.</returns>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Orleans.Grain.DeactivateOnIdle">
            <summary>
            Deactivate this activation of the grain after the current grain method call is completed.
            This call will mark this activation of the current grain to be deactivated and removed at the end of the current method.
            The next call to this grain will result in a different activation to be used, which typical means a new activation will be created automatically by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.Grain.MigrateOnIdle">
            <summary>
            Starts an attempt to migrating this instance to another location.
            Migration captures the current <see cref="T:Orleans.Runtime.RequestContext"/>, making it available to the activation's placement director so that it can consider it when selecting a new location.
            Migration will occur asynchronously, when no requests are executing, and will not occur if the activation's placement director does not select an alternative location.
            </summary>
        </member>
        <member name="M:Orleans.Grain.DelayDeactivation(System.TimeSpan)">
            <summary>
            Delay Deactivation of this activation at least for the specified time duration.
            A positive <c>timeSpan</c> value means “prevent GC of this activation for that time span”.
            A negative <c>timeSpan</c> value means “cancel the previous setting of the DelayDeactivation call and make this activation behave based on the regular Activation Garbage Collection settings”.
            DeactivateOnIdle method would undo / override any current “keep alive” setting,
            making this grain immediately available for deactivation.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnActivateAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
            <param name="cancellationToken">A cancellation token which signals when activation is being canceled.</param>
        </member>
        <member name="M:Orleans.Grain.OnDeactivateAsync(Orleans.DeactivationReason,System.Threading.CancellationToken)">
            <summary>
            This method is called at the beginning of the process of deactivating a grain.
            </summary>
            <param name="reason">The reason for deactivation. Informational only.</param>
            <param name="cancellationToken">A cancellation token which signals when deactivation should complete promptly.</param>
        </member>
        <member name="T:Orleans.Grain`1">
            <summary>
            Base class for a Grain with declared persistent state.
            </summary>
            <typeparam name="TGrainState">The class of the persistent state object</typeparam>
        </member>
        <member name="F:Orleans.Grain`1._storage">
            <summary>
            The underlying state storage.
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Grain`1"/> class.
            </summary>
            <remarks>
            This constructor should never be invoked. We expose it so that client code (subclasses of this class) do not have to add a constructor.
            Client code should use the GrainFactory to get a reference to a Grain.
            </remarks>
        </member>
        <member name="M:Orleans.Grain`1.#ctor(Orleans.Core.IStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Grain`1"/> class.
            </summary>
            <param name="storage">
            The storage implementation.
            </param>
            <remarks>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity, IGrainRuntime and State with test doubles (mocks/stubs).
            </remarks>
        </member>
        <member name="P:Orleans.Grain`1.State">
            <summary>
            Gets or sets the grain state.
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.ClearStateAsync">
            <summary>
            Clears the current grain state data from backing store.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Grain`1.WriteStateAsync">
            <summary>
            Write the current grain state data into the backing store.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Grain`1.ReadStateAsync">
            <summary>
            Reads grain state from backing store, updating <see cref="P:Orleans.Grain`1.State"/>.
            </summary>
            <remarks>
            Any previous contents of the grain state data will be overwritten.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="T:Orleans.GrainExtensions">
            <summary>
            Extension methods for grains.
            </summary>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference(Orleans.Runtime.IAddressable)">
            <summary>
            Returns a reference to the provided grain.
            </summary>
            <param name="grain">The grain to create a reference for.</param>
            <returns>A reference to the provided grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Returns a typed reference to the provided grain.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to convert.</param>
            <remarks>
            If the provided value is a grain instance, this will create a reference which implements the provided interface.
            If the provided value is already grain reference, this will create a new reference which implements the provided interface.
            </remarks>
            <returns>A strongly typed reference to the provided grain which implements <typeparamref name="TGrainInterface"/>.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Returns a typed reference to the provided grain.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to convert.</param>
            <remarks>
            This method is equivalent to <see cref="M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)"/>.
            If the provided value is a grain instance, this will create a reference which implements the provided interface.
            If the provided value is already grain reference, this will create a new reference which implements the provided interface.
            </remarks>
            <returns>A strongly typed reference to the provided grain which implements <typeparamref name="TGrainInterface"/>.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Returns a typed reference to the provided grain.
            </summary>
            <param name="grain">The grain to convert.</param>
            <param name="interfaceType">The type of the grain interface.</param>
            <remarks>
            If the provided value is a grain instance, this will create a reference which implements the provided interface.
            If the provided value is already grain reference, this will create a new reference which implements the provided interface.
            </remarks>
            <returns>A strongly typed reference to the provided grain which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Returns a typed reference to the provided grain.
            </summary>
            <param name="grain">The grain to convert.</param>
            <param name="interfaceType">The type of the grain interface.</param>
            <remarks>
            This method is equivalent to <see cref="M:Orleans.GrainExtensions.AsReference(Orleans.Runtime.IAddressable,System.Type)"/>.
            If the provided value is a grain instance, this will create a reference which implements the provided interface.
            If the provided value is already grain reference, this will create a new reference which implements the provided interface.
            </remarks>
            <returns>A strongly typed reference to the provided grain which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetGrainId(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the grain id corresponding to the provided grain.
            </summary>
            <param name="grain">The grain</param>
            <returns>The grain id corresponding to the provided grain.</returns>
            <exception cref="T:System.ArgumentException">The provided value has the wrong type or has no id.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetWrongGrainTypeErrorMessage(Orleans.Runtime.IAddressable)">
            <summary>
            Gets the exception message which is thrown when a grain argument has a non-supported implementation type.
            </summary>
            <param name="grain">The argument.</param>
            <returns>The exception message which is thrown when a grain argument has a non-supported implementation type.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns whether part of the primary key is of type <see langword="long"/>.
            </summary>
            <param name="grain">The target grain.</param>
            <exception cref="T:System.InvalidOperationException">The provided grain does not have a <see cref="T:System.Int64"/>-based key.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the <see langword="long"/> representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output parameter to return the extended key part of the grain primary key, if extended primary key was provided for that grain.</param>
            <returns>A <see langword="long"/> representing the primary key for this grain.</returns>
            <exception cref="T:System.InvalidOperationException">The provided grain does not have a <see cref="T:System.Int64"/>-based key.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the <see langword="long"/> representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A <see langword="long"/> representing the primary key for this grain.</returns>
            <exception cref="T:System.InvalidOperationException">The provided grain does not have a <see cref="T:System.Int64"/>-based key.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the <see cref="T:System.Guid"/> representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output parameter to return the extended key part of the grain primary key, if extended primary key was provided for that grain.</param>
            <returns>A <see cref="T:System.Guid"/> representing the primary key for this grain.</returns>
            <exception cref="T:System.InvalidOperationException">The provided grain does not have a <see cref="T:System.Guid"/>-based key.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the <see cref="T:System.Guid"/> representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A <see cref="T:System.Guid"/> representing the primary key for this grain.</returns>
            <exception cref="T:System.InvalidOperationException">The provided grain does not have a <see cref="T:System.Guid"/>-based key.</exception>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the <see langword="string"/> primary key of the grain.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A <see langword="string"/> representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.ThrowGrainNull">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> indicating that the grain argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException">The grain argument is null.</exception>
        </member>
        <member name="T:Orleans.IConfigurationValidator">
            <summary>
            Describes a configuration validator which is called during client and silo initialization.
            </summary>
        </member>
        <member name="M:Orleans.IConfigurationValidator.ValidateConfiguration">
            <summary>
            Validates system configuration and throws an exception if configuration is not valid.
            </summary>
        </member>
        <member name="T:Orleans.IGrain">
            <summary>
            Marker interface for grains
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Guid"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Int64"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithStringKey">
            <summary>
            Marker interface for grains with <see cref="T:System.String"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainBase">
            <summary>
            Interface for grain implementations
            </summary>
        </member>
        <member name="P:Orleans.IGrainBase.GrainContext">
            <summary>
            Gets the grain context.
            </summary>
        </member>
        <member name="M:Orleans.IGrainBase.OnActivateAsync(System.Threading.CancellationToken)">
            <summary>
            Method overridden by grain implementations to handle activation.
            </summary>
            <param name="token">The cancellation token used to signify that activation should abort promptly.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the operation.</returns>
        </member>
        <member name="M:Orleans.IGrainBase.OnDeactivateAsync(Orleans.DeactivationReason,System.Threading.CancellationToken)">
            <summary>
            Method overridden by grain implementations to handle deactivation.
            </summary>
            <param name="reason">The reason for deactivation.</param>
            <param name="token">The cancellation token used to signify that deactivation should complete promptly.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the operation.</returns>
        </member>
        <member name="T:Orleans.GrainBaseExtensions">
            <summary>
            Helper methods for <see cref="T:Orleans.IGrainBase"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.GrainBaseExtensions.DeactivateOnIdle(Orleans.IGrainBase)">
            <summary>
            Deactivate this grain activation after the current grain method call is completed.
            This call will mark this activation of the current grain to be deactivated and removed at the end of the current method.
            The next call to this grain will result in a different activation to be used, which typical means a new activation will be created automatically by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.GrainBaseExtensions.MigrateOnIdle(Orleans.IGrainBase)">
            <summary>
            Starts an attempt to migrating this instance to another location.
            Migration captures the current <see cref="T:Orleans.Runtime.RequestContext"/>, making it available to the activation's placement director so that it can consider it when selecting a new location.
            Migration will occur asynchronously, when no requests are executing, and will not occur if the activation's placement director does not select an alternative location.
            </summary>
        </member>
        <member name="T:Orleans.DeactivationReasonCode">
            <summary>
            An informational reason code for deactivation.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.None">
            <summary>
            No reason provided.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ShuttingDown">
            <summary>
            The process is currently shutting down.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ActivationFailed">
            <summary>
            Activation of the grain failed.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.InternalFailure">
            <summary>
            This activation is affected by an internal failure.
            </summary>
            <remarks>
            This could be caused by the failure of a process hosting this activation's grain directory partition, for example.
            </remarks>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ActivationIdle">
            <summary>
            This activation is idle.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ActivationUnresponsive">
            <summary>
            This activation is unresponsive to commands or requests.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.DuplicateActivation">
            <summary>
            Another instance of this grain has been activated.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.IncompatibleRequest">
            <summary>
            This activation received a request which cannot be handled by the locally running process.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ApplicationError">
            <summary>
            An application error occurred.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.ApplicationRequested">
            <summary>
            The application requested that this activation deactivate.
            </summary>
        </member>
        <member name="F:Orleans.DeactivationReasonCode.Migrating">
            <summary>
            This activation is migrating to a new location.
            </summary>
        </member>
        <member name="T:Orleans.GrainCallFilterDelegate">
            <summary>
            A delegate used to intercept invocation of a request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.OutgoingGrainCallFilterDelegate">
            <summary>
            A delegate used to intercept an incoming request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.IncomingGrainCallFilterDelegate">
            <summary>
            A delegate used to intercept an outgoing request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.IGrainCallContext">
            <summary>
            Represents a method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Grain">
            <summary>
            Gets the grain being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.SourceId">
            <summary>
            Gets the identity of the source, if available.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.TargetId">
            <summary>
            Gets the identity of the target.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.InterfaceType">
            <summary>
            Gets the type of the interface being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.InterfaceName">
            <summary>
            Gets the name of the interface being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.MethodName">
            <summary>
            Gets the name of the method being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.InterfaceMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> for the interface method being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="M:Orleans.IGrainCallContext.Invoke">
            <summary>
            Invokes the request.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the invocation.
            </returns>
        </member>
        <member name="T:Orleans.IIncomingGrainCallContext">
            <summary>
            Represents an incoming method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IIncomingGrainCallContext.TargetContext">
            <summary>
            Gets the grain context of the target.
            </summary>
        </member>
        <member name="P:Orleans.IIncomingGrainCallContext.ImplementationMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> for the implementation method being invoked.
            </summary>
        </member>
        <member name="T:Orleans.IOutgoingGrainCallContext">
            <summary>
            Represents an outgoing method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IOutgoingGrainCallContext.SourceContext">
            <summary>
            Gets the grain context of the sender.
            </summary>
        </member>
        <member name="T:Orleans.IIncomingGrainCallFilter">
            <summary>
            Interface for incoming grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.IIncomingGrainCallFilter.Invoke(Orleans.IIncomingGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.IOutgoingGrainCallFilter">
            <summary>
            Interface for outgoing grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.IOutgoingGrainCallFilter.Invoke(Orleans.IOutgoingGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.IGrainFactory">
            <summary>
            Functionality for creating references to grains.
            </summary>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface type.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface type.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface type.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface type.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface type.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Creates a reference to the provided <paramref name="obj"/>.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The object to create a reference to.</param>
            <returns>The reference to <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Deletes the provided object reference.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The reference being deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(System.Type,System.Guid)">
            <summary>
            Returns a reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </summary>
            <param name="grainInterfaceType">
            The grain interface type which the returned grain reference must implement.
            </param>
            <param name="grainPrimaryKey">
            The primary key of the grain
            </param>
            <returns>
            A reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(System.Type,System.Int64)">
            <summary>
            Returns a reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </summary>
            <param name="grainInterfaceType">
            The grain interface type which the returned grain reference must implement.
            </param>
            <param name="grainPrimaryKey">
            The primary key of the grain
            </param>
            <returns>
            A reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(System.Type,System.String)">
            <summary>
            Returns a reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </summary>
            <param name="grainInterfaceType">
            The grain interface type which the returned grain reference must implement.
            </param>
            <param name="grainPrimaryKey">
            The primary key of the grain
            </param>
            <returns>
            A reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(System.Type,System.Guid,System.String)">
            <summary>
            Returns a reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </summary>
            <param name="grainInterfaceType">
            The grain interface type which the returned grain reference must implement.
            </param>
            <param name="grainPrimaryKey">
            The primary key of the grain
            </param>
            <param name="keyExtension">
            The grain key extension component.
            </param>
            <returns>
            A reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(System.Type,System.Int64,System.String)">
            <summary>
            Returns a reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </summary>
            <param name="grainInterfaceType">
            The grain interface type which the returned grain reference must implement.
            </param>
            <param name="grainPrimaryKey">
            The primary key of the grain
            </param>
            <param name="keyExtension">
            The grain key extension component.
            </param>
            <returns>
            A reference to the grain which is the primary implementation of the provided interface type and has the provided primary key.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <summary>
            Returns a reference to the specified grain which implements the specified interface.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <typeparam name="TGrainInterface">
            The grain interface type which the returned grain reference must implement.
            </typeparam>
            <returns>
            A reference to the specified grain which implements the specified interface.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(Orleans.Runtime.GrainId)">
            <summary>
            Returns an untyped reference for the provided grain id.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <returns>
            An untyped reference for the provided grain id.
            </returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain(Orleans.Runtime.GrainId,Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Returns a reference for the provided grain id which implements the specified interface type.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
            <param name="interfaceType">
            The interface type which the returned grain reference must implement.
            </param>
            <returns>
            A reference for the provided grain id which implements the specified interface type.
            </returns>
        </member>
        <member name="T:Orleans.IGrainObserver">
            <summary>
            A marker interface for grain observers.
            Observers are used to receive notifications from grains; that is, they represent the subscriber side of a 
            publisher/subscriber interface.
            </summary>
        </member>
        <member name="T:Orleans.Core.Internal.ICallChainReentrantGrainContext">
            <summary>
            Provides functionality for entering and exiting sections of code within a grain during which requests bearing the same <see cref="P:Orleans.Runtime.RequestContext.ReentrancyId"/> are allowed to re-enter the grain.
            </summary>
        </member>
        <member name="M:Orleans.Core.Internal.ICallChainReentrantGrainContext.OnEnterReentrantSection(System.Guid)">
            <summary>
            Marks the beginning of a section of code within a grain during which requests bearing the same <see cref="P:Orleans.Runtime.RequestContext.ReentrancyId"/> are allowed to re-enter the grain.
            </summary>
        </member>
        <member name="M:Orleans.Core.Internal.ICallChainReentrantGrainContext.OnExitReentrantSection(System.Guid)">
            <summary>
            Marks the end of a section of code within a grain during which requests bearing the same <see cref="P:Orleans.Runtime.RequestContext.ReentrancyId"/> are allowed to re-enter the grain.
            </summary>
        </member>
        <member name="T:Orleans.Core.Internal.IGrainManagementExtension">
            <summary>
            Provides functionality for performing management operations on a grain activation.
            </summary>
        </member>
        <member name="M:Orleans.Core.Internal.IGrainManagementExtension.DeactivateOnIdle">
            <summary>
            Deactivates the current instance once it becomes idle.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the method call.</returns>
        </member>
        <member name="M:Orleans.Core.Internal.IGrainManagementExtension.MigrateOnIdle">
            <summary>
            Attempts to migrate the current instance to a new location once it becomes idle.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the method call.</returns>
        </member>
        <member name="T:Orleans.Core.IStorage">
            <summary>
            Provides method for operating on grain storage.
            </summary>
        </member>
        <member name="P:Orleans.Core.IStorage.Etag">
            <summary>
            Gets the ETag.
            </summary>
            <remarks>
            An ETag, or entity tag, is a value used to prevent concurrent writes where one or more of those writes has not first observed the most recent operation.
            </remarks>
        </member>
        <member name="P:Orleans.Core.IStorage.RecordExists">
            <summary>
            Gets a value indicating whether the record already exists.
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.ClearStateAsync">
            <summary>
            Clears the grain state.
            </summary>
            <remarks>
            This will usually mean the state record is deleted from backing store, but the specific behavior is defined by the storage provider instance configured for this grain.
            If the Etag does not match what is present in the backing store, then this operation will fail; Set <see cref="P:Orleans.Core.IStorage.Etag"/> to <see langword="null"/> to indicate "always delete".
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Core.IStorage.WriteStateAsync">
            <summary>
            Writes grain state to storage.
            </summary>
            <remarks>
            If the Etag does not match what is present in the backing store, then this operation will fail; Set <see cref="P:Orleans.Core.IStorage.Etag"/> to <see langword="null"/> to indicate "always delete".
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Core.IStorage.ReadStateAsync">
            <summary>
            Reads grain state from storage.
            </summary>
            <remarks>
            Any previous contents of the grain state data will be overwritten.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="T:Orleans.Core.IStorage`1">
            <summary>
            Provides method for operating on grain state.
            </summary>
        </member>
        <member name="P:Orleans.Core.IStorage`1.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.GrainDirectoryAttribute">
            <summary>
            Specifies the name of the grain directory provider to use for the grain class which this attribute is applied to.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryAttribute.DEFAULT_GRAIN_DIRECTORY">
            <summary>
            The default grain directory.
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.GrainDirectoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainDirectory.GrainDirectoryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.GrainDirectoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainDirectory.GrainDirectoryAttribute"/> class.
            </summary>
            <param name="grainDirectoryName">
            The grain directory provider name.
            </param>
        </member>
        <member name="P:Orleans.GrainDirectory.GrainDirectoryAttribute.GrainDirectoryName">
            <summary>
            Gets or sets the grain directory provider name.
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.GrainDirectoryAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainDirectory">
            <summary>
            Interface for grain directory implementations
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.Register(Orleans.Runtime.GrainAddress)">
            <summary>
            Register a <see cref="T:Orleans.Runtime.GrainAddress"/> entry in the directory.
            Only one <see cref="T:Orleans.Runtime.GrainAddress"/> per <see cref="P:Orleans.Runtime.GrainAddress.GrainId"/> can be registered. If there is already an
            existing entry, the directory will not override it.
            </summary>
            <param name="address">The <see cref="T:Orleans.Runtime.GrainAddress"/> to register</param>
            <returns>The <see cref="T:Orleans.Runtime.GrainAddress"/> that is effectively registered in the directory.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.Register(Orleans.Runtime.GrainAddress,Orleans.Runtime.GrainAddress)">
            <summary>
            Register a <see cref="T:Orleans.Runtime.GrainAddress"/> entry in the directory.
            Only one <see cref="T:Orleans.Runtime.GrainAddress"/> per <see cref="P:Orleans.Runtime.GrainAddress.GrainId"/> can be registered. If there is already an
            existing entry, the directory will not override it.
            </summary>
            <param name="address">The <see cref="T:Orleans.Runtime.GrainAddress"/> to register</param>
            <returns>The <see cref="T:Orleans.Runtime.GrainAddress"/> that is effectively registered in the directory.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.Unregister(Orleans.Runtime.GrainAddress)">
            <summary>
            Unregisters the specified <see cref="T:Orleans.Runtime.GrainAddress"/> entry from the directory.
            </summary>
            <param name="address">
            The <see cref="T:Orleans.Runtime.GrainAddress"/> to unregister.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.Lookup(Orleans.Runtime.GrainId)">
            <summary>
            Lookup for a <see cref="T:Orleans.Runtime.GrainAddress"/> for a given Grain ID.
            </summary>
            <param name="grainId">The Grain ID to lookup</param>
            <returns>The <see cref="T:Orleans.Runtime.GrainAddress"/> entry found in the directory, if any</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.UnregisterSilos(System.Collections.Generic.List{Orleans.Runtime.SiloAddress})">
            <summary>
            Unregisters all grain directory entries which point to any of the specified silos.
            </summary>
            <remarks>
            Can be a No-Op depending on the implementation.
            </remarks>
            <param name="siloAddresses">The silos to be removed from the directory</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.StableHash.ComputeHash(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes a hash digest of the input.
            </summary>
            <param name="data">
            The input data.
            </param>
            <returns>
            A hash digest of the input.
            </returns>
        </member>
        <member name="M:Orleans.StableHash.ComputeHash(System.String)">
            <summary>
            Computes a hash digest of the input.
            </summary>
            <param name="data">
            The input data.
            </param>
            <returns>
            A hash digest of the input.
            </returns>
        </member>
        <member name="T:Orleans.ILifecycleObservable">
            <summary>
            Observable lifecycle.
            Each stage of the lifecycle is observable. All observers will be notified when the stage is reached when starting, and stopping.
            Stages are started in ascending order, and stopped in descending order.
            </summary>
        </member>
        <member name="M:Orleans.ILifecycleObservable.Subscribe(System.String,System.Int32,Orleans.ILifecycleObserver)">
            <summary>
            Subscribe for notification when a stage is reached while starting or stopping.
            </summary>
            <param name="observerName">The name of the observer, for reporting purposes.</param>
            <param name="stage">The stage of to subscribe to.</param>
            <param name="observer">The observer.</param>
            <returns>A disposable that can be disposed of to unsubscribe.</returns>
        </member>
        <member name="T:Orleans.ILifecycleObserver">
            <summary>
            Lifecycle observer used to handle start and stop notification.
            </summary>
        </member>
        <member name="M:Orleans.ILifecycleObserver.OnStart(System.Threading.CancellationToken)">
            <summary>
            Handle start notifications.
            </summary>
            <param name="cancellationToken">
            The cancellation token which indicates that the operation should be aborted promptly when it is canceled.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which represents the operation.
            </returns>
        </member>
        <member name="M:Orleans.ILifecycleObserver.OnStop(System.Threading.CancellationToken)">
            <summary>
            Handle stop notifications.
            </summary>
            <param name="cancellationToken">
            The cancellation token which indicates that the operation should be stopped promptly when it is canceled.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which represents the operation.
            </returns>
        </member>
        <member name="T:Orleans.ILifecycleParticipant`1">
            <summary>
            Provides hook to take part in lifecycle.
            Also may act as a signal interface indicating that an object can take part in lifecycle.
            </summary>
            <typeparam name="TLifecycleObservable">
            The type of lifecycle being observed.
            </typeparam>
        </member>
        <member name="M:Orleans.ILifecycleParticipant`1.Participate(`0)">
            <summary>
            Adds the provided observer as a participant in the lifecycle.
            </summary>
            <param name="observer">
            The observer.
            </param>
        </member>
        <member name="T:Orleans.ILifecycleSubject">
            <summary>
            Both a lifecycle observer and observable lifecycle.
            </summary>
        </member>
        <member name="T:Orleans.LifecycleExtensions">
            <summary>
            Extensions for working with lifecycle observers.
            </summary>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe(Orleans.ILifecycleObservable,System.String,System.Int32,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <param name="observable">The lifecycle observable.</param>
            <param name="observerName">The name of the observer.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="onStart">The delegate called when starting the specified lifecycle stage.</param>
            <param name="onStop">Teh delegate to be called when stopping the specified lifecycle stage.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe(Orleans.ILifecycleObservable,System.String,System.Int32,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <param name="observable">The lifecycle observable.</param>
            <param name="observerName">The name of the observer.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="onStart">The delegate called when starting the specified lifecycle stage.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe``1(Orleans.ILifecycleObservable,System.Int32,Orleans.ILifecycleObserver)">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <typeparam name="TObserver">
            The observer type, used for diagnostics.
            </typeparam>
            <param name="observable">The lifecycle observable.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="observer">The observer.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe``1(Orleans.ILifecycleObservable,System.Int32,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <typeparam name="TObserver">
            The observer type, used for diagnostics.
            </typeparam>
            <param name="observable">The lifecycle observable.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="onStart">The delegate called when starting the specified lifecycle stage.</param>
            <param name="onStop">Teh delegate to be called when stopping the specified lifecycle stage.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe``1(Orleans.ILifecycleObservable,System.Int32,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <typeparam name="TObserver">
            The observer type, used for diagnostics.
            </typeparam>
            <param name="observable">The lifecycle observable.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="onStart">The delegate called when starting the specified lifecycle stage.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="M:Orleans.LifecycleExtensions.Subscribe(Orleans.ILifecycleObservable,System.Int32,Orleans.ILifecycleObserver)">
            <summary>
            Creates a disposable subscription to the lifecycle.
            </summary>
            <param name="observable">The lifecycle observable.</param>
            <param name="stage">The stage to participate in.</param>
            <param name="observer">The observer.</param>
            <returns>A <see cref="T:System.IDisposable"/> instance which can be disposed to unsubscribe the observer from the lifecycle.</returns>
        </member>
        <member name="T:Orleans.ErrorCode">
            <summary>
            The set of error codes used by the Orleans runtime libraries for logging errors.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.ClusterManifest">
            <summary>
            Information about types which are available in the cluster.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.ClusterManifest.#ctor(Orleans.Metadata.MajorMinorVersion,System.Collections.Immutable.ImmutableDictionary{Orleans.Runtime.SiloAddress,Orleans.Metadata.GrainManifest})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.ClusterManifest"/> class.
            </summary>
            <param name="version">
            The manifest version.
            </param>
            <param name="silos">
            The silo manifests.
            </param>
        </member>
        <member name="P:Orleans.Metadata.ClusterManifest.Version">
            <summary>
            Gets the version of this instance.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.ClusterManifest.Silos">
            <summary>
            Gets the manifests for each silo in the cluster.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.ClusterManifest.AllGrainManifests">
            <summary>
            Gets all grain manifests.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainInterfaceProperties">
            <summary>
            Information about a communication interface.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceProperties.#ctor(System.Collections.Immutable.ImmutableDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainInterfaceProperties"/> class.
            </summary>
            <param name="values">
            The interface property values.
            </param>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceProperties.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceProperties.ToDetailedString">
            <summary>
            Returns a detailed string representation of this instance.
            </summary>
            <returns>
            A detailed, string representation of this instance.
            </returns>
        </member>
        <member name="T:Orleans.Metadata.WellKnownGrainInterfaceProperties">
            <summary>
            Well-known grain interface property keys.
            </summary>
            <seealso cref="T:Orleans.Metadata.GrainInterfaceProperties"/>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainInterfaceProperties.Version">
            <summary>
            The version of this interface encoded as a decimal integer.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainInterfaceProperties.DefaultGrainType">
            <summary>
            The encoded <see cref="T:Orleans.Runtime.GrainType"/> corresponding to the primary implementation of an interface.
            This is used for resolving a grain type from an interface.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainInterfaceProperties.TypeName">
            <summary>
            The name of the type of this interface. Used for convention-based matching of primary implementations.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.IGrainInterfacePropertiesProvider">
            <summary>
            Provides grain properties.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainInterfacePropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainInterfaceType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds grain interface properties to <paramref name="properties"/>.
            </summary>
            <param name="interfaceType">
            The interface type.
            </param>
            <param name="grainInterfaceType">
            The interface type id.
            </param>
            <param name="properties">
            The properties collection which this calls to this method should populate.
            </param>
        </member>
        <member name="T:Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute">
            <summary>
            Interface for <see cref="T:System.Attribute"/> classes which provide information about a grain interface.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute.Populate(System.IServiceProvider,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds grain interface properties to <paramref name="properties"/>.
            </summary>
            <param name="services">
            The service provider.
            </param>
            <param name="interfaceType">
            The interface type.
            </param>
            <param name="properties">
            The properties collection which this calls to this method should populate.
            </param>
        </member>
        <member name="T:Orleans.Metadata.AttributeGrainInterfacePropertiesProvider">
            <summary>
            Provides grain interface properties from attributes implementing <see cref="T:Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute"/>.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainInterfacePropertiesProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.AttributeGrainInterfacePropertiesProvider"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainInterfacePropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainInterfaceType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Metadata.DefaultGrainTypeAttribute">
            <summary>
            Specifies the default grain type to use when constructing a grain reference for this interface without specifying a grain type.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.DefaultGrainTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.DefaultGrainTypeAttribute"/> class.
            </summary>
            <param name="grainType">
            The grain type.
            </param>
        </member>
        <member name="M:Orleans.Metadata.DefaultGrainTypeAttribute.Orleans#Metadata#IGrainInterfacePropertiesProviderAttribute#Populate(System.IServiceProvider,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Metadata.GrainManifest">
            <summary>
            Information about available grains.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainManifest.#ctor(System.Collections.Immutable.ImmutableDictionary{Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties},System.Collections.Immutable.ImmutableDictionary{Orleans.Runtime.GrainInterfaceType,Orleans.Metadata.GrainInterfaceProperties})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainManifest"/> class.
            </summary>
            <param name="grains">
            The grain properties.
            </param>
            <param name="interfaces">
            The interface properties.
            </param>
        </member>
        <member name="P:Orleans.Metadata.GrainManifest.Interfaces">
            <summary>
            Gets the interfaces available on this silo.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainManifest.Grains">
            <summary>
            Gets the grain types available on this silo.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainProperties">
            <summary>
            Information about a logical grain type <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainProperties.#ctor(System.Collections.Immutable.ImmutableDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainProperties"/> class.
            </summary>
            <param name="values">
            The underlying property collection.
            </param>
        </member>
        <member name="P:Orleans.Metadata.GrainProperties.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainProperties.ToDetailedString">
            <summary>
            Returns a detailed, string representation of this instance.
            </summary>
            <returns>
            A detailed, string representation of this instance.
            </returns>
        </member>
        <member name="T:Orleans.Metadata.WellKnownGrainTypeProperties">
            <summary>
            Well-known grain properties.
            </summary>
            <seealso cref="T:Orleans.Metadata.GrainProperties"/>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.PlacementStrategy">
            <summary>
            The name of the placement strategy for grains of this type.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.GrainDirectory">
            <summary>
            The directory policy for grains of this type.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.Unordered">
            <summary>
            Whether or not messages to this grain are unordered.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.ImplementedInterfacePrefix">
            <summary>
            Prefix for keys which indicate <see cref="T:Orleans.Runtime.GrainInterfaceType"/> of interfaces which a grain class implements.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.IdleDeactivationPeriod">
            <summary>
            The period after which an idle grain will be deactivated.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.IndefiniteIdleDeactivationPeriodValue">
            <summary>
            The value for <see cref="F:Orleans.Metadata.WellKnownGrainTypeProperties.IdleDeactivationPeriod"/> used to specify that the grain should not be deactivated due to idleness.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.TypeName">
            <summary>
            The name of the primary implementation type. Used for convention-based matching of primary interface implementations.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.FullTypeName">
            <summary>
            The full name of the primary implementation type. Used for prefix-based matching of implementations.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.BindingPrefix">
            <summary>
            The prefix for binding declarations 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.BindingTypeKey">
            <summary>
            The key for defining a binding type. 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.StreamBindingTypeValue">
            <summary>
            The binding type for Orleans streams.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.BroadcastChannelBindingTypeValue">
            <summary>
            The binding type for Broadcast Channels.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.StreamBindingPatternKey">
            <summary>
            The key to specify a stream binding pattern. 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.BroadcastChannelBindingPatternKey">
            <summary>
            The key to specify a channel binding pattern. 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.StreamIdMapperKey">
            <summary>
            The key to specify a stream id mapper 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.ChannelIdMapperKey">
            <summary>
            The key to specify a channel id mapper 
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.StreamBindingIncludeNamespaceKey">
            <summary>
            Whether to include the namespace name in the grain id.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.LegacyGrainKeyType">
            <summary>
            Key type of the grain, if it implement a legacy interface. Valid values are nameof(String), nameof(Int64) and nameof(Guid)
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.Reentrant">
            <summary>
            Whether a grain is reentrant or not.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.WellKnownGrainTypeProperties.MayInterleavePredicate">
            <summary>
            Specifies the name of a method used to determine if a request can interleave other requests.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.IGrainPropertiesProvider">
            <summary>
            Provides grain properties.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainPropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds grain properties to <paramref name="properties"/>.
            </summary>
            <param name="grainClass">
            The grain class.
            </param>
            <param name="grainType">
            The grain type id.
            </param>
            <param name="properties">
            The properties collection which calls to this method should populate.
            </param>
        </member>
        <member name="T:Orleans.Metadata.IGrainPropertiesProviderAttribute">
            <summary>
            Interface for <see cref="T:System.Attribute"/> classes which provide information about a grain.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainPropertiesProviderAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds grain properties to <paramref name="properties"/>.
            </summary>
            <param name="services">
            The service provider.
            </param>
            <param name="grainClass">
            The grain class.
            </param>
            <param name="grainType">
            The grain type id.
            </param>
            <param name="properties">
            The properties collection which calls to this method should populate.
            </param>
        </member>
        <member name="T:Orleans.Metadata.AttributeGrainPropertiesProvider">
            <summary>
            Provides grain interface properties from attributes implementing <see cref="T:Orleans.Metadata.IGrainPropertiesProviderAttribute"/>.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainPropertiesProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.AttributeGrainPropertiesProvider"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainPropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Metadata.IGrainBindingsProviderAttribute">
            <summary>
            Interface for <see cref="T:System.Attribute"/> classes which provide information about a grain.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainBindingsProviderAttribute.GetBindings(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType)">
            <summary>
            Gets bindings for the type this attribute is attached to.
            </summary>
            <param name="services">
            The service provider.
            </param>
            <param name="grainClass">
            The grain class.
            </param>
            <param name="grainType">
            The grain type.
            </param>
            <returns>
            The bindings for the specified grain.
            </returns>
        </member>
        <member name="T:Orleans.Metadata.AttributeGrainBindingsProvider">
            <summary>
            Provides grain interface properties from attributes implementing <see cref="T:Orleans.Metadata.IGrainPropertiesProviderAttribute"/>.
            </summary>
        </member>
        <member name="F:Orleans.Metadata.AttributeGrainBindingsProvider.BindingPrefix">
            <summary>
            A hopefully unique name to describe bindings added by this provider.
            Binding names are meaningless and are only used to group properties for a given binding together.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainBindingsProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.AttributeGrainBindingsProvider"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainBindingsProvider.Populate(System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Metadata.IGrainTypeProvider">
            <summary>
            Associates a <see cref="T:Orleans.Runtime.GrainType"/> with a grain class.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainTypeProvider.TryGetGrainType(System.Type,Orleans.Runtime.GrainType@)">
            <summary>
            Returns the grain type corresponding to the class identified by <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.AttributeGrainTypeProvider">
            <summary>
            Gets the corresponding <see cref="T:Orleans.Runtime.GrainType"/> for a grain class from an <see cref="T:System.Attribute"/>
            implementing <see cref="T:Orleans.Metadata.IGrainTypeProviderAttribute"/> on that class.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainTypeProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.AttributeGrainTypeProvider"/> class. 
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.AttributeGrainTypeProvider.TryGetGrainType(System.Type,Orleans.Runtime.GrainType@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Metadata.IGrainTypeProviderAttribute">
            <summary>
            Functionality which can be implemented by a custom <see cref="T:System.Attribute"/> which implements this specifies the <see cref="T:Orleans.Runtime.GrainType"/> of the
            type which it is attached to.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.IGrainTypeProviderAttribute.GetGrainType(System.IServiceProvider,System.Type)">
            <summary>
            Gets the <see cref="T:Orleans.Runtime.GrainType"/> for the attached <see cref="T:System.Type"/>.
            </summary>
            <param name="services">
            The service provider.
            </param>
            <param name="type">
            The grain class.
            </param>
        </member>
        <member name="T:Orleans.Metadata.MajorMinorVersion">
            <summary>
            Represents a version with two components, a major (most-significant) component, and a minor (least-significant) component.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.MajorMinorVersion"/> struct.
            </summary>
            <param name="majorVersion">The major version component.</param>
            <param name="minorVersion">The minor version component.</param>
        </member>
        <member name="P:Orleans.Metadata.MajorMinorVersion.Zero">
            <summary>
            Gets the zero value.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.MajorMinorVersion.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.MajorMinorVersion.Major">
            <summary>
            Gets the most significant version component.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.MajorMinorVersion.Minor">
            <summary>
            Gets the least significant version component.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.CompareTo(Orleans.Metadata.MajorMinorVersion)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.Equals(Orleans.Metadata.MajorMinorVersion)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Orleans.Metadata.MajorMinorVersion"/>.
            </summary>
            <param name="value">
            The string representation.
            </param>
            <returns>
            The parsed <see cref="T:Orleans.Metadata.MajorMinorVersion"/> value.
            </returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.ToString">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_Equality(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands for equality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_Inequality(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands for inequality.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the provided values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_GreaterThanOrEqual(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_LessThanOrEqual(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than or equal to the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_GreaterThan(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is greater than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Metadata.MajorMinorVersion.op_LessThan(Orleans.Metadata.MajorMinorVersion,Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Compares the provided operands and returns <see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns><see langword="true"/> if the left operand is less than the right operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.GrainTypeAttribute">
            <summary>
            Specifies the grain type of the grain class which it is attached to.
            </summary>
        </member>
        <member name="F:Orleans.GrainTypeAttribute._grainType">
            <summary>
            The grain type name.
            </summary>
        </member>
        <member name="M:Orleans.GrainTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainTypeAttribute"/> class. 
            </summary>
            <param name="grainType">
            The grain type name.
            </param>
        </member>
        <member name="M:Orleans.GrainTypeAttribute.GetGrainType(System.IServiceProvider,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Placement.PlacementAttribute">
            <summary>
            Base for all placement policy marker attributes.
            </summary>
        </member>
        <member name="M:Orleans.Placement.PlacementAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Placement.RandomPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.RandomPlacement"/> policy.
            </summary>
            <remarks>
            This is the default placement policy, so this attribute does not need to be used for normal grains.
            </remarks>
            <inheritdoc cref="T:Orleans.Runtime.RandomPlacement"/>
        </member>
        <member name="T:Orleans.Placement.HashBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.HashBasedPlacement"/> policy.
            </summary>
            <inheritdoc cref="T:Orleans.Runtime.HashBasedPlacement"/>
        </member>
        <member name="T:Orleans.Placement.PreferLocalPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.PreferLocalPlacement"/> policy.
            </summary>
            <inheritdoc cref="T:Orleans.Runtime.PreferLocalPlacement"/>
        </member>
        <member name="M:Orleans.Placement.PreferLocalPlacementAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Placement.PreferLocalPlacementAttribute"/> class.
            </summary>
        </member>
        <member name="T:Orleans.Placement.ActivationCountBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.ActivationCountBasedPlacement"/> policy, which attempts to balance
            grain placement across servers based upon the relative number of recently active grains on each one.
            </summary>
            <inheritdoc cref="T:Orleans.Runtime.ActivationCountBasedPlacement"/>
        </member>
        <member name="M:Orleans.Placement.ActivationCountBasedPlacementAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Placement.ActivationCountBasedPlacementAttribute"/> class.
            </summary>
        </member>
        <member name="T:Orleans.Placement.SiloRoleBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.SiloRoleBasedPlacement"/> policy.
            </summary>
            <inheritdoc cref="T:Orleans.Runtime.SiloRoleBasedPlacement"/>
        </member>
        <member name="T:Orleans.Placement.ResourceOptimizedPlacementAttribute">
            <summary>
            Marks a grain class as using the <see cref="T:Orleans.Runtime.ResourceOptimizedPlacement"/> policy.
            </summary>
            <inheritdoc cref="T:Orleans.Runtime.ResourceOptimizedPlacement"/>
        </member>
        <member name="T:Orleans.Providers.IProviderBuilder`1">
            <summary>
            Interface for providers which configure Orleans services.
            </summary>
            <typeparam name="TBuilder">The type of the builder, such as <c>ISiloBuilder</c> or <c>IClientBuilder</c>.</typeparam>
        </member>
        <member name="M:Orleans.Providers.IProviderBuilder`1.Configure(`0,System.String,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Configures the provider.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The provider name, or <see langword="null"/> if no name is specified.</param>
            <param name="configurationSection">The configuration section containing provider configuration.</param>
        </member>
        <member name="T:Orleans.Providers.ProviderConstants">
            <summary>
            Constant values used by providers.
            </summary>
        </member>
        <member name="F:Orleans.Providers.ProviderConstants.DEFAULT_STORAGE_PROVIDER_NAME">
            <summary>
            The default storage provider name.
            </summary>
        </member>
        <member name="F:Orleans.Providers.ProviderConstants.DEFAULT_LOG_CONSISTENCY_PROVIDER_NAME">
            <summary>
            The default log consistency provider name.
            </summary>
        </member>
        <member name="T:Orleans.Providers.StorageProviderAttribute">
            <summary>
            The [Orleans.Providers.StorageProvider] attribute is used to define which storage provider to use for persistence of grain state.
            <para>
            Specifying [Orleans.Providers.StorageProvider] property is recommended for all grains which extend Grain&lt;T&gt;.
            If no [Orleans.Providers.StorageProvider] attribute is  specified, then a "Default" storage provider will be used.
            If a suitable storage provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.StorageProviderAttribute.ProviderName">
            <summary>
            Gets or sets the name of the provider to be used for persisting of grain state.
            </summary>
        </member>
        <member name="M:Orleans.Providers.StorageProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.StorageProviderAttribute"/> class.
            </summary>
        </member>
        <member name="T:Orleans.Providers.LogConsistencyProviderAttribute">
            <summary>
            The [Orleans.Providers.LogConsistencyProvider] attribute is used to define which consistency provider to use for grains using the log-view state abstraction.
            <para>
            Specifying [Orleans.Providers.LogConsistencyProvider] property is recommended for all grains that derive
            from LogConsistentGrain, such as JournaledGrain.
            If no [Orleans.Providers.LogConsistencyProvider] attribute is  specified, then the runtime tries to locate
            one as follows. First, it looks for a
            "Default" provider in the configuration file, then it checks if the grain type defines a default.
            If a consistency provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.LogConsistencyProviderAttribute.ProviderName">
            <summary>
            Gets or sets name of the provider to be used for consistency.
            </summary>
        </member>
        <member name="M:Orleans.Providers.LogConsistencyProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.LogConsistencyProviderAttribute"/> class.
            </summary>
        </member>
        <member name="T:Orleans.GrainContextComponentExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Runtime.IGrainContext"/> related to <see cref="T:Orleans.Runtime.IGrainExtension"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainContextComponentExtensions.GetGrainExtension``1(Orleans.Runtime.IGrainContext)">
            <summary>
            Used by generated code for <see cref="T:Orleans.Runtime.IGrainExtension" /> interfaces.
            </summary>
            <typeparam name="TComponent">
            The type of the component to get.
            </typeparam>
            <param name="context">
            The grain context.
            </param>
            <returns>
            The grain extension.
            </returns>
        </member>
        <member name="T:Orleans.Services.IGrainService">
            <summary>
            Base interface for grain services.
            </summary>
        </member>
        <member name="T:Orleans.Services.IGrainServiceClient`1">
            <summary>
            Base interface for grain service clients.
            </summary>
            <typeparam name="TGrainService">The grain service interface type.</typeparam>
        </member>
        <member name="T:Orleans.Statistics.IAppEnvironmentStatistics">
            <summary>
            Provides functionality for accessing statistics relating to the application environment.
            </summary>
        </member>
        <member name="P:Orleans.Statistics.IAppEnvironmentStatistics.MemoryUsage">
            <summary>
            Gets the total memory usage, in bytes, if available.
            </summary>
        </member>
        <member name="T:Orleans.Statistics.IHostEnvironmentStatistics">
            <summary>
            Functionality for accessing statistics relating to the hosting environment.
            </summary>
        </member>
        <member name="P:Orleans.Statistics.IHostEnvironmentStatistics.TotalPhysicalMemory">
            <summary>
            Gets the total physical memory on the host in bytes.
            </summary>
            <example>
            <c>16426476000L</c> for 16 GB.
            </example>
        </member>
        <member name="P:Orleans.Statistics.IHostEnvironmentStatistics.CpuUsage">
            <summary>
            Gets the host CPU usage from 0.0-100.0.
            </summary>
            <example>
            <c>70.0f</c> for 70% CPU usage.
            </example>
        </member>
        <member name="P:Orleans.Statistics.IHostEnvironmentStatistics.AvailableMemory">
            <summary>
            Gets the total memory available for allocation on the host in bytes.
            </summary>
            <example>
            <c>14426476000L</c> for 14 GB.
            </example>
        </member>
        <member name="T:Orleans.ISystemTarget">
            <summary>
            This is a markup interface for system targets.
            System target are internal runtime objects that share some behavior with grains, but also impose certain restrictions. In particular:
            System target are asynchronously addressable actors.
            Proxy class is being generated for ISystemTarget, just like for IGrain
            System target are scheduled by the runtime scheduler and follow turn based concurrency.
            </summary> 
        </member>
        <member name="T:Orleans.ISystemTargetBase">
            <summary>
            Internal interface implemented by the SystemTarget base class that enables generation of grain references for system targets.
            </summary>
        </member>
        <member name="P:Orleans.ISystemTargetBase.Silo">
            <summary>
            Gets the address of the server which this system target is activated on.
            </summary>
        </member>
        <member name="T:Orleans.IVersionManager">
            <summary>
            Functionality for managing how grain interface versions are negotiated.
            </summary>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy.
            </summary>
            <param name="strategy">The strategy to set. Set to <see langword="null"/> to revert to the default strategy provided in configuration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy.
            </summary>
            <param name="strategy">The strategy to set. Set to <see langword="null"/> to revert to the default strategy provided in configuration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Runtime.GrainInterfaceType,Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy for a specific interface.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <param name="strategy">The strategy to set. Set to <see langword="null"/> to revert to the default strategy provided in configuration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(Orleans.Runtime.GrainInterfaceType,Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy for a specific interface.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <param name="strategy">The strategy to set. Set to <see langword="null"/> to revert to the default strategy provided in configuration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.Timers.ITimerRegistry">
            <summary>
            Functionality for managing grain timers.
            </summary>
        </member>
        <member name="M:Orleans.Timers.ITimerRegistry.RegisterTimer(Orleans.Runtime.IGrainContext,System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a grain timer.
            </summary>
            <param name="grainContext">The grain which the timer is associated with.</param>
            <param name="asyncCallback">The timer callback, which will fire whenever the timer becomes due.</param>
            <param name="state">The state object passed to the callback.</param>
            <param name="dueTime">
            The amount of time to delay before the <paramref name="asyncCallback"/> is invoked.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to prevent the timer from starting.
            Specify <see cref="F:System.TimeSpan.Zero"/> to invoke the callback promptly.
            </param>
            <param name="period">
            The time interval between invocations of <paramref name="asyncCallback"/>.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable periodic signaling.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> object which will cancel the timer upon disposal.
            </returns>
        </member>
        <member name="T:Orleans.InternerConstants">
            <summary>
            Constants used by the generic <see cref="T:Orleans.Interner`2"/> class.
            </summary>
        </member>
        <member name="T:Orleans.Interner`2">
            <summary>
            Provide a weakly-referenced cache of interned objects.
            Interner is used to optimize garbage collection.
            We use it to store objects that are allocated frequently and may have long lifetime. 
            This means those object may quickly fill gen 2 and cause frequent costly full heap collections.
            Specifically, a message that arrives to a silo and all the headers and ids inside it may stay alive long enough to reach gen 2.
            Therefore, we store all ids in interner to re-use their memory across different messages.
            </summary>
            <typeparam name="TKey">Type of objects to be used for intern keys.</typeparam>
            <typeparam name="TValue">Type of objects to be interned.</typeparam>
        </member>
        <member name="M:Orleans.Interner`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Interner`2"/> class.
            </summary>
            <param name="initialSize">The initial size of the interner mapping.</param>
        </member>
        <member name="M:Orleans.Interner`2.FindOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.FindOrCreate``1(`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <param name="state">State to be passed to <paramref name="creatorFunc"/>.</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.PublicOrleansTaskExtensions">
            <summary>
            Utility functions for dealing with <see cref="T:System.Threading.Tasks.Task"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Ignore(System.Threading.Tasks.Task)">
            <summary>
            Observes and ignores a potential exception on a given Task.
            If a Task fails and throws an exception which is never observed, it will be caught by the .NET finalizer thread.
            This function awaits the given task and if the exception is thrown, it observes this exception and simply ignores it.
            This will prevent the escalation of this exception to the .NET finalizer thread.
            </summary>
            <param name="task">The task to be ignored.</param>
        </member>
        <member name="T:Orleans.Versions.Compatibility.AllVersionsCompatible">
            <summary>
            A grain interface version compatibility strategy which treats all versions of an interface compatible with any requested version.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Compatibility.AllVersionsCompatible.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Compatibility.BackwardCompatible">
            <summary>
            A grain interface version compatibility strategy which treats all versions of an interface compatible only with equal and lower requested versions.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Compatibility.BackwardCompatible.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Compatibility.ICompatibilityDirector">
            <summary>
            Functionality for grain interface compatibility directors.
            </summary>
        </member>
        <member name="M:Orleans.Versions.Compatibility.ICompatibilityDirector.IsCompatible(System.UInt16,System.UInt16)">
            <summary>
            Returns <see langword="true"/> if the current version of an interface is compatible with the requested version, <see langword="false"/> otherwise.
            </summary>
            <param name="requestedVersion">The requested interface version.</param>
            <param name="currentVersion">The currently available interface version.</param>
            <returns><see langword="true"/> if the current version of an interface is compatible with the requested version, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Versions.Compatibility.CompatibilityStrategy">
            <summary>
            Base class for all grain interface version compatibility strategies.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Compatibility.StrictVersionCompatible">
            <summary>
            A grain interface version compatibility strategy which treats all versions of an interface compatible only with equal requested versions.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Compatibility.StrictVersionCompatible.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Versions.IVersionStore">
            <summary>
            Functionality for accessing runtime-modifiable grain interface version strategies.
            </summary>
        </member>
        <member name="P:Orleans.Versions.IVersionStore.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
        </member>
        <member name="M:Orleans.Versions.IVersionStore.GetCompatibilityStrategies">
            <summary>
            Gets the mapping from grain interface type to grain interface version compatibility strategy.
            </summary>
            <returns>The mapping from grain interface type to grain interface version compatibility strategy.</returns>
        </member>
        <member name="M:Orleans.Versions.IVersionStore.GetSelectorStrategies">
            <summary>
            Gets the mapping from grain interface type to grain interface version selector strategy.
            </summary>
            <returns>The mapping from grain interface type to grain interface version selector strategy.</returns>
        </member>
        <member name="M:Orleans.Versions.IVersionStore.GetCompatibilityStrategy">
            <summary>
            Gets the default grain interface version compatibility strategy.
            </summary>
            <returns>The default grain interface version compatibility strategy.</returns>
        </member>
        <member name="M:Orleans.Versions.IVersionStore.GetSelectorStrategy">
            <summary>
            Gets the default grain interface version selector strategy.
            </summary>
            <returns>The default grain interface version selector strategy.</returns>
        </member>
        <member name="T:Orleans.Versions.Selector.AllCompatibleVersions">
            <summary>
            Grain interface version selector which allows any compatible version to be chosen.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Selector.AllCompatibleVersions.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Selector.IVersionSelector">
            <summary>
            Functionality for selecting which versions of a grain interface should be preferred when performing grain placement.
            </summary>
        </member>
        <member name="M:Orleans.Versions.Selector.IVersionSelector.GetSuitableVersion(System.UInt16,System.UInt16[],Orleans.Versions.Compatibility.ICompatibilityDirector)">
            <summary>
            Returns a collection of suitable interface versions for a given request.
            </summary>
            <param name="requestedVersion">The requested grain interface version.</param>
            <param name="availableVersions">The collection of available interface versions.</param>
            <param name="compatibilityDirector">The compatibility director.</param>
            <returns>A collection of suitable interface versions for a given request.</returns>
        </member>
        <member name="T:Orleans.Versions.Selector.VersionSelectorStrategy">
            <summary>
            Base class for all grain interface version selector strategies.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Selector.LatestVersion">
            <summary>
            Grain interface version selector which always selects the highest compatible version.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Selector.LatestVersion.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Versions.Selector.MinimumVersion">
            <summary>
            Grain interface version selector which always selects the lowest compatible version.
            </summary>
        </member>
        <member name="P:Orleans.Versions.Selector.MinimumVersion.Singleton">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
    </members>
</doc>
