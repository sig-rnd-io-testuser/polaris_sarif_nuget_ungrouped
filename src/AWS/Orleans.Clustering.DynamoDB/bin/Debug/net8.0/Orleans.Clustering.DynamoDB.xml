<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Clustering.DynamoDB</name>
    </assembly>
    <members>
        <member name="M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(Orleans.Hosting.ISiloBuilder,System.Action{Orleans.Configuration.DynamoDBClusteringOptions})">
            <summary>
            Configures the silo to use DynamoDB for clustering.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="configureOptions">
            The configuration delegate.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.DynamoDBClusteringOptions}})">
            <summary>
            Configures the silo to use DynamoDB for clustering.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="configureOptions">
            The configuration delegate.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(Orleans.Hosting.IClientBuilder,System.Action{Orleans.Configuration.DynamoDBGatewayOptions})">
            <summary>
            Configures the client to use DynamoDB for clustering.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="configureOptions">
            The configuration delegate.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.AwsUtilsHostingExtensions.UseDynamoDBClustering(Orleans.Hosting.IClientBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.DynamoDBGatewayOptions}})">
            <summary>
            Configures the client to use DynamoDB for clustering.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="configureOptions">
            The configuration delegate.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="T:Orleans.Clustering.DynamoDB.DynamoDBGatewayListProviderHelper">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBGatewayListProviderHelper.ParseDataConnectionString(System.String,Orleans.Configuration.DynamoDBGatewayOptions)">
            <summary>
            Parse data connection string to fill in fields in <paramref name="options"/>
            </summary>
            <param name="dataConnectionString"></param>
            <param name="options"></param>
        </member>
        <member name="T:Orleans.Clustering.DynamoDB.DynamoDBMembershipHelper">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBMembershipHelper.ParseDataConnectionString(System.String,Orleans.Configuration.DynamoDBClusteringOptions)">
            <summary>
            Parse data connection string to fill in fields in <paramref name="options"/>
            </summary>
            <param name="dataConnectionString"></param>
            <param name="options"></param>
        </member>
        <member name="T:Orleans.Clustering.DynamoDB.DynamoDBStorage">
            <summary>
            Wrapper around AWS DynamoDB SDK.
            </summary>
        </member>
        <member name="F:Orleans.Clustering.DynamoDB.DynamoDBStorage.secretKey">
            <summary> Secret key for this dynamoDB table </summary>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a DynamoDBStorage instance
            </summary>
            <param name="logger"></param>
            <param name="accessKey"></param>
            <param name="secretKey"></param>
            <param name="token"></param>
            <param name="profileName"></param>
            <param name="service"></param>
            <param name="readCapacityUnits"></param>
            <param name="writeCapacityUnits"></param>
            <param name="useProvisionedThroughput"></param>
            <param name="createIfNotExists"></param>
            <param name="updateIfExists"></param>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.InitializeTable(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.GlobalSecondaryIndex},System.String)">
            <summary>
            Create a DynamoDB table if it doesn't exist
            </summary>
            <param name="tableName">The name of the table</param>
            <param name="keys">The keys definitions</param>
            <param name="attributes">The attributes used on the key definition</param>
            <param name="secondaryIndexes">(optional) The secondary index definitions</param>
            <param name="ttlAttributeName">(optional) The name of the item attribute that indicates the item TTL (if null, ttl won't be enabled)</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.DeleTableAsync(System.String)">
            <summary>
            Delete a table from DynamoDB
            </summary>
            <param name="tableName">The name of the table to delete</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.PutEntryAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Create or Replace an entry in a DynamoDB Table
            </summary>
            <param name="tableName">The name of the table to put an entry</param>
            <param name="fields">The fields/attributes to add or replace in the table</param>
            <param name="conditionExpression">Optional conditional expression</param>
            <param name="conditionValues">Optional field/attribute values used in the conditional expression</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.UpsertEntryAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Create or update an entry in a DynamoDB Table
            </summary>
            <param name="tableName">The name of the table to upsert an entry</param>
            <param name="keys">The table entry keys for the entry</param>
            <param name="fields">The fields/attributes to add or updated in the table</param>
            <param name="conditionExpression">Optional conditional expression</param>
            <param name="conditionValues">Optional field/attribute values used in the conditional expression</param>
            <param name="extraExpression">Additional expression that will be added in the end of the upsert expression</param>
            <param name="extraExpressionValues">Additional field/attribute that will be used in the extraExpression</param>
            <remarks>The fields dictionary item values will be updated with the values returned from DynamoDB</remarks>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.DeleteEntryAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Delete an entry from a DynamoDB table
            </summary>
            <param name="tableName">The name of the table to delete an entry</param>
            <param name="keys">The table entry keys for the entry to be deleted</param>
            <param name="conditionExpression">Optional conditional expression</param>
            <param name="conditionValues">Optional field/attribute values used in the conditional expression</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.DeleteEntriesAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue}})">
            <summary>
            Delete multiple entries from a DynamoDB table (Batch delete)
            </summary>
            <param name="tableName">The name of the table to delete entries</param>
            <param name="toDelete">List of key values for each entry that must be deleted in the batch</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.ReadSingleEntryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Func{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},``0})">
            <summary>
            Read an entry from a DynamoDB table
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="tableName">The name of the table to search for the entry</param>
            <param name="keys">The table entry keys to search for</param>
            <param name="resolver">Function that will be called to translate the returned fields into a concrete type. This Function is only called if the result is != null</param>
            <returns>The object translated by the resolver function</returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.QueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Func{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},``0},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean)">
            <summary>
            Query for multiple entries in a DynamoDB table by filtering its keys
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="tableName">The name of the table to search for the entries</param>
            <param name="keys">The table entry keys to search for</param>
            <param name="keyConditionExpression">the expression that will filter the keys</param>
            <param name="resolver">Function that will be called to translate the returned fields into a concrete type. This Function is only called if the result is != null and will be called for each entry that match the query and added to the results list</param>
            <param name="indexName">In case a secondary index is used in the keyConditionExpression</param>
            <param name="scanIndexForward">In case an index is used, show if the seek order is ascending (true) or descending (false)</param>
            <param name="lastEvaluatedKey">The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation</param>
            <param name="consistentRead">Determines the read consistency model. Note that if a GSI is used, this must be false.</param>
            <returns>The collection containing a list of objects translated by the resolver function and the LastEvaluatedKey for paged results</returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.QueryAllAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Func{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},``0},System.String,System.Boolean,System.Boolean)">
            <summary>
            Query for multiple entries in a DynamoDB table by filtering its keys
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="tableName">The name of the table to search for the entries</param>
            <param name="keys">The table entry keys to search for</param>
            <param name="keyConditionExpression">the expression that will filter the keys</param>
            <param name="resolver">Function that will be called to translate the returned fields into a concrete type. This Function is only called if the result is != null and will be called for each entry that match the query and added to the results list</param>
            <param name="indexName">In case a secondary index is used in the keyConditionExpression</param>
            <param name="scanIndexForward">In case an index is used, show if the seek order is ascending (true) or descending (false)</param>
            <param name="consistentRead">Determines the read consistency model. Note that if a GSI is used, this must be false.</param>
            <returns>The collection containing a list of objects translated by the resolver function</returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.ScanAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.String,System.Func{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},``0})">
            <summary>
            Scan a DynamoDB table by querying the entry fields.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="tableName">The name of the table to search for the entries</param>
            <param name="attributes">The attributes used on the expression</param>
            <param name="expression">The filter expression</param>
            <param name="resolver">Function that will be called to translate the returned fields into a concrete type. This Function is only called if the result is != null and will be called for each entry that match the query and added to the results list</param>
            <returns>The collection containing a list of objects translated by the resolver function</returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.PutEntriesAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue}})">
            <summary>
            Crete or replace multiple entries in a DynamoDB table (Batch put)
            </summary>
            <param name="tableName">The name of the table to search for the entry</param>
            <param name="toCreate">List of key values for each entry that must be created or replaced in the batch</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.GetEntriesTxAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue}},System.Func{System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},``0})">
            <summary>
            Transactionally reads entries from a DynamoDB table
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="tableName">The name of the table to search for the entry</param>
            <param name="keys">The table entry keys to search for</param>
            <param name="resolver">Function that will be called to translate the returned fields into a concrete type. This Function is only called if the result is != null</param>
            <returns>The object translated by the resolver function</returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.DynamoDBStorage.WriteTxAsync(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.Model.Put},System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.Model.Update},System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.Model.Delete},System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.Model.ConditionCheck})">
            <summary>
            Transactionally performs write requests
            </summary>
            <param name="puts">Any puts to be performed</param>
            <param name="updates">Any updated to be performed</param>
            <param name="deletes">Any deletes to be performed</param>
            <param name="conditionChecks">Any condition checks to be performed</param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Clustering.DynamoDB.DynamoDBClientOptions.AccessKey">
            <summary>
            AccessKey string for DynamoDB Storage
            </summary>
        </member>
        <member name="P:Orleans.Clustering.DynamoDB.DynamoDBClientOptions.SecretKey">
            <summary>
            Secret key for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Clustering.DynamoDB.DynamoDBClientOptions.Service">
            <summary>
            DynamoDB region name, such as "us-west-2"
            </summary>
        </member>
        <member name="P:Orleans.Clustering.DynamoDB.DynamoDBClientOptions.Token">
            <summary>
            Token for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Clustering.DynamoDB.DynamoDBClientOptions.ProfileName">
            <summary>
            AWS profile name.
            </summary>
        </member>
        <member name="T:Orleans.Clustering.DynamoDB.AWSUtils">
            <summary>
            Some basic utilities methods for AWS SDK
            </summary>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.AWSUtils.ValidateDynamoDBPartitionKey(System.String)">
            <summary>
            Validate DynamoDB PartitionKey.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Clustering.DynamoDB.AWSUtils.ValidateDynamoDBRowKey(System.String)">
            <summary>
            Validate DynamoDB RowKey.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.ReadCapacityUnits">
            <summary>
            Read capacity unit for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.WriteCapacityUnits">
            <summary>
            Write capacity unit for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.UseProvisionedThroughput">
            <summary>
            Use Provisioned Throughput for tables
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.CreateIfNotExists">
            <summary>
            Create the table if it doesn't exist
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.UpdateIfExists">
            <summary>
            Update the table if it exists
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringOptions.TableName">
            <summary>
            DynamoDB table name.
            Defaults to 'OrleansSilos'.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBClusteringSiloOptions.ConnectionString">
            <summary>
            Connection string for DynamoDB Storage
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.ReadCapacityUnits">
            <summary>
            Read capacity unit for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.WriteCapacityUnits">
            <summary>
            Write capacity unit for DynamoDB storage
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.UseProvisionedThroughput">
            <summary>
            Use Provisioned Throughput for tables
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.CreateIfNotExists">
            <summary>
            Create the table if it doesn't exist
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.UpdateIfExists">
            <summary>
            Update the table if it exists
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DynamoDBGatewayOptions.TableName">
            <summary>
            DynamoDB table name.
            Defaults to 'OrleansSilos'.
            </summary>
        </member>
    </members>
</doc>
