<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Runtime</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.DefaultGrainActivator">
            <summary>
            The default <see cref="T:Orleans.Runtime.IGrainActivator"/> implementation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.DefaultGrainActivator.#ctor(System.IServiceProvider,System.Type)">
            <summary>
            Initializes a new <see cref="T:Orleans.Runtime.DefaultGrainActivator"/> instance.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="grainClass">The grain class.</param>
        </member>
        <member name="M:Orleans.Runtime.DefaultGrainActivator.CreateInstance(Orleans.Runtime.IGrainContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.DefaultGrainActivator.DisposeInstance(Orleans.Runtime.IGrainContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.IGrainActivator">
            <summary>
            Creates a grain instance for a given grain context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainActivator.CreateInstance(Orleans.Runtime.IGrainContext)">
            <summary>
            Returns a new grain instance for the provided grain context.
            </summary>
            <param name="context">The grain context.</param>
            <returns>The grain instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.IGrainActivator.DisposeInstance(Orleans.Runtime.IGrainContext,System.Object)">
            <summary>
            Disposes the provided grain instance which is associated with the provided grain context.
            </summary>
            <param name="context">The grain context.</param>
            <param name="instance">The grain instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainContextActivator">
            <summary>
            The central point for creating grain contexts.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainContextActivator.#ctor(System.Collections.Generic.IEnumerable{Orleans.Runtime.IGrainContextActivatorProvider},System.Collections.Generic.IEnumerable{Orleans.Runtime.IConfigureGrainContextProvider},Orleans.Metadata.GrainPropertiesResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainContextActivator"/> class.
            </summary>
            <param name="providers">The grain context activator providers.</param>
            <param name="configureContextActions">The <see cref="T:Orleans.Runtime.IConfigureGrainContext"/> providers.</param>
            <param name="grainPropertiesResolver">The grain properties resolver.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainContextActivator.CreateInstance(Orleans.Runtime.GrainAddress)">
            <summary>
            Creates a new grain context for the provided grain address.
            </summary>
            <param name="address">The grain address.</param>
            <returns>The grain context.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainContextActivatorProvider">
            <summary>
            Provides a <see cref="T:Orleans.Runtime.IGrainContextActivator"/> for a specified grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainContextActivatorProvider.TryGet(Orleans.Runtime.GrainType,Orleans.Runtime.IGrainContextActivator@)">
            <summary>
            Returns a grain context activator for the given grain type.
            </summary>
            <param name="grainType">Type of the grain.</param>
            <param name="activator">The grain context activator.</param>
            <returns><see langword="true"/> if an appropriate activator was found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainContextActivator">
            <summary>
            Creates a grain context for the given grain address.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainContextActivator.CreateContext(Orleans.Runtime.GrainAddress)">
            <summary>
            Creates a grain context for the given grain address.
            </summary>
            <param name="address">The grain address.</param>
            <returns>The newly created grain context.</returns>
        </member>
        <member name="T:Orleans.Runtime.IConfigureGrainContextProvider">
            <summary>
            Provides a <see cref="T:Orleans.Runtime.IConfigureGrainContext"/> instance for the provided grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IConfigureGrainContextProvider.TryGetConfigurator(Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties,Orleans.Runtime.IConfigureGrainContext@)">
            <summary>
            Provides a <see cref="T:Orleans.Runtime.IConfigureGrainContext" /> instance for the provided grain type.
            </summary>
            <param name="grainType">Type of the grain.</param>
            <param name="properties">The grain properties.</param>
            <param name="configurator">The configuration provider.</param>
            <returns><see langword="true"/> if a configuration provider was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.IConfigureGrainContext">
            <summary>
            Configures the provided grain context.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IConfigureGrainContext.Configure(Orleans.Runtime.IGrainContext)">
            <summary>
            Configures the provided grain context.
            </summary>
            <param name="context">The grain context.</param>
        </member>
        <member name="T:Orleans.Runtime.GrainTypeSharedContextResolver">
            <summary>
            Resolves components which are common to all instances of a given grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContextResolver.#ctor(System.Collections.Generic.IEnumerable{Orleans.Runtime.IConfigureGrainTypeComponents},Orleans.Metadata.GrainPropertiesResolver,Orleans.GrainReferences.GrainReferenceActivator,Orleans.Runtime.IClusterManifestProvider,Orleans.Metadata.GrainClassMap,Orleans.Runtime.Placement.PlacementStrategyResolver,Microsoft.Extensions.Options.IOptions{Orleans.Configuration.SiloMessagingOptions},Microsoft.Extensions.Options.IOptions{Orleans.Configuration.GrainCollectionOptions},Microsoft.Extensions.Options.IOptions{Orleans.Configuration.SchedulingOptions},Orleans.Runtime.IGrainRuntime,Microsoft.Extensions.Logging.ILogger{Orleans.Grain},System.IServiceProvider,Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainTypeSharedContextResolver"/> class.
            </summary>
            <param name="configurators">The grain type component configuration providers.</param>
            <param name="grainPropertiesResolver">The grain properties resolver.</param>
            <param name="grainReferenceActivator">The grain reference activator.</param>
            <param name="clusterManifestProvider">The cluster manifest provider.</param>
            <param name="grainClassMap">The grain class map.</param>
            <param name="placementStrategyResolver">The grain placement strategy resolver.</param>
            <param name="messagingOptions">The messaging options.</param>
            <param name="collectionOptions">The grain activation collection options</param>
            <param name="schedulingOptions">The scheduling options</param>
            <param name="grainRuntime">The grain runtime.</param>
            <param name="logger">The logger.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="serializerSessionPool">The serializer session pool.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContextResolver.GetComponents(Orleans.Runtime.GrainType)">
            <summary>
            Returns shared grain components for the provided grain type.
            </summary>
            <param name="grainType">The grain type.</param>
            <returns>The shared context for all grains of the provided type.</returns>
        </member>
        <member name="T:Orleans.Runtime.IConfigureGrainTypeComponents">
            <summary>
            Configures shared components which are common for all instances of a given grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IConfigureGrainTypeComponents.Configure(Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties,Orleans.Runtime.GrainTypeSharedContext)">
            <summary>
            Configures shared components which are common for all instances of a given grain type.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="properties">The grain properties.</param>
            <param name="shared">The shared context for all grains of the specified type.</param>
        </member>
        <member name="M:Orleans.Runtime.MayInterleaveConfiguratorProvider.GetMayInterleavePredicate(System.Type)">
            <summary>
            Returns interleave predicate depending on whether class is marked with <see cref="T:Orleans.Concurrency.MayInterleaveAttribute"/> or not.
            </summary>
            <param name="grainType">Grain class.</param>
        </member>
        <member name="T:Orleans.Runtime.CancellationSourcesExtension">
            <summary>
            Contains list of cancellation token source corresponding to the tokens
            passed to the related grain activation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CancellationSourcesExtension.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Runtime.IGrainCancellationTokenRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.CancellationSourcesExtension"/> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
            <param name="cancellationRuntime">The cancellation runtime.</param>
        </member>
        <member name="M:Orleans.Runtime.CancellationSourcesExtension.CancelRemoteToken(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.CancellationSourcesExtension.RegisterCancellationTokens(Orleans.Runtime.IGrainContext,Orleans.Serialization.Invocation.IInvokable)">
            <summary>
            Adds <see cref="T:System.Threading.CancellationToken"/> to the grain extension so that it can be canceled through remote call to the CancellationSourcesExtension.
            </summary>
            <param name="target"></param>
            <param name="request"></param>
        </member>
        <member name="M:Orleans.Runtime.CancellationSourcesExtension.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ActivationCollector">
            <summary>
            Identifies activations that have been idle long enough to be deactivated.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.#ctor(Orleans.Runtime.IAsyncTimerFactory,Microsoft.Extensions.Options.IOptions{Orleans.Configuration.GrainCollectionOptions},Microsoft.Extensions.Logging.ILogger{Orleans.Runtime.ActivationCollector})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ActivationCollector"/> class.
            </summary>
            <param name="timerFactory">The timer factory.</param>
            <param name="options">The options.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.CollectActivations(System.TimeSpan)">
            <summary>
            Collects all eligible grain activations which have been idle for at least <paramref name="ageLimit"/>.
            </summary>
            <param name="ageLimit">The age limit.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.ScheduleCollection(Orleans.Runtime.ICollectibleGrainContext,System.TimeSpan,System.DateTime)">
            <summary>
            Schedules the provided grain context for collection if it becomes idle for the specified duration.
            </summary>
            <param name="item">
            The grain context.
            </param>
            <param name="timeout">
            The current idle collection time for the grain.
            </param>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.TryCancelCollection(Orleans.Runtime.ICollectibleGrainContext)">
            <summary>
            Tries the cancel idle activation collection.
            </summary>
            <param name="item">The grain context.</param>
            <returns><see langword="true"/> if collection was canceled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.TryRescheduleCollection(Orleans.Runtime.ICollectibleGrainContext)">
            <summary>
            Tries the reschedule collection.
            </summary>
            <param name="item">The grain context.</param>
            <returns><see langword="true"/> if collection was canceled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.ScanStale">
            <summary>
            Scans for activations that are due for collection.
            </summary>
            <returns>A list of activations that are due for collection.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.ScanAll(System.TimeSpan)">
            <summary>
            Scans for activations that have been idle for the specified age limit.
            </summary>
            <param name="ageLimit">The age limit.</param>
            <returns>The grain activations which have been idle for at least the specified age limit.</returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationCollector.CheckHealth(System.DateTime,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.ActivationData">
            <summary>
            Maintains additional per-activation state that is required for Orleans internal operations.
            MUST lock this object for any concurrent access
            Consider: compartmentalize by usage, e.g., using separate interfaces for data for catalog, etc.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.IsUsingGrainDirectory">
            <summary>
            Returns a value indicating whether or not this placement strategy requires activations to be registered in
            the grain directory.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.PreviousRegistration">
            <summary>
            Gets the previous directory registration for this grain, if known.
            This is used to update the grain directory to point to the new registration during activation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.CheckOverloaded">
            <summary>
            Check whether this activation is overloaded.
            Returns LimitExceededException if overloaded, otherwise <c>null</c>c>
            </summary>
            <returns>Returns LimitExceededException if overloaded, otherwise <c>null</c>c></returns>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.GetIdleness">
            <summary>
            Returns how long this activation has been idle.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.IsStale">
            <summary>
            Returns whether this activation has been idle long enough to be collected.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.InvokeIncomingRequest(Orleans.Runtime.Message)">
            <summary>
            Handle an incoming message and queue/invoke appropriate handler
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.OnCompletedRequest(Orleans.Runtime.Message)">
            <summary>
            Invoked when an activation has finished a transaction and may be ready for additional transactions
            </summary>
            <param name="message">The message that has just completed processing.
            This will be <c>null</c> for the case of completion of Activate/Deactivate calls.</param>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.RejectAllQueuedMessages">
            <summary>
            Rejects all messages enqueued for the provided activation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.StartDeactivating(Orleans.DeactivationReason)">
            <summary>
            Starts the deactivation process.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationData.FinishDeactivating(System.Threading.CancellationToken)">
            <summary>
            Completes the deactivation process.
            </summary>
            <param name="cancellationToken">A cancellation which terminates graceful deactivation when cancelled.</param>
        </member>
        <member name="T:Orleans.Runtime.ActivationData.ActivationDataExtra">
            <summary>
            Additional properties which are not needed for the majority of an activation's lifecycle.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.ActivationDataExtra.PreviousRegistration">
            <summary>
            During rehydration, this may contain the address for the previous (recently dehydrated) activation of this grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.ActivationDataExtra.ForwardingAddress">
            <summary>
            If State == Invalid, this may contain a forwarding address for incoming messages
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.ActivationDataExtra.DeactivationTask">
            <summary>
            A <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> which completes when a grain has deactivated.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ActivationData.ActivationDataExtra.DehydrationContext">
            <summary>
            When migrating to another location, this contains the information to preserve across activations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IActivationMigrationManagerSystemTarget">
            <summary>
            Remote interface for migrating grain activations to a silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationMigrationManagerSystemTarget.AcceptMigratingGrains(System.Collections.Generic.List{Orleans.Runtime.GrainMigrationPackage})">
            <summary>
            Accepts migrating grains on a best-effort basis.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IActivationMigrationManager">
            <summary>
            Functionality for migrating an activation to a new location.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationMigrationManager.MigrateAsync(Orleans.Runtime.SiloAddress,Orleans.Runtime.GrainId,Orleans.Runtime.MigrationContext)">
            <summary>
            Attempts to migrate a grain to the specified target.
            </summary>
            <param name="target">The migration target.</param>
            <param name="grainId">The grain being migrated.</param>
            <param name="migrationContext">Information about the grain being migrated, which will be consumed by the new activation.</param>
        </member>
        <member name="T:Orleans.Runtime.ActivationMigrationManager">
            <summary>
            Migrates grain activations to target hosts and handles migration requests from other hosts.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ActivationState.Create">
            <summary>
            Activation is being created
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ActivationState.Valid">
            <summary>
            Activation was successfully activated and ready to process requests.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ActivationState.Deactivating">
            <summary>
            Activation is in the middle of deactivation process.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ActivationState.Invalid">
            <summary>
            Tombstone for an activation which has terminated.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ActivationState.FailedToActivate">
            <summary>
            Tombstone for an activation that threw an exception during activation.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ActivationWorkingSet">
            <summary>
            Maintains a list of activations which are recently active.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IActivationWorkingSet">
            <summary>
            Manages the set of recently active <see cref="T:Orleans.Runtime.IGrainContext"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IActivationWorkingSet.Count">
            <summary>
            Returns the number of grain activations which were recently active.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSet.OnActivated(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Adds a new member to the working set.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSet.OnActive(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Signals that a member is active and should be in the working set.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSet.OnDeactivating(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Signals that a member has begun to deactivate.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSet.OnDeactivated(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Signals that a members has deactivated.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IActivationWorkingSetMember">
            <summary>
            Represents an activation from the perspective of <see cref="T:Orleans.Runtime.IActivationWorkingSet"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetMember.IsCandidateForRemoval(System.Boolean)">
            <summary>
            Returns <see langword="true"/> if the member is eligible for removal, <see langword="false"/> otherwise.
            </summary>
            <returns><see langword="true"/> if the member is eligible for removal, <see langword="false"/> otherwise.</returns>
            <remarks>
            If this method returns <see langword="true"/> and <paramref name="wouldRemove"/> is <see langword="true"/>, the member must be removed from the working set and is eligible to be added again via a call to <see cref="M:Orleans.Runtime.IActivationWorkingSet.OnActivated(Orleans.Runtime.IActivationWorkingSetMember)"/>.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.IActivationWorkingSetObserver">
            <summary>
            An <see cref="T:Orleans.Runtime.IActivationWorkingSet"/> observer.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnAdded(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation is added to the working set.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnActive(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation becomes active.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnIdle(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation becomes idle.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnEvicted(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation is removed from the working set.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnDeactivating(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation starts deactivating.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IActivationWorkingSetObserver.OnDeactivated(Orleans.Runtime.IActivationWorkingSetMember)">
            <summary>
            Called when an activation is deactivated.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Catalog.UnregisterMessageTarget(Orleans.Runtime.IGrainContext)">
            <summary>
            Unregister message target and stop delivering messages to it
            </summary>
            <param name="activation"></param>
        </member>
        <member name="M:Orleans.Runtime.Catalog.UnregisterGrainForTesting(Orleans.Runtime.GrainId)">
            <summary>
            FOR TESTING PURPOSES ONLY!!
            </summary>
            <param name="grain"></param>
        </member>
        <member name="M:Orleans.Runtime.Catalog.GetOrCreateActivation(Orleans.Runtime.GrainId@,System.Collections.Generic.Dictionary{System.String,System.Object},Orleans.Runtime.MigrationContext)">
            <summary>
            If activation already exists, use it
            Otherwise, create an activation of an existing grain by reading its state.
            Return immediately using a dummy that will queue messages.
            Concurrently start creating and initializing the real activation and replace it when it is ready.
            </summary>
            <param name="grainId">The grain identity</param>
            <param name="requestContextData">Request context data.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Catalog.TryGetGrainContext(Orleans.Runtime.GrainId,Orleans.Runtime.IGrainContext@)">
            <summary>
            Try to get runtime data for an activation
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Catalog.DeactivateActivations(Orleans.DeactivationReason,System.Collections.Generic.List{Orleans.Runtime.IGrainContext})">
            <summary>
            Gracefully deletes activations, putting it into a shutdown state to
            complete and commit outstanding transactions before deleting it.
            To be called not from within Activation context, so can be awaited.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainTypeSharedContext">
            <summary>
            Functionality which is shared between all instances of a grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.GrainTypeName">
            <summary>
            Gets the grain instance type name, if available.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContext.GetComponent``1">
            <summary>
            Gets a component.
            </summary>
            <typeparam name="TComponent">The type specified in the corresponding <see cref="M:Orleans.Runtime.GrainTypeSharedContext.SetComponent``1(``0)"/> call.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContext.SetComponent``1(``0)">
            <summary>
            Registers a component.
            </summary>
            <typeparam name="TComponent">The type which can be used as a key to <see cref="M:Orleans.Runtime.GrainTypeSharedContext.GetComponent``1"/>.</typeparam>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.CollectionAgeLimit">
            <summary>
            Gets the duration after which idle grains are eligible for collection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.SerializerSessionPool">
            <summary>
            Gets the serializer session pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.MessagingOptions">
            <summary>
            Gets the silo messaging options.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.GrainReferenceActivator">
            <summary>
            Gets the grain reference activator.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.MaxRequestProcessingTime">
            <summary>
            Gets the maximum amount of time we expect a request to continue processing before it is considered hung.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.MaxWarningRequestProcessingTime">
            <summary>
            Gets the maximum amount of time we expect a request to continue processing before a warning may be logged.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.PlacementStrategy">
            <summary>
            Gets the placement strategy used by grains of this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.SchedulingOptions">
            <summary>
            Gets the scheduling options.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.Runtime">
            <summary>
            Gets the grain runtime.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.MigrationManager">
            <summary>
            Gets the local activation migration manager.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainTypeSharedContext.InternalRuntime">
            <summary>
            Gets the internal grain runtime.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContext.OnCreateActivation(Orleans.Runtime.IGrainContext)">
            <summary>
            Called on creation of an activation.
            </summary>
            <param name="grainContext">The grain activation.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainTypeSharedContext.OnDestroyActivation(Orleans.Runtime.IGrainContext)">
            <summary>
            Called when an activation is disposed.
            </summary>
            <param name="grainContext">The grain activation.</param>
        </member>
        <member name="M:Orleans.Runtime.IActivationCollector.ScheduleCollection(Orleans.Runtime.ActivationData)">
            <summary>
            Schedule collection.
            </summary>
            <param name="item">The activation to be scheduled.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IActivationCollector.TryRescheduleCollection(Orleans.Runtime.ActivationData)">
            <summary>
            Attempt to reschedule collection.
            </summary>
            <param name="item">The activation to be rescheduled.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IncomingRequestMonitor">
            <summary>
            Monitors currently-active requests and sends status notifications to callers for long-running and blocked requests.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.StatelessWorkerGrainContext._messageLoopTask">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> representing the <see cref="M:Orleans.Runtime.StatelessWorkerGrainContext.RunMessageLoop"/> invocation.
            This is written once but never otherwise accessed. The purpose of retaining this field is for
            debugging, where being able to identify the message loop task corresponding to an activation can
            be useful.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions">
            <summary>
            Settings which regulate the placement of grains across a cluster when using <see cref="T:Orleans.Runtime.ResourceOptimizedPlacement"/>.
            </summary>
            <remarks><i>All 'weight' properties, are relative to each other.</i></remarks>
        </member>
        <member name="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.CpuUsageWeight">
            <summary>
            The importance of the CPU usage by the silo.
            </summary>
            <remarks><i>
            <para>A <u>higher</u> value results in the placement favoring silos with <u>lower</u> cpu usage.</para>
            <para>Valid range is [0-100]</para>
            </i></remarks>
        </member>
        <member name="F:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.DEFAULT_CPU_USAGE_WEIGHT">
            <summary>
            The default value of <see cref="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.CpuUsageWeight"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.MemoryUsageWeight">
            <summary>
            The importance of the memory usage by the silo.
            </summary>
            <remarks><i>
            <para>A <u>higher</u> value results in the placement favoring silos with <u>lower</u> memory usage.</para>
            <para>Valid range is [0-100]</para>
            </i></remarks>
        </member>
        <member name="F:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.DEFAULT_MEMORY_USAGE_WEIGHT">
            <summary>
            The default value of <see cref="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.MemoryUsageWeight"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.AvailableMemoryWeight">
            <summary>
            The importance of the available memory to the silo.
            </summary>
            <remarks><i>
            <para>A <u>higher</u> values results in the placement favoring silos with <u>higher</u> available memory.</para>
            <para>Valid range is [0-100]</para>
            </i></remarks>
        </member>
        <member name="F:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.DEFAULT_AVAILABLE_MEMORY_WEIGHT">
            <summary>
            The default value of <see cref="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.AvailableMemoryWeight"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.PhysicalMemoryWeight">
            <summary>
            The importance of the physical memory to the silo.
            </summary>
            <remarks><i>
            <para>A <u>higher</u> values results in the placement favoring silos with <u>higher</u> physical memory.</para>
            <para>This may have an impact in clusters with resources distributed unevenly across silos.</para>
            <para>Valid range is [0-100]</para>
            </i></remarks>
        </member>
        <member name="F:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.DEFAULT_PHYSICAL_MEMORY_WEIGHT">
            <summary>
            The default value of <see cref="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.PhysicalMemoryWeight"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.LocalSiloPreferenceMargin">
            <summary>
            The specified margin for which: if two silos (one of them being the local to the current pending activation), have a utilization score that should be considered "the same" within this margin.
            <list type="bullet">
            <item>When this value is 0, then the policy will always favor the silo with the lower resource utilization, even if that silo is remote to the current pending activation.</item>
            <item>When this value is 100, then the policy will always favor the local silo, regardless of its relative utilization score. This policy essentially becomes equivalent to <see cref="T:Orleans.Runtime.PreferLocalPlacement"/>.</item>
            </list>
            </summary>
            <remarks><i>
            <para>Do favor a lower value for this e.g: 5-10</para>
            <para>Valid range is [0-100]</para>
            </i></remarks>
        </member>
        <member name="F:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.DEFAULT_LOCAL_SILO_PREFERENCE_MARGIN">
            <summary>
            The default value of <see cref="P:Orleans.Runtime.Configuration.Options.ResourceOptimizedPlacementOptions.LocalSiloPreferenceMargin"/>.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.SiloClusteringValidator">
            <summary>
            Validates basic cluster membership configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.SiloClusteringValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ConsistentRing.ConsistentRingProvider">
            <summary>
            We use the 'backward/clockwise' definition to assign responsibilities on the ring. 
            E.g. in a ring of nodes {5, 10, 15} the responsible for key 7 is 10 (the node is responsible for its predecessing range). 
            The backwards/clockwise approach is consistent with many overlays, e.g., Chord, Cassandra, etc.
            Note: MembershipOracle uses 'forward/counter-clockwise' definition to assign responsibilities. 
            E.g. in a ring of nodes {5, 10, 15}, the responsible of key 7 is node 5 (the node is responsible for its sucessing range)..
            </summary>
        </member>
        <member name="F:Orleans.Runtime.ConsistentRing.ConsistentRingProvider.membershipRingList">
            list of silo members sorted by the hash value of their address
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.ConsistentRingProvider.GetPrimaryTargetSilo(System.UInt32)">
            <summary>
            Returns the silo that this silo thinks is the primary owner of the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.ConsistentRingProvider.CalculateTargetSilo(System.UInt32,System.Boolean)">
            <summary>
            Finds the silo that owns the given hash value.
            This routine will always return a non-null silo address unless the excludeThisSiloIfStopping parameter is true,
            this is the only silo known, and this silo is stopping.
            </summary>
            <param name="hash"></param>
            <param name="excludeThisSiloIfStopping"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.IConsistentRingProvider.GetMyRange">
            <summary>
            Get the responsibility range of the current silo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.IConsistentRingProvider.SubscribeToRangeChangeEvents(Orleans.Runtime.ConsistentRing.IRingRangeListener)">
            <summary>
            Subscribe to receive range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.IConsistentRingProvider.UnSubscribeFromRangeChangeEvents(Orleans.Runtime.ConsistentRing.IRingRangeListener)">
            <summary>
            Unsubscribe from receiving range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.IConsistentRingProvider.GetPrimaryTargetSilo(System.UInt32)">
            <summary>
            Get the silo responsible for <paramref name="key"/> according to consistent hashing
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.ConsistentRing.VirtualBucketsRingProvider">
            <summary>
            We use the 'backward/clockwise' definition to assign responsibilities on the ring.
            E.g. in a ring of nodes {5, 10, 15} the responsible for key 7 is 10 (the node is responsible for its predecessing range).
            The backwards/clockwise approach is consistent with many overlays, e.g., Chord, Cassandra, etc.
            Note: MembershipOracle uses 'forward/counter-clockwise' definition to assign responsibilities.
            E.g. in a ring of nodes {5, 10, 15}, the responsible of key 7 is node 5 (the node is responsible for its sucessing range)..
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ConsistentRing.VirtualBucketsRingProvider.CalculateTargetSilo(System.UInt32,System.Boolean)">
            <summary>
            Finds the silo that owns the given hash value.
            This routine will always return a non-null silo address unless the excludeThisSiloIfStopping parameter is true,
            this is the only silo known, and this silo is stopping.
            </summary>
            <param name="hash"></param>
            <param name="excludeThisSiloIfStopping"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.SimpleConsistentRingProvider">
            <summary>
            Aids in the construction of a consistent hash ring by maintaining an up-to-date reference to the next silo in the ring.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleConsistentRingProvider.Successor">
            <summary>
            Gets the <see cref="T:Orleans.Runtime.SiloAddress"/> of the active silo with the smallest consistent hash code value which is larger
            than this silo's, or if no such silo exists, then the active silo with the absolute smallest consistent hash code,
            or <see langword="null"/> if there are no other active silos in the cluster.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainMethodInvoker">
            <summary>
            Invokes a request on a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainMethodInvoker.#ctor(Orleans.Runtime.Message,Orleans.Runtime.IGrainContext,Orleans.Serialization.Invocation.IInvokable,System.Collections.Generic.List{Orleans.IIncomingGrainCallFilter},Orleans.InterfaceToImplementationMappingCache,Orleans.Serialization.DeepCopier{Orleans.Serialization.Invocation.Response})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GrainMethodInvoker"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="grainContext">The grain.</param>
            <param name="request">The request.</param>
            <param name="filters">The invocation interceptors.</param>
            <param name="interfaceToImplementationMapping">The implementation map.</param>
            <param name="responseCopier">The response copier.</param>
        </member>
        <member name="T:Orleans.Runtime.HostedClient">
            <summary>
            A client which is hosted within a silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.HostedClient.ClientId">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.HostedClient.ToString">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.HostedClient.CreateObjectReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.HostedClient.DeleteObjectReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.HostedClient.TryDispatchToClient(Orleans.Runtime.Message)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.HostedClient.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.IFatalErrorHandler">
            <summary>
            Interface for controlling how fatal errors (such as a silo being declared defunct) are handled.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IFatalErrorHandler.IsUnexpected(System.Exception)">
            <summary>
            Determines whether the specified exception is unexpected.
            </summary>
            <param name="exception">The exception.</param>
            <returns><see langword="true"/> if the specified exception is unexpected; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.IFatalErrorHandler.OnFatalException(System.Object,System.String,System.Exception)">
            <summary>
            Called when a fatal exception occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="context">The context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Orleans.Runtime.IHealthCheckParticipant">
            <summary>
            Interface for health check participants
            </summary>
        </member>
        <member name="T:Orleans.Runtime.InsideRuntimeClient">
            <summary>
            Internal class for system grains to get access to runtime object
            </summary>
        </member>
        <member name="M:Orleans.Runtime.InsideRuntimeClient.UnregisterCallback(Orleans.Runtime.GrainId,Orleans.Runtime.CorrelationId)">
            <summary>
            UnRegister a callback.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.InsideRuntimeClient.GetResponseTimeout">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InsideRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.InternalClusterClient">
            <summary>
            Client for communicating with clusters of Orleans silos.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.#ctor(Orleans.Runtime.IRuntimeClient,Orleans.IInternalGrainFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.InternalClusterClient"/> class.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.InternalClusterClient.GrainFactory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.InternalClusterClient.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IInternalGrainFactory#GetSystemTarget``1(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IInternalGrainFactory#GetSystemTarget``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IInternalGrainFactory#Cast``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IInternalGrainFactory#Cast(Orleans.Runtime.IAddressable,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IGrainFactory#GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.Orleans#IGrainFactory#GetGrain(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain(System.Type,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain(System.Type,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain(System.Type,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.InternalClusterClient.GetGrain(System.Type,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.InternalGrainRuntime">
            <summary>
            Shared runtime services which grains use.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Management.ManagementGrain">
            <summary>
            Implementation class for the Orleans management grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Management.ManagementGrain.PerformPerSiloAction(Orleans.Runtime.SiloAddress[],System.Func{Orleans.Runtime.SiloAddress,System.Threading.Tasks.Task})">
            <summary>
            Perform an action for each silo.
            </summary>
            <remarks>
            Because SiloControl contains a reference to a system target, each method call using that reference
            will get routed either locally or remotely to the appropriate silo instance auto-magically.
            </remarks>
            <param name="siloAddresses">List of silos to perform the action for</param>
            <param name="perSiloAction">The action function to be performed for each silo</param>
            <returns>Array containing one Task for each silo the action was performed for</returns>
        </member>
        <member name="T:Orleans.Runtime.SystemStatus">
            <summary>
            System status values and current register
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Unknown">
            <summary>Status = Unknown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Creating">
            <summary>Status = Creating</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Created">
            <summary>Status = Created</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Starting">
            <summary>Status = Starting</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Running">
            <summary>Status = Running</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Stopping">
            <summary>Status = Stopping</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.ShuttingDown">
            <summary>Status = ShuttingDown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Terminated">
            <summary>Status = Terminated</summary>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(Orleans.Runtime.SystemStatus)">
            <see cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="T:Orleans.Runtime.SystemTarget">
            <summary>
            Base class for various system services, such as grain directory, reminder service, etc.
            Made public for GrainSerive to inherit from it.
            Can be turned to internal after a refactoring that would remove the inheritance relation.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Silo">
            <summary>Silo address of the system target.</summary>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.GrainReference">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.GrainId">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Orleans#Runtime#IGrainContext#GrainInstance">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Orleans#Runtime#IGrainContext#ActivationId">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Orleans#Runtime#IGrainContext#Address">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.#ctor">
            <summary>Only needed to make Reflection happy.</summary>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.ActivationServices">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Orleans#Runtime#IGrainContext#ObservableLifecycle">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Scheduler">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.GetComponent``1">
            <summary>
            Gets the component with the specified type.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <returns>The component with the specified type.</returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.SetComponent``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Registers a timer to send regular callbacks to this grain.
            This timer will keep the current grain from being deactivated.
            </summary>
            <param name="asyncCallback">The timer callback, which will fire whenever the timer becomes due.</param>
            <param name="state">The state object passed to the callback.</param>
            <param name="dueTime">
            The amount of time to delay before the <paramref name="asyncCallback"/> is invoked.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to prevent the timer from starting.
            Specify <see cref="F:System.TimeSpan.Zero"/> to invoke the callback promptly.
            </param>
            <param name="period">
            The time interval between invocations of <paramref name="asyncCallback"/>.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable periodic signalling.
            </param>
            <param name="name">The timer name.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> object which will cancel the timer upon disposal.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.RegisterGrainTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Internal version of <see cref="M:Orleans.Runtime.SystemTarget.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan,System.String)"/> that returns the inner IGrainTimer
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.ToDetailedString">
            <summary>Adds details about message currently being processed</summary>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.System#IEquatable{Orleans#Runtime#IGrainContext}#Equals(Orleans.Runtime.IGrainContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.GetOrSetExtension``2(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.Orleans#Serialization#Invocation#ITargetHolder#GetComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.GetExtension``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.ReceiveMessage(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.GetTarget``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.Activate(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.SystemTarget.Deactivate(Orleans.DeactivationReason,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Runtime.SystemTarget.Deactivated">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.Development.DevelopmentSiloBuilderExtensions">
            <summary>
            <see cref="T:Orleans.Hosting.ISiloBuilder"/> extensions to configure an in-memory lease provider.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Development.DevelopmentSiloBuilderExtensions.UseInMemoryLeaseProvider(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Configures silo with test/development features.
            </summary>
            <remarks>
            Not for production use. This is for development and test scenarios only.
            </remarks>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.Runtime.Development.InMemoryLeaseProvider">
            <summary>
            In memory lease provider for development and test use.
            This provider stores lease information in memory an can be lost if grain
            becomes inactive or if silo crashes.  This implementation is only intended
            for test or local development purposes - NOT FOR PRODUCTION USE.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Development.InMemoryLeaseProvider.#ctor(Orleans.IGrainFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Development.InMemoryLeaseProvider"/> class.
            </summary>
            <param name="grainFactory">The grain factory.</param>
        </member>
        <member name="M:Orleans.Runtime.Development.InMemoryLeaseProvider.Acquire(System.String,Orleans.LeaseProviders.LeaseRequest[])">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.Development.InMemoryLeaseProvider.Release(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.Development.InMemoryLeaseProvider.Renew(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.Development.IDevelopmentLeaseProviderGrain.Reset">
            <summary>
            Forgets about all leases.  Used to simulate loss of this grain or to force rebalance of queues
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.Development.DevelopmentLeaseProviderGrain">
            <summary>
            Grain that stores lease information in memory.
            TODO: Consider making this a stateful grain, as a production viable implementation of lease provider that works with storage
            providers.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainConstructorArgumentFactory">
            <summary>
            Constructs instances of a grain class using constructor dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainConstructorArgumentFactory.#ctor(System.IServiceProvider,System.Type)">
            <summary>
            Initializes a new <see cref="T:Orleans.Runtime.GrainConstructorArgumentFactory"/> instance.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="grainType">The grain type.</param>
        </member>
        <member name="P:Orleans.Runtime.GrainConstructorArgumentFactory.ArgumentTypes">
            <summary>
            Gets the constructor argument types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainConstructorArgumentFactory.CreateArguments(Orleans.Runtime.IGrainContext)">
            <summary>
            Creates the arguments for the grain constructor.
            </summary>
            <param name="grainContext">The grain context.</param>
            <returns>The constructor arguments.</returns>
        </member>
        <member name="T:Orleans.Runtime.IAttributeToFactoryMapper`1">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IAttributeToFactoryMapper`1.GetFactory(System.Reflection.ParameterInfo,`0)">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory from the parameter and facet metadata.
            </summary>
            <param name="parameter">The parameter info.</param>
            <param name="metadata">The metadata.</param>
            <returns>The factory used to create facet instances for a grain.</returns>
        </member>
        <member name="T:Orleans.Runtime.IPersistentState`1">
            <summary>
            Provides access to grain state with functionality to save, clear, and refresh the state.
            </summary>
            <typeparam name="TState">The underlying state type.</typeparam>
            <seealso cref="T:Orleans.Core.IStorage`1" />
        </member>
        <member name="T:Orleans.Runtime.IPersistentStateConfiguration">
            <summary>
            Configuration for persistent state.
            </summary>
            <seealso cref="T:Orleans.Runtime.IPersistentState`1"/>
        </member>
        <member name="P:Orleans.Runtime.IPersistentStateConfiguration.StateName">
            <summary>
            Gets the name of the state.
            </summary>
            <value>The name of the state.</value>
        </member>
        <member name="P:Orleans.Runtime.IPersistentStateConfiguration.StorageName">
            <summary>
            Gets the name of the storage provider.
            </summary>
            <value>The name of the storage provider.</value>
        </member>
        <member name="T:Orleans.Runtime.IPersistentStateFactory">
            <summary>
            Factory for constructing <see cref="T:Orleans.Runtime.IPersistentState`1"/> instances for a grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IPersistentStateFactory.Create``1(Orleans.Runtime.IGrainContext,Orleans.Runtime.IPersistentStateConfiguration)">
            <summary>
            Creates a persistent state instance for the provided grain.
            </summary>
            <typeparam name="TState">The underlying state type.</typeparam>
            <param name="context">The grain context.</param>
            <param name="config">The state facet configuration.</param>
            <returns>A persistent state instance for the provided grain with the specified configuration.</returns>
        </member>
        <member name="T:Orleans.Runtime.PersistentStateAttribute">
            <summary>
            Specifies options for the <see cref="T:Orleans.Runtime.IPersistentState`1"/> constructor argument which it is applied to.
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Orleans.IFacetMetadata" />
            <seealso cref="T:Orleans.Runtime.IPersistentStateConfiguration" />
        </member>
        <member name="M:Orleans.Runtime.PersistentStateAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.PersistentStateAttribute"/> class.
            </summary>
            <param name="stateName">Name of the state.</param>
            <param name="storageName">Name of the storage provider.</param>
        </member>
        <member name="P:Orleans.Runtime.PersistentStateAttribute.StateName">
            <summary>
            Gets the name of the state.
            </summary>
            <value>The name of the state.</value>
        </member>
        <member name="P:Orleans.Runtime.PersistentStateAttribute.StorageName">
            <summary>
            Gets the name of the storage provider.
            </summary>
            <value>The name of the storage provider.</value>
        </member>
        <member name="T:Orleans.Runtime.PersistentStateFactory">
            <summary>
            Creates <see cref="T:Orleans.Runtime.IPersistentState`1"/> instances for grains.
            </summary>
            <seealso cref="T:Orleans.Runtime.IPersistentStateFactory" />
        </member>
        <member name="M:Orleans.Runtime.PersistentStateFactory.Create``1(Orleans.Runtime.IGrainContext,Orleans.Runtime.IPersistentStateConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.AdaptiveDirectoryCacheMaintainer.BuildGrainAndETagList(System.Collections.Generic.List{Orleans.Runtime.GrainId})">
            <summary>
            Gets the list of grains (all owned by the same silo) and produces a new list
            of tuples, where each tuple holds the grain and its generation counter currently stored in the cache
            </summary>
            <param name="grains">List of grains owned by the same silo</param>
            <returns>List of grains in input along with their generation counters stored in the cache </returns>
        </member>
        <member name="P:Orleans.Runtime.GrainDirectory.AdaptiveGrainDirectoryCache.GrainDirectoryCacheEntry.NumAccesses">
            <summary>
            flag notifying whether this cache entry was accessed lately
            (more precisely, since the last refresh)
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainDirectory.AdaptiveGrainDirectoryCache.initialExpirationTimer">
            controls the time the new entry is considered "fresh" (unit: ms)
        </member>
        <member name="F:Orleans.Runtime.GrainDirectory.AdaptiveGrainDirectoryCache.exponentialTimerGrowth">
            controls the exponential growth factor (i.e., x2, x4) for the freshness timer (unit: none)
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.CachedGrainLocator">
            <summary>
            Implementation of <see cref="T:Orleans.GrainDirectory.IGrainLocator"/> that uses <see cref="T:Orleans.GrainDirectory.IGrainDirectory"/> stores.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.ClientDirectory">
            <summary>
            A directory for routes to clients (external clients and hosted clients).
            </summary>
            <remarks>
            <see cref="T:Orleans.Runtime.GrainDirectory.ClientDirectory"/> maintains routing information for all known clients and offers consumers the ability to lookup
            clients by their <see cref="T:Orleans.Runtime.GrainId"/>.
            To accomplish this, <see cref="T:Orleans.Runtime.GrainDirectory.ClientDirectory"/> monitors locally connected clients and cluster membership changes. In addition,
            known routes are periodically shared with remote silos in a ring-fashion. Each silo will push updates to the next silo in the ring.
            When a silo receives an update, it incorporates it into its routing table. If the update caused a change in the routing table, then
            the silo will propagate its updates routing table to the next silo. This process continues until all silos converge.
            Each <see cref="T:Orleans.Runtime.GrainDirectory.ClientDirectory"/> maintains an internal version number which represents its view of the locally connected clients.
            This version number is propagated around the ring during updates and is used to determine when a remote silo's set of locally connected clients
            has updated.
            The process of removing defunct clients is left to the <see cref="T:Orleans.Runtime.IConnectedClientCollection"/> implementation on each silo.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ClientDirectory.GetConnectedClients(System.Collections.Immutable.ImmutableHashSet{Orleans.Runtime.GrainId},System.Int64)">
            <summary>
            Gets the collection of locally connected clients.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.ClientGrainLocator">
            <summary>
            Implementation of <see cref="T:Orleans.GrainDirectory.IGrainLocator"/> that uses the in memory distributed directory of Orleans
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.DhtGrainLocator">
            <summary>
            Implementation of <see cref="T:Orleans.GrainDirectory.IGrainLocator"/> that uses the in memory distributed directory of Orleans
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.GrainDirectoryCacheFactory">
            <summary>
            Creates <see cref="T:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryCacheFactory.CreateGrainDirectoryCache(System.IServiceProvider,Orleans.Configuration.GrainDirectoryOptions)">
            <summary>
            Creates a new grain directory cache instance.
            </summary>
            <param name="services">The services.</param>
            <param name="options">The options.</param>
            <returns>The newly created <see cref="T:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache"/> instance.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager">
            <summary>
            Most methods of this class are synchronized since they might be called both
            from LocalGrainDirectory on CacheValidator.SchedulingContext and from RemoteGrainDirectory.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.partitionData">
            <summary>
            contains a map from grain to its list of activations along with the version (etag) counter for the list
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.GetItems">
            <summary>
            Returns all entries stored in the partition as an enumerable collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.AddSingleActivation(Orleans.Runtime.GrainAddress,Orleans.Runtime.GrainAddress)">
            <summary>
            Adds a new activation to the directory partition
            </summary>
            <returns>The registered ActivationAddress and version associated with this directory mapping</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.RemoveActivation(Orleans.Runtime.GrainId,Orleans.Runtime.ActivationId,Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Removes an activation of the given grain from the partition
            </summary>
            <param name="grain">the identity of the grain</param>
            <param name="activation">the id of the activation</param>
            <param name="cause">reason for removing the activation</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.RemoveGrain(Orleans.Runtime.GrainId)">
            <summary>
            Removes the grain (and, effectively, all its activations) from the directory
            </summary>
            <param name="grain"></param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.GetGrainETag(Orleans.Runtime.GrainId)">
            <summary>
            Returns the version number of the list of activations for the grain.
            If the grain is not found, -1 is returned.
            </summary>
            <param name="grain"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.Merge(Orleans.Runtime.GrainDirectory.GrainDirectoryPartition)">
            <summary>
            Merges one partition into another, assuming partitions are disjoint.
            This method is supposed to be used by handoff manager to update the partitions when the system view (set of live silos) changes.
            </summary>
            <param name="other"></param>
            <returns>Activations which must be deactivated.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.Split(System.Predicate{Orleans.Runtime.GrainId})">
            <summary>
            Runs through all entries in the partition and moves/copies (depending on the given flag) the
            entries satisfying the given predicate into a new partition.
            This method is supposed to be used by handoff manager to update the partitions when the system view (set of live silos) changes.
            </summary>
            <param name="predicate">filter predicate (usually if the given grain is owned by particular silo)</param>
            <returns>Entries satisfying the given predicate</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.Set(System.Collections.Generic.Dictionary{Orleans.Runtime.GrainId,Orleans.Runtime.GrainDirectory.GrainInfo})">
            <summary>
            Sets the internal partition dictionary to the one given as input parameter.
            This method is supposed to be used by handoff manager to update the old partition with a new partition.
            </summary>
            <param name="newPartitionData">new internal partition dictionary</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryPartition.Update(System.Collections.Generic.Dictionary{Orleans.Runtime.GrainId,Orleans.Runtime.GrainDirectory.GrainInfo})">
            <summary>
            Updates partition with a new delta of changes.
            This method is supposed to be used by handoff manager to update the partition with a set of delta changes.
            </summary>
            <param name="newPartitionDelta">dictionary holding a set of delta updates to this partition.
            If the value for a given key in the delta is valid, then existing entry in the partition is replaced.
            Otherwise, i.e., if the value is null, the corresponding entry is removed.
            </param>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.GrainLocator">
            <summary>
            Provides functionality for locating grain activations in a cluster and registering the location of grain activations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache">
            <summary>
            Caches grain directory entries.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.AddOrUpdate(Orleans.Runtime.GrainAddress,System.Int32)">
            <summary>
            Adds a new entry with the given version into the cache: key (grain) --> value
            The new entry will override any existing entry under the given key, 
            regardless of the stored version
            </summary>
            <param name="value">value to add</param>
            <param name="version">version for the value</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.Remove(Orleans.Runtime.GrainId)">
            <summary>
            Removes an entry from the cache given its key
            </summary>
            <param name="key">key to remove</param>
            <returns>True if the entry was in the cache and the removal was successful</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.Remove(Orleans.Runtime.GrainAddress)">
            <summary>
            Removes an entry from the cache given its key
            </summary>
            <param name="key">key to remove</param>
            <returns>True if the entry was in the cache and the removal was successful</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.Clear">
            <summary>
            Clear the cache, deleting all entries.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.LookUp(Orleans.Runtime.GrainId,Orleans.Runtime.GrainAddress@,System.Int32@)">
            <summary>
            Looks up the cached value and version by the given key
            </summary>
            <param name="key">key for the lookup</param>
            <param name="result">value if the key is found, undefined otherwise</param>
            <param name="version">version of cached value if the key is found, undefined otherwise</param>
            <returns>true if the given key is in the cache</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache.KeyValues">
            <summary>
            Returns list of key-value-version tuples stored currently in the cache.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.GrainDirectoryCacheExtensions.LookUp(Orleans.Runtime.GrainDirectory.IGrainDirectoryCache,Orleans.Runtime.GrainId,Orleans.Runtime.GrainAddress@)">
            <summary>
            Looks up the cached value by the given key.
            </summary>
            <param name="cache">grain directory cache to look up results from</param>
            <param name="key">key for the lookup</param>
            <param name="result">value if the key is found, undefined otherwise</param>
            <returns>true if the given key is in the cache</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainDirectory.IGrainDirectoryResolver">
            <summary>
            Associates an <see cref="T:Orleans.GrainDirectory.IGrainDirectory"/> instance with a <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.IGrainDirectoryResolver.TryResolveGrainDirectory(Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties,Orleans.GrainDirectory.IGrainDirectory@)">
            <summary>
            Gets an <see cref="T:Orleans.GrainDirectory.IGrainDirectory" /> instance for the provided <see cref="T:Orleans.Runtime.GrainType" />.
            </summary>
            <param name="grainType">Type of the grain.</param>
            <param name="properties">The properties.</param>
            <param name="grainDirectory">The grain directory.</param>
            <returns>true if an appropriate grain directory was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.Start">
            <summary>
            Starts the local portion of the directory service.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.Stop">
            <summary>
            Stops the local portion of the directory service.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.UnregisterAfterNonexistingActivation(Orleans.Runtime.GrainAddress,Orleans.Runtime.SiloAddress)">
            <summary>
            Removes the record for an non-existing activation from the directory service.
            This is used when a request is received for an activation that cannot be found, 
            to lazily clean up the remote directory.
            The timestamp is used to prevent removing a valid entry in a possible (but unlikely)
            race where a request is received for a new activation before the request that causes the
            new activation to be created.
            Note that this method is a no-op if the global configuration parameter DirectoryLazyDeregistrationDelay
            is a zero or negative TimeSpan.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to remove.</param>
            <param name="origin"> the silo from which the message to the non-existing activation was sent</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.LocalLookup(Orleans.Runtime.GrainId,Orleans.GrainDirectory.AddressAndTag@)">
            <summary>
            Fetches locally known directory information for a grain.
            If there is no local information, either in the cache or in this node's directory partition,
            then this method will return false and leave the list empty.
            </summary>
            <param name="grain">The ID of the grain to look up.</param>
            <param name="addresses">An output parameter that receives the list of locally-known activations of the grain.</param>
            <returns>True if remote addresses are complete within freshness constraint</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.InvalidateCacheEntry(Orleans.Runtime.GrainAddress)">
            <summary>
            Invalidates cache entry for the given activation address.
            This method is intended to be called whenever a directory client tries to access 
            an activation returned from the previous directory lookup and gets a reject from the target silo 
            notifying him that the activation does not exist.
            </summary>
            <param name="activation">The address of the activation that needs to be invalidated in the directory cache for the given grain.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.InvalidateCacheEntry(Orleans.Runtime.GrainId)">
            <summary>
            Invalidates cache entry for the given grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.AddOrUpdateCacheEntry(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Adds or updates a cache entry for the given activation address.
            This method is intended to be called whenever a placement decision is made.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.GetPrimaryForGrain(Orleans.Runtime.GrainId)">
            <summary>
            For testing purposes only.
            Returns the silo that this silo thinks is the primary owner of directory information for
            the provided grain ID.
            </summary>
            <param name="grain"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.GetLocalDirectoryData(Orleans.Runtime.GrainId)">
            <summary>
            Returns the directory information held in a local directory partition for the provided grain ID.
            The result will be null if no information is held.
            </summary>
            <param name="grain"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.GetLocalCacheData(Orleans.Runtime.GrainId)">
            <summary>
            For testing and troubleshooting purposes only.
            Returns the directory information held in a local directory cache for the provided grain ID.
            The result will be null if no information is held.
            </summary>
            <param name="grain"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.TryCachedLookup(Orleans.Runtime.GrainId,Orleans.Runtime.GrainAddress@)">
            <summary>
            Attempts to find the specified grain in the directory cache.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.IsSiloInCluster(Orleans.Runtime.SiloAddress)">
            <summary>
            For determining message forwarding logic, we sometimes check if a silo is part of this cluster or not
            </summary>
            <param name="silo">the address of the silo</param>
            <returns>true if the silo is known to be part of this cluster</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.ILocalGrainDirectory.SetSiloRemovedCatalogCallback(System.Action{Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus})">
            <summary>
            Sets the callback to <see cref="T:Orleans.Runtime.Catalog"/> which is called when a silo is removed from membership.
            </summary>
            <param name="catalogOnSiloRemoved">The callback.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.LocalGrainDirectory.SetSiloRemovedCatalogCallback(System.Action{Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.LocalGrainDirectory.AdjustLocalDirectory(Orleans.Runtime.SiloAddress,System.Boolean)">
            <summary>
            Adjust local directory following the addition/removal of a silo
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.LocalGrainDirectory.AdjustLocalCache(Orleans.Runtime.SiloAddress,System.Boolean)">
            Adjust local cache following the removal of a silo by dropping:
            1) entries that point to activations located on the removed silo
            2) entries for grains that are now owned by this silo (me)
            3) entries for grains that were owned by this removed silo - we currently do NOT do that.
                If we did 3, we need to do that BEFORE we change the membershipRingList (based on old Membership).
                We don't do that since first cache refresh handles that.
                Second, since Membership events are not guaranteed to be ordered, we may remove a cache entry that does not really point to a failed silo.
                To do that properly, we need to store for each cache entry who was the directory owner that registered this activation (the original partition owner).
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.LocalGrainDirectory.CalculateGrainDirectoryPartition(Orleans.Runtime.GrainId)">
            <summary>
            Finds the silo that owns the directory information for the given grain ID.
            This method will only be null when I'm the only silo in the cluster and I'm shutting down
            </summary>
            <param name="grainId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainDirectory.LocalGrainDirectory.GetPrimaryForGrain(Orleans.Runtime.GrainId)">
            <summary>
            For testing purposes only.
            Returns the silo that this silo thinks is the primary owner of directory information for
            the provided grain ID.
            </summary>
            <param name="grain"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IRemoteGrainDirectory">
            <summary>
            Per-silo system interface for managing the distributed, partitioned grain-silo-activation directory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterMany(System.Collections.Generic.List{Orleans.Runtime.GrainAddress})">
            <summary>
            Records a bunch of new grain activations.
            This method should be called only remotely during handoff.
            </summary>
            <param name="addresses">The addresses of the grains to register</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.LookUpMany(System.Collections.Generic.List{System.ValueTuple{Orleans.Runtime.GrainId,System.Int32}})">
            <summary>
            Fetch the updated information on the given list of grains.
            This method should be called only remotely to refresh directory caches.
            </summary>
            <param name="grainAndETagList">list of grains and generation (version) numbers. The latter denote the versions of 
            the lists of activations currently held by the invoker of this method.</param>
            <returns>list of tuples holding a grain, generation number of the list of activations, and the list of activations. 
            If the generation number of the invoker matches the number of the destination, the list is null. If the destination does not
            hold the information on the grain, generation counter -1 is returned (and the list of activations is null)</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.AcceptSplitPartition(System.Collections.Generic.List{Orleans.Runtime.GrainAddress})">
            <summary>
            Registers activations from a split partition with this directory.
            </summary>
            <param name="singleActivations">The single-activation registrations from the split partition.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Hosting.DirectorySiloBuilderExtensions.AddGrainDirectory``1(Orleans.Hosting.ISiloBuilder,System.String,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Add a grain directory provider implementation to the silo. If the provider type implements <see cref="T:Orleans.ILifecycleParticipant`1"/>
            it will automatically participate to the silo lifecycle.
            </summary>
            <typeparam name="T">The concrete implementation type of the grain directory provider.</typeparam>
            <param name="builder">The silo builder.</param>
            <param name="name">The name of the grain directory to add.</param>
            <param name="implementationFactory">Factory to build the grain directory provider.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Runtime.Hosting.DirectorySiloBuilderExtensions.AddGrainDirectory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Add a grain directory provider implementation to the silo. If the provider type implements <see cref="T:Orleans.ILifecycleParticipant`1"/>
            it will automatically participate to the silo lifecycle.
            </summary>
            <typeparam name="T">The concrete implementation type of the grain directory provider.</typeparam>
            <param name="collection">The service collection.</param>
            <param name="name">The name of the grain directory to add.</param>
            <param name="implementationFactory">Factory to build the grain directory provider.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Runtime.Hosting.DirectorySiloBuilderExtensions.GetGrainDirectory(System.IServiceProvider,System.String)">
            <summary>
            Get the directory registered with <paramref name="name"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="name">The name of the grain directory to resolve.</param>
            <returns>The grain directory registered with <paramref name="name"/>, or <code>null</code> if it is not found</returns>
        </member>
        <member name="M:Orleans.Runtime.Hosting.StorageProviderExtensions.AddGrainStorage``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Add a grain storage provider implementation to the silo. If the provider type implements <see cref="T:Orleans.ILifecycleParticipant`1"/>
            it will automatically participate to the silo lifecycle.
            </summary>
            <typeparam name="T">The concrete implementation type of the grain storage provider.</typeparam>
            <param name="collection">The service collection.</param>
            <param name="name">The name of the storage to add.</param>
            <param name="implementationFactory">Factory to build the storage provider.</param>
            <returns>The service provider.</returns>
        </member>
        <member name="T:Orleans.Runtime.ISiloLifecycle">
            <summary>
            The observable silo lifecycle.
            </summary>
            <remarks>
            This type is usually used as the generic parameter in <see cref="T:Orleans.ILifecycleParticipant`1"/> as
            a means of participating in the lifecycle stages of a silo.
            </remarks>
            <seealso cref="T:Orleans.ILifecycleObservable" />
        </member>
        <member name="P:Orleans.Runtime.ISiloLifecycle.HighestCompletedStage">
            <summary>
            The highest lifecycle stage which has completed starting.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloLifecycle.LowestStoppedStage">
            <summary>
            The lowest lifecycle stage which has completed stopping.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ISiloLifecycleSubject">
            <summary>
            Observable silo lifecycle and observer.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IStartupTask">
            <summary>
            Defines an action to be taken after silo startup.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IStartupTask.Execute(System.Threading.CancellationToken)">
            <summary>
            Called after the silo has started.
            </summary>
            <param name="cancellationToken">The cancellation token which is canceled when the method must abort.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.Runtime.SiloLifecycleSubject">
            <summary>
            Decorator over lifecycle subject for silo.  Adds some logging and monitoring
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloLifecycleSubject.HighestCompletedStage">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.SiloLifecycleSubject.LowestStoppedStage">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.#ctor(Microsoft.Extensions.Logging.ILogger{Orleans.Runtime.SiloLifecycleSubject})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.SiloLifecycleSubject"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.OnStart(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.OnStartStageCompleted(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.OnStopStageCompleted(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.GetStageName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.PerfMeasureOnStop(System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.PerfMeasureOnStart(System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.SiloLifecycleSubject.Subscribe(System.String,System.Int32,Orleans.ILifecycleObserver)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.MembershipService.ClusterHealthMonitor">
            <summary>
            Responsible for ensuring that this silo monitors other silos in the cluster.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor">
            <summary>
            Exposes private members of <see cref="T:Orleans.Runtime.MembershipService.ClusterHealthMonitor"/> for test purposes.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.ClusterHealthMonitor.SiloMonitors">
            <summary>
            Gets the collection of monitored silos.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.ClusterHealthMonitor.OnProbeResultInternal(Orleans.Runtime.MembershipService.SiloHealthMonitor,Orleans.Runtime.MembershipService.SiloHealthMonitor.ProbeResult)">
            <summary>
            Performs the default action when a new probe result is created.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.IRemoteSiloProber">
            <summary>
            Responsible for probing remote silos for responsiveness.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.IRemoteSiloProber.Probe(Orleans.Runtime.SiloAddress,System.Int32)">
            <summary>
            Probes the specified <paramref name="silo"/> for responsiveness.
            </summary>
            <param name="silo">The silo to probe.</param>
            <param name="probeNumber">The probe identifier for diagnostic purposes.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which completes when the probe returns successfully and faults when the probe fails.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.IRemoteSiloProber.ProbeIndirectly(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloAddress,System.TimeSpan,System.Int32)">
            <summary>
            Probes the specified <paramref name="target"/> indirectly, via <paramref name="intermediary"/>.
            </summary>
            <param name="intermediary">The silo which will perform a direct probe.</param>
            <param name="target">The silo which will be probed.</param>
            <param name="probeTimeout">The timeout which the <paramref name="intermediary" /> should apply to the probe.</param>
            <param name="probeNumber">The probe number for diagnostic purposes.</param>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.ILocalSiloHealthMonitor.GetLocalHealthDegradationScore(System.DateTime)">
            <summary>
            Returns the local health degradation score, which is a value between 0 (healthy) and <see cref="F:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.MaxScore"/> (unhealthy).
            </summary>
            <param name="checkTime">The time which the check is taking place.</param>
            <returns>The local health degradation score, which is a value between 0 (healthy) and <see cref="F:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.MaxScore"/> (unhealthy).</returns>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.ILocalSiloHealthMonitor.Complaints">
            <summary>
            The most recent list of detected health issues.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor">
            <summary>
            Monitors the health of the local node using a combination of heuristics to create a health degradation score which
            is exposed as a boolean value: whether or not the local node's health is degraded.
            </summary>
            <remarks>
            The primary goal of this functionality is to passify degraded nodes so that they do not evict healthy nodes.
            This functionality is inspired by the Lifeguard paper (https://arxiv.org/abs/1707.00788), which is a set of extensions
            to the SWIM membership algorithm (https://research.cs.cornell.edu/projects/Quicksilver/public_pdfs/SWIM.pdf). Orleans
            uses a strong consistency membership algorithm, and not all of the Lifeguard extensions to SWIM apply to Orleans'
            membership algorithm (refutation, for example).
            The monitor implements the following heuristics:
            <list type="bullet">
              <item>Check that this silos is marked as active in membership.</item>
              <item>Check that no other silo suspects this silo.</item>
              <item>Check for recently received successful ping responses.</item>
              <item>Check for recently received ping requests.</item>
              <item>Check that the .NET Thread Pool is able to process work items within one second.</item>
              <item>Check that local async timers have been firing on-time (within 3 seconds of their due time).</item>
            </list>
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.Complaints">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.GetLocalHealthDegradationScore(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.GetLocalHealthDegradationScore(System.DateTime,System.Collections.Generic.List{System.String})">
            <summary>
            Returns the local health degradation score, which is a value between 0 (healthy) and <see cref="F:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.MaxScore"/> (unhealthy).
            </summary>
            <param name="checkTime">The time which the check is taking place.</param>
            <param name="complaints">If not null, will be populated with the current set of detected health issues.</param>
            <returns>The local health degradation score, which is a value between 0 (healthy) and <see cref="F:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.MaxScore"/> (unhealthy).</returns>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.LocalSiloHealthMonitor.ThreadPoolMonitor">
            <summary>
            Measures queue delay on the .NET <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.MembershipAgent">
            <summary>
            Responsible for updating membership table with details about the local silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.MembershipSystemTarget.ProbeRemoteSilo(Orleans.Runtime.SiloAddress,System.Int32)">
            <summary>
            Send a ping to a remote silo. This is intended to be called from a <see cref="T:Orleans.Runtime.MembershipService.SiloHealthMonitor"/>
            in order to initiate the call from the <see cref="T:Orleans.Runtime.MembershipService.MembershipSystemTarget"/>'s context
            </summary>
            <param name="remoteSilo">The remote silo to ping.</param>
            <param name="probeNumber">The probe number, for diagnostic purposes.</param>
            <returns>The result of pinging the remote silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.MembershipSystemTarget.ProbeRemoteSiloIndirectly(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloAddress,System.TimeSpan,System.Int32)">
            <summary>
            Send a ping to a remote silo via an intermediary silo. This is intended to be called from a <see cref="T:Orleans.Runtime.MembershipService.SiloHealthMonitor"/>
            in order to initiate the call from the <see cref="T:Orleans.Runtime.MembershipService.MembershipSystemTarget"/>'s context
            </summary>
            <param name="intermediary">The intermediary which will directly probe the target.</param>
            <param name="target">The target which will be probed.</param>
            <param name="probeTimeout">The timeout for the eventual direct probe request.</param>
            <param name="probeNumber">The probe number, for diagnostic purposes.</param>
            <returns>The result of pinging the remote silo.</returns>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.MembershipTableCleanupAgent">
            <summary>
            Responsible for cleaning up dead membership table entries.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException">
            <summary>
            Exception used to indicate that a cluster connectivity check failed.
            </summary>
            <seealso cref="T:Orleans.Runtime.OrleansException" />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException">
            <summary>
            Exception used to indicate that a cluster membership entry which was expected to be present.
            </summary>
            <seealso cref="T:Orleans.Runtime.OrleansException" />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.RemoteSiloProber">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.RemoteSiloProber.Probe(Orleans.Runtime.SiloAddress,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.MembershipService.RemoteSiloProber.ProbeIndirectly(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloAddress,System.TimeSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.MembershipService.SiloHealthMonitor">
            <summary>
            Responsible for monitoring an individual remote silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.MembershipService.SiloHealthMonitor._nextProbeId">
            <summary>
            The id of the next probe.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.MembershipService.SiloHealthMonitor._failedProbes">
            <summary>
            The number of failed probes since the last successful probe.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.SiloHealthMonitor.ElapsedSinceLastResponse">
            <summary>
            The time since the last ping response was received from either the node being monitored or an intermediary.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.SiloHealthMonitor.LastRoundTripTime">
            <summary>
            The duration of time measured from just prior to sending the last probe which received a response until just after receiving and processing the response.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.SiloHealthMonitor.SiloAddress">
            <summary>
            The silo which this instance is responsible for.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MembershipService.SiloHealthMonitor.IsCanceled">
            <summary>
            Whether or not this monitor is canceled.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.SiloHealthMonitor.Start">
            <summary>
            Start the monitor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.SiloHealthMonitor.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the monitor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.SiloHealthMonitor.ProbeDirectly(System.Threading.CancellationToken)">
            <summary>
            Probes the remote silo.
            </summary>
            <param name="cancellation">A token to cancel and fail the probe attempt.</param>
            <returns>The number of failed probes since the last successful probe.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.SiloHealthMonitor.ProbeIndirectly(Orleans.Runtime.SiloAddress,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Probes the remote node via an intermediary silo.
            </summary>
            <param name="intermediary">The node to probe the target with.</param>
            <param name="directProbeTimeout">The amount of time which the intermediary should allow for the target to respond.</param>
            <param name="cancellation">A token to cancel and fail the probe attempt.</param>
            <returns>The number of failed probes since the last successful probe.</returns>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.SiloHealthMonitor.CheckHealth(System.DateTime,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.MembershipService.SiloHealthMonitor.ProbeResult">
            <summary>
            Represents the result of probing a silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.SiloStatusListenerManager">
            <summary>
            Manages <see cref="T:Orleans.Runtime.ISiloStatusListener"/> instances.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ClusterMember">
            <summary>
            Represents a cluster member.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClusterMember.#ctor(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClusterMember"/> class.
            </summary>                
            <param name="siloAddress">
            The silo address.
            </param>
            <param name="status">
            The silo status.
            </param>
            <param name="name">
            The silo name.
            </param>
        </member>
        <member name="P:Orleans.Runtime.ClusterMember.SiloAddress">
            <summary>
            Gets the silo address.
            </summary>
            <value>The silo address.</value>
        </member>
        <member name="P:Orleans.Runtime.ClusterMember.Status">
            <summary>
            Gets the silo status.
            </summary>
            <value>The silo status.</value>
        </member>
        <member name="P:Orleans.Runtime.ClusterMember.Name">
            <summary>
            Gets the silo name.
            </summary>
            <value>The silo name.</value>
        </member>
        <member name="M:Orleans.Runtime.ClusterMember.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClusterMember.Equals(Orleans.Runtime.ClusterMember)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClusterMember.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.ClusterMember.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.ClusterMembershipSnapshot">
            <summary>
            Represents a snapshot of cluster membership.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipSnapshot.#ctor(System.Collections.Immutable.ImmutableDictionary{Orleans.Runtime.SiloAddress,Orleans.Runtime.ClusterMember},Orleans.Runtime.MembershipVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClusterMembershipSnapshot"/> class.
            </summary>
            <param name="members">The cluster members.</param>
            <param name="version">The cluster membership version.</param>
        </member>
        <member name="P:Orleans.Runtime.ClusterMembershipSnapshot.Members">
            <summary>
            Gets the cluster members.
            </summary>
            <value>The cluster members.</value>
        </member>
        <member name="P:Orleans.Runtime.ClusterMembershipSnapshot.Version">
            <summary>
            Gets the cluster membership version.
            </summary>
            <value>The cluster membership version.</value>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipSnapshot.GetSiloStatus(Orleans.Runtime.SiloAddress)">
            <summary>
            Gets status of the specified silo.
            </summary>
            <param name="silo">The silo.</param>
            <returns>The status of the specified silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipSnapshot.AsUpdate">
            <summary>
            Returns a <see cref="T:Orleans.Runtime.ClusterMembershipUpdate"/> which represents this instance.
            </summary>
            <returns>A <see cref="T:Orleans.Runtime.ClusterMembershipUpdate"/> which represents this instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipSnapshot.CreateUpdate(Orleans.Runtime.ClusterMembershipSnapshot)">
            <summary>
            Returns a <see cref="T:Orleans.Runtime.ClusterMembershipUpdate"/> which represents the change in cluster membership from the provided snapshot to this instance.
            </summary>
            <returns>A <see cref="T:Orleans.Runtime.ClusterMembershipUpdate"/> which represents the change in cluster membership from the provided snapshot to this instance.</returns>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipSnapshot.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.ClusterMembershipUpdate">
            <summary>
            Represents a cluster membership snapshot and changes from a previous snapshot.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ClusterMembershipUpdate.#ctor(Orleans.Runtime.ClusterMembershipSnapshot,System.Collections.Immutable.ImmutableArray{Orleans.Runtime.ClusterMember})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ClusterMembershipUpdate"/> class.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <param name="changes">The changes.</param>
        </member>
        <member name="P:Orleans.Runtime.ClusterMembershipUpdate.HasChanges">
            <summary>
            Gets a value indicating whether this instance has changes.
            </summary>
            <value><see langword="true"/> if this instance has changes; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Orleans.Runtime.ClusterMembershipUpdate.Changes">
            <summary>
            Gets the changes.
            </summary>
            <value>The changes.</value>
        </member>
        <member name="P:Orleans.Runtime.ClusterMembershipUpdate.Snapshot">
            <summary>
            Gets the snapshot.
            </summary>
            <value>The snapshot.</value>
        </member>
        <member name="T:Orleans.Runtime.IClusterMembershipService">
            <summary>
            Functionality for querying and interacting with cluster membership.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IClusterMembershipService.CurrentSnapshot">
            <summary>
            Gets the most recent cluster membership snapshot.
            </summary>
            <value>The current snapshot.</value>
        </member>
        <member name="P:Orleans.Runtime.IClusterMembershipService.MembershipUpdates">
            <summary>
            Gets an enumerable collection of membership updates.
            </summary>
            <value>The membership updates.</value>
        </member>
        <member name="M:Orleans.Runtime.IClusterMembershipService.Refresh(Orleans.Runtime.MembershipVersion)">
            <summary>
            Refreshes cluster membership if it is not at or above the specified minimum version.
            </summary>
            <param name="minimumVersion">The minimum version.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.IClusterMembershipService.TryKill(Orleans.Runtime.SiloAddress)">
            <summary>
            Unilaterally declares the specified silo defunct.
            </summary>
            <param name="siloAddress">The silo address which is being declared defunct.</param>
            <returns><see langword="true"/> if the silo has been evicted, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.ISiloStatusListener">
            <summary>
            Interface for types which listen to silo status change notifications.
            </summary>
            <remarks>
            To be implemented by different in-silo runtime components that are interested in silo status notifications from ISiloStatusOracle.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusListener.SiloStatusChangeNotification(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus)">
            <summary>
            Receive notifications about silo status events. 
            </summary>
            <param name="updatedSilo">A silo to update about.</param>
            <param name="status">The status of a silo.</param>
        </member>
        <member name="T:Orleans.Runtime.ISiloStatusOracle">
            <summary>
            Authoritative local, per-silo source for information about the status of other silos.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloStatusOracle.CurrentStatus">
            <summary>
            Gets the current status of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloStatusOracle.SiloName">
            <summary>
            Gets the name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloStatusOracle.SiloAddress">
            <summary>
            Gets the address of this silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.GetApproximateSiloStatus(Orleans.Runtime.SiloAddress)">
            <summary>
            Gets the status of a given silo. 
            This method returns an approximate view on the status of a given silo. 
            In particular, this oracle may think the given silo is alive, while it may already have failed.
            If this oracle thinks the given silo is dead, it has been authoritatively told so by ISiloDirectory.
            </summary>
            <param name="siloAddress">A silo whose status we are interested in.</param>
            <returns>The status of a given silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.GetApproximateSiloStatuses(System.Boolean)">
            <summary>
            Gets the statuses of all silo. 
            This method returns an approximate view on the statuses of all silo.
            </summary>
            <param name="onlyActive">Include only silo who are currently considered to be active. If false, include all.</param>
            <returns>A list of silo statuses.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.TryGetSiloName(Orleans.Runtime.SiloAddress,System.String@)">
            <summary>
            Gets the name of a silo. 
            Silo name is assumed to be static and does not change across restarts of the same silo.
            </summary>
            <param name="siloAddress">A silo whose name we are interested in.</param>
            <param name="siloName">A silo name.</param>
            <returns>TTrue if could return the requested name, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.IsFunctionalDirectory(Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a value indicating whether the current silo is valid for creating new activations on or for directory lookups.
            </summary>
            <returns>The silo so ask about.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.IsDeadSilo(Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a value indicating whether the current silo is dead.
            </summary>
            <returns>The silo so ask about.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.SubscribeToSiloStatusEvents(Orleans.Runtime.ISiloStatusListener)">
            <summary>
            Subscribe to status events about all silos. 
            </summary>
            <param name="observer">An observer async interface to receive silo status notifications.</param>
            <returns>A value indicating whether subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatusOracle.UnSubscribeFromSiloStatusEvents(Orleans.Runtime.ISiloStatusListener)">
            <summary>
            UnSubscribe from status events about all silos. 
            </summary>
            <returns>A value indicating whether subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.Messaging.Gateway.TryDeliverToProxy(Orleans.Runtime.Message)">
            <summary>
            See if this message is intended for a grain we're proxying, and queue it for delivery if so.
            </summary>
            <param name="msg"></param>
            <returns>true if the message should be delivered to a proxied grain, false if not.</returns>
        </member>
        <member name="M:Orleans.Runtime.Messaging.MessageCenter.BlockApplicationMessages">
            <summary>
            Indicates that application messages should be blocked from being sent or received.
            This method is used by the "fast stop" process.
            <para>
            Specifically, all outbound application messages are dropped, except for rejections and messages to the membership table grain.
            Inbound application requests are rejected, and other inbound application messages are dropped.
            </para>
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.MessageCenter.RerouteMessage(Orleans.Runtime.Message)">
            <summary>
            Reroute a message coming in through a gateway
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.MessageCenter.AddressAndSendMessage(Orleans.Runtime.Message)">
             <summary>
             Send an outgoing message, may complete synchronously
             - may buffer for transaction completion / commit if it ends a transaction
             - choose target placement address, maintaining send order
             - add ordering info and maintain send order
            
             </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.OverloadDetector">
            <summary>
            Determines whether or not the process is overloaded.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.OverloadDetector.Enabled">
            <summary>
            Gets or sets a value indicating whether overload detection is enabled.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.OverloadDetector.Overloaded">
            <summary>
            Returns <see langword="true"/> if this process is overloaded, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.ProbeRequestMonitor">
            <summary>
            Monitors incoming cluster health probe requests
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.ProbeRequestMonitor.OnReceivedProbeRequest">
            <summary>
            Called when this silo receives a health probe request.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.ProbeRequestMonitor.ElapsedSinceLastProbeRequest">
            <summary>
            The duration which has elapsed since the most recently received health probe request.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IConnectedClientCollection">
            <summary>
            Represents the collection of clients which are currently connected to this gateway.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IConnectedClientCollection.Version">
            <summary>
            The monotonically increasing version of the collection, which can be used for change notification.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IConnectedClientCollection.GetConnectedClientIds">
            <summary>
            Gets the collection of ids for the connected clients.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.ClientObserversPlacementDirector">
            <summary>
            ClientObserversPlacementDirector is used to prevent placement of client observer activations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementStrategyResolver">
            <summary>
            Associates a <see cref="T:Orleans.Runtime.PlacementStrategy"/> with a <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.IPlacementStrategyResolver.TryResolvePlacementStrategy(Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties,Orleans.Runtime.PlacementStrategy@)">
            <summary>
            Gets the placement strategy associated with the provided grain type.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.PlacementDirectorResolver">
            <summary>
            Responsible for resolving an <see cref="T:Orleans.Runtime.Placement.IPlacementDirector"/> for a <see cref="T:Orleans.Runtime.PlacementStrategy"/>.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.PlacementService">
            <summary>
            Central point for placement decisions.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Orleans.Configuration.SiloMessagingOptions},Orleans.Runtime.ILocalSiloDetails,Orleans.Runtime.ISiloStatusOracle,Microsoft.Extensions.Logging.ILogger{Orleans.Runtime.Placement.PlacementService},Orleans.Runtime.GrainDirectory.GrainLocator,Orleans.Runtime.Versions.GrainVersionManifest,Orleans.Runtime.Versions.CachedVersionSelectorManager,Orleans.Runtime.Placement.PlacementDirectorResolver,Orleans.Runtime.Placement.PlacementStrategyResolver)">
            <summary>
            Create a <see cref="T:Orleans.Runtime.Placement.PlacementService"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementService.AddressMessage(Orleans.Runtime.Message)">
            <summary>
            Gets or places an activation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementService.PlaceGrainAsync(Orleans.Runtime.GrainId,System.Collections.Generic.Dictionary{System.String,System.Object},Orleans.Runtime.PlacementStrategy)">
            <summary>
            Places a grain without considering the grain's existing location, if any.
            </summary>
            <param name="grainId">The grain id of the grain being placed.</param>
            <param name="requestContextData">The request context, which will be available to the placement strategy.</param>
            <param name="placementStrategy">The placement strategy to use.</param>
            <returns>A location for the new activation.</returns>
        </member>
        <member name="T:Orleans.Runtime.Placement.PlacementStrategyResolver">
            <summary>
            Responsible for resolving an <see cref="T:Orleans.Runtime.PlacementStrategy"/> for a <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementStrategyResolver.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Orleans.Runtime.Placement.IPlacementStrategyResolver},Orleans.Metadata.GrainPropertiesResolver)">
            <summary>
            Create a <see cref="T:Orleans.Runtime.Placement.PlacementStrategyResolver"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementStrategyResolver.GetPlacementStrategy(Orleans.Runtime.GrainType)">
            <summary>
            Gets the placement strategy associated with the provided grain type.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.PreferLocalPlacementDirector">
            <summary>
            PreferLocalPlacementDirector is a single activation placement.
            It is similar to RandomPlacementDirector except for how new activations are placed.
            When activation is requested (OnSelectActivation), it uses the same algorithm as RandomPlacementDirector to pick one if one already exists.
            That is, it checks with the Distributed Directory.
            If none exits, it prefers to place a new one in the local silo. If there are no races (only one silo at a time tries to activate this grain),
            the local silo wins. In the case of concurrent activations of the first activation of this grain, only one silo wins.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Placement.ResourceOptimizedPlacementDirector.PhysicalMemoryScalingFactor">
            <summary>
            1 / (1024 * 1024)
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.ResourceOptimizedPlacementDirector.CalculateScore(Orleans.Runtime.Placement.ResourceOptimizedPlacementDirector.ResourceStatistics@)">
            <summary>
            Always returns a value [0-1]
            </summary>
            <returns>
            score = cpu_weight * (cpu_usage / 100) +
                    mem_usage_weight * (mem_usage / physical_mem) +
                    mem_avail_weight * [1 - (mem_avail / physical_mem)]
                    physical_mem_weight * (1 / (1024 * 1024 * physical_mem)
            </returns>
            <remarks>physical_mem is represented in [MB] to keep the result within [0-1] in cases of silos having physical_mem less than [1GB]</remarks>
        </member>
        <member name="T:Orleans.Runtime.DeploymentLoadPublisher">
            <summary>
            This class collects runtime statistics for all silos in the current deployment for use by placement.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ISiloStatisticsChangeListener.SiloStatisticsChangeNotification(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloRuntimeStatistics)">
            <summary>
            Receive notification when new statistics data arrives.
            </summary>
            <param name="updatedSilo">Updated silo.</param>
            <param name="newStats">New Silo statistics.</param>
        </member>
        <member name="T:Orleans.Runtime.Scheduler.ActivationTaskScheduler">
            <summary>
            A single-concurrency, in-order task scheduler for per-activation work scheduling.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Scheduler.ActivationTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="M:Orleans.Runtime.Scheduler.ActivationTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Orleans.Runtime.Scheduler.ActivationTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task"/> can be executed synchronously in this call, and if it can, executes it.
            </summary>
            <returns>
            A Boolean value indicating whether the task was executed inline.
            </returns>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be executed.</param>
            <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
        </member>
        <member name="M:Orleans.Runtime.Scheduler.WorkItemGroup.EnqueueTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a task to this activation.
            If we're adding it to the run list and we used to be waiting, now we're runnable.
            </summary>
            <param name="task">The work item to add.</param>
        </member>
        <member name="M:Orleans.Runtime.Scheduler.WorkItemGroup.GetScheduledTasks">
            <summary>
            For debugger purposes only.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainService">
            <summary>Base class for implementing a grain-like partitioned service with per silo instances of it automatically instantiated and started by silo runtime</summary>
        </member>
        <member name="P:Orleans.Runtime.GrainService.StoppedCancellationTokenSource">
            <summary>Gets the token for signaling cancellation upon stopping of grain service</summary>
        </member>
        <member name="P:Orleans.Runtime.GrainService.RangeSerialNumber">
            <summary>Gets the monotonically increasing serial number of the version of the ring range owned by the grain service instance</summary>
        </member>
        <member name="P:Orleans.Runtime.GrainService.RingRange">
            <summary>Gets the range of the partitioning ring currently owned by the grain service instance</summary>
        </member>
        <member name="P:Orleans.Runtime.GrainService.Status">
            <summary>Gets the status of the grain service instance</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainService.#ctor">
            <summary>Only to make Reflection happy. Do not use it in your implementation</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainService.#ctor(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress,Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Runtime.ConsistentRing.IConsistentRingProvider)">
            <summary>Constructor to use for grain services</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainService.#ctor(Orleans.Runtime.GrainId,Orleans.Runtime.Silo,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>Constructor to use for grain services</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainService.Init(System.IServiceProvider)">
            <summary>
            Invoked upon initialization of the service
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainService.Start">
            <summary>Invoked when service is being started</summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainService.StartInBackground">
            <summary>
            Deferred part of initialization that executes after the service is already started (to speed up startup).
            Sets Status to Started.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainService.Stop">
            <summary>Invoked when service is being stopped</summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainService.Orleans#Runtime#ConsistentRing#IRingRangeListener#RangeChangeNotification(Orleans.Runtime.IRingRange,Orleans.Runtime.IRingRange,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainService.OnRangeChange(Orleans.Runtime.IRingRange,Orleans.Runtime.IRingRange,System.Boolean)">
            <summary>
            Invoked when the ring range owned by the service instance changes because of a change in the cluster state
            </summary>
            <param name="oldRange">The old range.</param>
            <param name="newRange">The new range.</param>
            <param name="increased">A value indicating whether the range has increased.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainService.GrainServiceStatus">
            <summary>Possible statuses of a grain service</summary>
        </member>
        <member name="F:Orleans.Runtime.GrainService.GrainServiceStatus.Booting">
            <summary>Initialization is in progress</summary>
        </member>
        <member name="F:Orleans.Runtime.GrainService.GrainServiceStatus.Started">
            <summary>Service successfully started</summary>
        </member>
        <member name="F:Orleans.Runtime.GrainService.GrainServiceStatus.Stopped">
            <summary>Service has been stopped</summary>
        </member>
        <member name="T:Orleans.Runtime.Services.GrainServiceClient`1">
            <summary>
            Proxies requests to the appropriate GrainService based on the appropriate Ring partitioning strategy.
            </summary>
            <typeparam name="TGrainService"></typeparam>
        </member>
        <member name="M:Orleans.Runtime.Services.GrainServiceClient`1.#ctor(System.IServiceProvider)">
            <summary>
            Currently we only support a single GrainService per Silo, when multiple are supported we will request the number of GrainServices to partition per silo here.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:Orleans.Runtime.Services.GrainServiceClient`1.CurrentGrainReference">
            <summary>
            Gets a reference to the the currently executing grain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Services.GrainServiceClient`1.GetGrainService(Orleans.Runtime.GrainId)">
            <summary>
            Get a reference to the <see cref="T:Orleans.Runtime.GrainService"/> responsible for actioning the request based on the <paramref name="callingGrainId"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Services.GrainServiceClient`1.GetGrainService(System.UInt32)">
            <summary>
            Get a reference to the <see cref="T:Orleans.Runtime.GrainService"/> responsible for actioning the request based on the <paramref name="key"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Services.GrainServiceClient`1.GetGrainService(Orleans.Runtime.SiloAddress)">
            <summary>
            Get a reference to the <see cref="T:Orleans.Runtime.GrainService"/> responsible for actioning the request based on the <paramref name="destination"/>.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainServiceFactory">
            <summary>
            Functionality for interacting with grain services.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainServiceFactory.CastToGrainServiceReference``1(Orleans.Runtime.GrainReference)">
            <summary>
            Casts a grain reference to a typed grain service reference.
            Used by grain indexing.
            </summary>
            <typeparam name="T">The grain service interface.</typeparam>
            <param name="grainReference">The grain reference.</param>
            <returns>A reference to the specified grain service.</returns>
        </member>
        <member name="P:Orleans.Runtime.LocalSiloDetails.Name">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.LocalSiloDetails.ClusterId">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.LocalSiloDetails.DnsHostName">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.LocalSiloDetails.SiloAddress">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.LocalSiloDetails.GatewayAddress">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.Silo">
            <summary>
            Orleans silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Silo.PrimarySiloName">
            <summary>Standard name for Primary silo. </summary>
        </member>
        <member name="P:Orleans.Runtime.Silo.Name">
            <summary>
            Gets the type of this
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Silo.SiloAddress">
            <summary>Gets the address of this silo.</summary>
        </member>
        <member name="P:Orleans.Runtime.Silo.SiloTerminated">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> which completes once the silo has terminated.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Silo.#ctor(Orleans.Runtime.ILocalSiloDetails,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Silo"/> class.
            </summary>
            <param name="siloDetails">The silo initialization parameters</param>
            <param name="services">Dependency Injection container</param>
        </member>
        <member name="M:Orleans.Runtime.Silo.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the silo.
            </summary>
            <param name="cancellationToken">A cancellation token which can be used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.Silo.Stop">
            <summary>
            Gracefully stop the run time system only, but not the application.
            Applications requests would be abruptly terminated, while the internal system state gracefully stopped and saved as much as possible.
            Grains are not deactivated.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Silo.Shutdown">
            <summary>
            Gracefully stop the run time system and the application.
            All grains will be properly deactivated.
            All in-flight applications requests would be awaited and finished gracefully.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Silo.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully stop the run time system only, but not the application.
            Applications requests would be abruptly terminated, while the internal system state gracefully stopped and saved as much as possible.
            </summary>
            <param name="cancellationToken">
            A cancellation token which can be used to promptly terminate the silo.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.Silo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.TestHooks.TestHooksHostEnvironmentStatistics">
            <summary>
            A fake, test-only implementation of <see cref="T:Orleans.Statistics.IHostEnvironmentStatistics"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TestHooks.TestHooksHostEnvironmentStatistics.TotalPhysicalMemory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.TestHooks.TestHooksHostEnvironmentStatistics.CpuUsage">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.TestHooks.TestHooksHostEnvironmentStatistics.AvailableMemory">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.TestHooks.TestHooksSystemTarget">
            <summary>
            Test hook functions for white box testing implemented as a SystemTarget
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Watchdog">
            <summary>
            Monitors runtime and component health periodically, reporting complaints.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AsyncTimer.TimerDelaySlack">
            <summary>
            Timers can fire up to 3 seconds late before a warning is emitted and the instance is deemed unhealthy.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncTimer.NextTick(System.Nullable{System.TimeSpan})">
            <summary>
            Returns a task which completes after the required delay.
            </summary>
            <param name="overrideDelay">An optional override to this timer's configured period.</param>
            <returns><see langword="true"/> if the timer completed or <see langword="false"/> if the timer was cancelled</returns>
        </member>
        <member name="T:Orleans.Runtime.Utilities.FactoryUtility">
            <summary>
            Utility methods for creating factories which construct instances of objects using an <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utilities.FactoryUtility.Create``1(System.IServiceProvider)">
            <summary>
            Creates a factory returning a new <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns>A new factory.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utilities.FactoryUtility.Create``2(System.IServiceProvider)">
            <summary>
            Creates a factory returning a new <typeparamref name="TInstance"/> given an argument of type <typeparamref name="TParam1"/>.
            </summary>
            <typeparam name="TParam1">The type of the parameter to the factory.</typeparam>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns>A new factory.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utilities.FactoryUtility.Create``3(System.IServiceProvider)">
            <summary>
            Creates a factory returning a new <typeparamref name="TInstance"/> given arguments of the specified types.
            </summary>
            <typeparam name="TParam1">The type of the 1st parameter to the factory.</typeparam>
            <typeparam name="TParam2">The type of the 2nd parameter to the factory.</typeparam>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns>A new factory.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utilities.FactoryUtility.Create``4(System.IServiceProvider)">
            <summary>
            Creates a factory returning a new <typeparamref name="TInstance"/> given arguments of the specified types.
            </summary>
            <typeparam name="TParam1">The type of the 1st parameter to the factory.</typeparam>
            <typeparam name="TParam2">The type of the 2nd parameter to the factory.</typeparam>
            <typeparam name="TParam3">The type of the 3rd parameter to the factory.</typeparam>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns>A new factory.</returns>
        </member>
        <member name="T:Orleans.Runtime.Utilities.OrleansDebuggerHelper">
            <summary>
            Utility methods for aiding debugger sessions.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utilities.OrleansDebuggerHelper.GetGrainInstance(System.Object)">
            <summary>
            Returns the grain instance corresponding to the provided <paramref name="grainReference"/> if it is activated on current silo.
            </summary>
            <param name="grainReference">The grain reference.</param>
            <returns>
            The grain instance corresponding to the provided <paramref name="grainReference"/> if it is activated on current silo, or <see langword="null"/> otherwise.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.SingleWaiterAutoResetEvent">
            <summary>
            Represents a synchronization event that, when signaled, resets automatically after releasing a single waiter.
            This type supports concurrent signallers but only a single waiter.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleWaiterAutoResetEvent.Signal">
            <summary>
            Signal the waiter.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleWaiterAutoResetEvent.WaitAsync">
            <summary>
            Wait for the event to be signaled.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleWaiterAutoResetEvent.ResetStatus">
            <summary>
            Called when a waiter handles the event signal.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ActivationCountBasedPlacementOptions">
            <summary>
            Settings which regulate the placement of grains across a cluster when using <see cref="T:Orleans.Runtime.ActivationCountBasedPlacement"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ActivationCountBasedPlacementOptions.ChooseOutOf">
            <summary>
            Gets or sets the number of silos randomly selected for consideration when using activation count placement policy.
            Only used with Activation Count placement policy.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ActivationCountBasedPlacementOptions.DEFAULT_ACTIVATION_COUNT_PLACEMENT_CHOOSE_OUT_OF">
            <summary>
            The default number of silos to choose from when making placement decisions.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ActivationCountBasedPlacementOptionsValidator">
            <summary>
            Validates <see cref="T:Orleans.Configuration.ActivationCountBasedPlacementOptions"/> properties.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.ActivationCountBasedPlacementOptionsValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.ConsistentRingOptions">
            <summary>
            Configuration options for consistent hashing algorithm, used to balance resource allocations across the cluster.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConsistentRingOptions.NumVirtualBucketsConsistentRing">
            <summary>
            Gets or sets the number of registrations a silo maintains in a consistent hash ring.  This affects the probabilistic
              balancing of resource allocations across the cluster.  More virtual buckets increase the probability of evenly balancing
              while minimally increasing management cost. 
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ConsistentRingOptions.DEFAULT_NUM_VIRTUAL_RING_BUCKETS">
            <summary>
            The default number of virtual ring buckets.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConsistentRingOptions.UseVirtualBucketsConsistentRing">
            <summary>
            Gets or sets a value indicating whether to enable the use of virtual buckets.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ConsistentRingOptions.DEFAULT_USE_VIRTUAL_RING_BUCKETS">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.ConsistentRingOptions.UseVirtualBucketsConsistentRing"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.DeploymentLoadPublisherOptions">
            <summary>
            Options for configuring deployment load publishing.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.DeploymentLoadPublisherOptions.DeploymentLoadPublisherRefreshTime">
            <summary>
            Interval in which deployment statistics are published.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.GrainCollectionOptions">
            <summary>
            Silo options for grain garbage collection.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainCollectionOptions.CollectionQuantum">
            <summary>
            Regulates the periodic collection of inactive grains.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainCollectionOptions.DEFAULT_COLLECTION_QUANTUM">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainCollectionOptions.CollectionQuantum"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainCollectionOptions.CollectionAge">
            <summary>
            Gets or sets the default period of inactivity necessary for a grain to be available for collection and deactivation.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainCollectionOptions.ClassSpecificCollectionAge">
            <summary>
            Period of inactivity necessary for a grain to be available for collection and deactivation by grain type.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainCollectionOptions.ActivationTimeout">
            <summary>
            Timeout value before giving up when trying to activate a grain.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainCollectionOptions.DEFAULT_ACTIVATION_TIMEOUT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainCollectionOptions.ActivationTimeout"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainCollectionOptions.DeactivationTimeout">
            <summary>
            Timeout value before giving up when trying to deactivate a grain activation
            (waiting for all timers to stop and calling Grain.OnDeactivate())
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainCollectionOptions.DEFAULT_DEACTIVATION_TIMEOUT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainCollectionOptions.DeactivationTimeout"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.GrainDirectoryOptions.CachingStrategyType">
            <summary>
            Configuration type that controls the type of the grain directory caching algorithm that silo use.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.CachingStrategyType.None">
            <summary>Don't cache.</summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.CachingStrategyType.LRU">
            <summary>Standard fixed-size LRU.</summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.CachingStrategyType.Adaptive">
            <summary>Adaptive caching with fixed maximum size and refresh. This option should be used in production.</summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.CachingStrategyType.Custom">
            <summary>Custom cache implementation, configured by registering an <see cref="T:Orleans.Runtime.GrainDirectory.IGrainDirectoryCache"/> implementation in the dependency injection container.</summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.CachingStrategy">
            <summary>
            Gets or sets the caching strategy to use.
            The options are None, which means don't cache directory entries locally;
            LRU, which indicates that a standard fixed-size least recently used strategy should be used; and
            Adaptive, which indicates that an adaptive strategy with a fixed maximum size should be used.
            The Adaptive strategy is used by default.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_CACHING_STRATEGY">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.CachingStrategy"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.CacheSize">
            <summary>
            Gets or sets the maximum number of grains to cache directory information for.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_CACHE_SIZE">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.CacheSize"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.InitialCacheTTL">
            <summary>
            Gets or sets the initial (minimum) time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_INITIAL_CACHE_TTL">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.InitialCacheTTL"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.MaximumCacheTTL">
            <summary>
            Gets or sets the maximum time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_MAXIMUM_CACHE_TTL">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.MaximumCacheTTL"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.CacheTTLExtensionFactor">
            <summary>
            Gets or sets the factor by which cache entry TTLs should be extended when they are found to be stable.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_TTL_EXTENSION_FACTOR">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.CacheTTLExtensionFactor"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainDirectoryOptions.LazyDeregistrationDelay">
            <summary>
            Gets or sets the time span between when we have added an entry for an activation to the grain directory and when we are allowed
            to conditionally remove that entry. 
            Conditional deregistration is used for lazy clean-up of activations whose prompt deregistration failed for some reason (e.g., message failure).
            This should always be at least one minute, since we compare the times on the directory partition, so message delays and clcks skues have
            to be allowed.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GrainDirectoryOptions.DEFAULT_UNREGISTER_RACE_DELAY">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.GrainDirectoryOptions.LazyDeregistrationDelay"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SchedulingOptions">
            <summary>
            Options for configuring scheduler behavior.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SchedulingOptions.DelayWarningThreshold">
            <summary>
            Gets or sets the work item queuing delay threshold, at which a warning log message is written.
            That is, if the delay between enqueuing the work item and executing the work item is greater than DelayWarningThreshold, a warning log is written.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SchedulingOptions.DEFAULT_DELAY_WARNING_THRESHOLD">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SchedulingOptions.DelayWarningThreshold"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SchedulingOptions.ActivationSchedulingQuantum">
            <summary>
            Gets or sets the soft time limit on the duration of activation macro-turn (a number of micro-turns). 
            If an activation was running its micro-turns longer than this, we will give up the thread.
            If this is set to zero or a negative number, then the full work queue is drained (MaxWorkItemsPerTurn allowing).
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SchedulingOptions.DEFAULT_ACTIVATION_SCHEDULING_QUANTUM">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SchedulingOptions.ActivationSchedulingQuantum"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SchedulingOptions.TurnWarningLengthThreshold">
            <summary>
            Gets or sets the soft time limit to generate trace warning when the micro-turn executes longer then this period in CPU. 
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SchedulingOptions.DEFAULT_TURN_WARNING_THRESHOLD">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SchedulingOptions.TurnWarningLengthThreshold"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SchedulingOptions.MaxPendingWorkItemsSoftLimit">
            <summary>
            Gets or sets the per work group limit of how many items can be queued up before warnings are generated.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SchedulingOptions.DEFAULT_MAX_PENDING_ITEMS_SOFT_LIMIT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SchedulingOptions.MaxPendingWorkItemsSoftLimit"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SchedulingOptions.StoppedActivationWarningInterval">
            <summary>
            Gets or sets the period of time after which to log errors for tasks scheduled to stopped activations.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SiloMessagingOptions">
            <summary>
            Specifies global messaging options that are silo related.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.systemResponseTimeout">
            <summary>
            <see cref="P:Orleans.Configuration.SiloMessagingOptions.SystemResponseTimeout"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.SiloSenderQueues">
            <summary>
            Gets or sets the number of parallel queues and attendant threads used by the silo to send outbound
            messages (requests, responses, and notifications) to other silos.
            If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.GatewaySenderQueues">
            <summary>
            Gets or sets the number of parallel queues and attendant threads used by the silo Gateway to send outbound
             messages (requests, responses, and notifications) to clients that are connected to it.
             If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxForwardCount">
            <summary>
            Gets or sets the maximal number of times a message is being forwarded from one silo to another.
            Forwarding is used internally by the runtime as a recovery mechanism when silos fail and the membership is unstable.
            In such times the messages might not be routed correctly to destination, and runtime attempts to forward such messages a number of times before rejecting them.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.ClientDropTimeout">
            <summary>
            Gets or sets the period of time a gateway will wait before dropping a disconnected client.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.ClientRegistrationRefresh">
            <summary>
            Gets or sets the interval in which the list of connected clients is refreshed.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_CLIENT_REGISTRATION_REFRESH">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.ClientRegistrationRefresh"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.ClientGatewayShutdownNotificationTimeout">
            <summary>
            Gets or sets the period of time a gateway will wait after notifying connected client before continuing the
            shutdown process
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_CLIENT_GW_NOTIFICATION_TIMEOUT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.ClientGatewayShutdownNotificationTimeout"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsSoftLimit">
            <summary>
            Gets or sets the per grain threshold for pending requests.  Generated warning when exceeded.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_MAX_ENQUEUED_REQUESTS_SOFT_LIMIT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsSoftLimit"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsHardLimit">
            <summary>
            Gets or sets the per grain threshold for pending requests.  Requests are rejected when exceeded.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_MAX_ENQUEUED_REQUESTS_HARD_LIMIT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsHardLimit"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsSoftLimit_StatelessWorker">
            <summary>
            Gets or sets the per grain threshold for pending requests for stateless workers.  Generated warning when exceeded.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_SOFT_LIMIT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsSoftLimit_StatelessWorker"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsHardLimit_StatelessWorker">
            <summary>
            Gets or sets the per grain threshold for pending requests for stateless workers.  Requests are rejected when exceeded.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_HARD_LIMIT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.MaxEnqueuedRequestsHardLimit_StatelessWorker"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.MaxRequestProcessingTime">
            <summary>
            Gets or sets the maximum time that a request can take before the activation is reported as "blocked"
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_MAX_REQUEST_PROCESSING_TIME">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.MaxRequestProcessingTime"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.AssumeHomogenousSilosForTesting">
            <summary>
            Gets or sets a value indicating whether it is assumed that all hosts are identical in terms of the grain interfaces and classes which they support.
            </summary>
            <remarks>
            For testing purposes only.
            </remarks>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.ShutdownRerouteTimeout">
            <summary>
            Gets or sets the period of time the silo will wait to reroute queued messages before it continues shutting down. 
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_SHUTDOWN_REROUTE_TIMEOUT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.ShutdownRerouteTimeout"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.SystemResponseTimeout">
            <summary>
            Gets or sets the default timeout before an internal system request is assumed to have failed.
            <seealso cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeoutWithDebugger"/>
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.GrainWorkloadAnalysisPeriod">
            <summary>
            Gets or sets the period of time between analyzing currently executing activation workloads.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.RequestProcessingWarningTime">
            <summary>
            Gets or sets the period after which a currently executing request is deemed to be slow.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.RequestQueueDelayWarningTime">
            <summary>
            Gets or sets the period after which an enqueued request is deemed to be delayed.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloMessagingOptions.WaitForMessageToBeQueuedForOutboundTime">
            <summary>
            Gets or sets the time to wait for all queued message sent to OutboundMessageQueue before MessageCenter stop and OutboundMessageQueue stop.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.SiloMessagingOptions.DEFAULT_WAIT_FOR_MESSAGE_TO_BE_QUEUED_FOR_OUTBOUND_TIME">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.SiloMessagingOptions.WaitForMessageToBeQueuedForOutboundTime"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SiloConnectionOptions">
            <summary>
            Options for configuring silo networking.
            Implements the <see cref="T:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions" />
            </summary>
            <seealso cref="T:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions" />
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ConfigureSiloOutboundConnection(System.Action{Microsoft.AspNetCore.Connections.IConnectionBuilder})">
            <summary>
            Configures silo outbound connections.
            </summary>
            <param name="configure">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ConfigureSiloInboundConnection(System.Action{Microsoft.AspNetCore.Connections.IConnectionBuilder})">
            <summary>
            Configures silo inbound connections from other silos.
            </summary>
            <param name="configure">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ConfigureGatewayInboundConnection(System.Action{Microsoft.AspNetCore.Connections.IConnectionBuilder})">
            <summary>
            Configures silo inbound connections from clients.
            </summary>
            <param name="configure">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.Orleans#Configuration#SiloConnectionOptions#ISiloConnectionBuilderOptions#ConfigureSiloOutboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.Orleans#Configuration#SiloConnectionOptions#ISiloConnectionBuilderOptions#ConfigureSiloInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.Orleans#Configuration#SiloConnectionOptions#ISiloConnectionBuilderOptions#ConfigureGatewayInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions">
            <summary>
            Options for silo networking.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureSiloOutboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <summary>
            Configures the silo outbound connection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureSiloInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <summary>
            Configures the silo inbound connection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureGatewayInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <summary>
            Configures the silo gateway connection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Orleans.Configuration.EndpointOptions">
            <summary>
            Configures the Silo endpoint options
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EndpointOptions.AdvertisedIPAddress">
            <summary>
            The IP address used for clustering.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EndpointOptions.SiloPort">
            <summary>
            Gets or sets the port this silo uses for silo-to-silo communication.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.EndpointOptions.DEFAULT_SILO_PORT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.EndpointOptions.SiloPort"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EndpointOptions.GatewayPort">
            <summary>
            Gets or sets the port this silo uses for silo-to-client (gateway) communication. Specify 0 to disable gateway functionality.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.EndpointOptions.DEFAULT_GATEWAY_PORT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.EndpointOptions.GatewayPort"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EndpointOptions.SiloListeningEndpoint">
            <summary>
            Gets or sets the endpoint used to listen for silo to silo communication. 
            If not set will default to <see cref="P:Orleans.Configuration.EndpointOptions.AdvertisedIPAddress"/> + <see cref="P:Orleans.Configuration.EndpointOptions.SiloPort"/>
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EndpointOptions.GatewayListeningEndpoint">
            <summary>
            Gets or sets the endpoint used to listen for client to silo communication. 
            If not set will default to <see cref="P:Orleans.Configuration.EndpointOptions.AdvertisedIPAddress"/> + <see cref="P:Orleans.Configuration.EndpointOptions.GatewayPort"/>
            </summary>
        </member>
        <member name="T:Orleans.Configuration.DevelopmentClusterMembershipOptions">
            <summary>Configures development clustering options</summary>
        </member>
        <member name="P:Orleans.Configuration.DevelopmentClusterMembershipOptions.PrimarySiloEndpoint">
            <summary>
            Gets or sets the seed node to find the membership system grain.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SiloOptions">
            <summary>
            Silo configuration options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloOptions.SiloName">
            <summary>
            Gets or sets the silo name.
            </summary>
        </member>
        <member name="T:Orleans.IFacetMetadata">
            <summary>
            Marker interface for facets
            </summary>
        </member>
        <member name="T:Orleans.PersistentStateAttributeMapper">
            <summary>
            Attribute mapper which maps persistent state attributes to a corresponding factory instance.
            </summary>
        </member>
        <member name="M:Orleans.PersistentStateAttributeMapper.GetFactory(System.Reflection.ParameterInfo,Orleans.Runtime.PersistentStateAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Hosting.CoreHostingExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Hosting.ISiloBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.CoreHostingExtensions.AddActivityPropagation(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Add <see cref="P:System.Diagnostics.Activity.Current"/> propagation through grain calls.
            Note: according to <see cref="M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind)"/> activity will be created only when any listener for activity exists <see cref="M:System.Diagnostics.ActivitySource.HasListeners"/> and <see cref="P:System.Diagnostics.ActivityListener.Sample"/> returns <see cref="F:System.Diagnostics.ActivitySamplingResult.PropagationData"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.CoreHostingExtensions.UseLocalhostClustering(Orleans.Hosting.ISiloBuilder,System.Int32,System.Int32,System.Net.IPEndPoint,System.String,System.String)">
            <summary>
            Configures the silo to use development-only clustering and listen on localhost.
            </summary>
            <param name="builder">The silo builder.</param>
            <param name="siloPort">The silo port.</param>
            <param name="gatewayPort">The gateway port.</param>
            <param name="primarySiloEndpoint">
            The endpoint of the primary silo, or <see langword="null"/> to use this silo as the primary.
            </param>
            <param name="serviceId">The service id.</param>
            <param name="clusterId">The cluster id.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.CoreHostingExtensions.UseDevelopmentClustering(Orleans.Hosting.ISiloBuilder,System.Net.IPEndPoint)">
            <summary>
            Configures the silo to use development-only clustering.
            </summary>
            <param name="builder"></param>
            <param name="primarySiloEndpoint">
            The endpoint of the primary silo, or <see langword="null"/> to use this silo as the primary.
            </param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.CoreHostingExtensions.UseDevelopmentClustering(Orleans.Hosting.ISiloBuilder,System.Action{Orleans.Configuration.DevelopmentClusterMembershipOptions})">
            <summary>
            Configures the silo to use development-only clustering.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.CoreHostingExtensions.UseDevelopmentClustering(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.DevelopmentClusterMembershipOptions}})">
            <summary>
            Configures the silo to use development-only clustering.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.EndpointOptionsExtensions">
            <summary>
            Extension methods for configuring <see cref="T:Orleans.Configuration.EndpointOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.EndpointOptionsExtensions.ConfigureEndpoints(Orleans.Hosting.ISiloBuilder,System.Net.IPAddress,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Configure endpoints for the silo.
            </summary>
            <param name="builder">The host builder to configure.</param>
            <param name="advertisedIP">The IP address to be advertised in membership tables</param>
            <param name="siloPort">The port this silo uses for silo-to-silo communication.</param>
            <param name="gatewayPort">The port this silo uses for client-to-silo (gateway) communication. Specify 0 to disable gateway functionality.</param>
            <param name="listenOnAnyHostAddress">Set to true to listen on all IP addresses of the host instead of just the advertiseIP.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Hosting.EndpointOptionsExtensions.ConfigureEndpoints(Orleans.Hosting.ISiloBuilder,System.String,System.Int32,System.Int32,System.Net.Sockets.AddressFamily,System.Boolean)">
            <summary>
            Configure endpoints for the silo.
            </summary>
            <param name="builder">The host builder to configure.</param>
            <param name="hostname">The host name the silo is running on.</param>
            <param name="siloPort">The port this silo uses for silo-to-silo communication.</param>
            <param name="gatewayPort">The port this silo uses for client-to-silo (gateway) communication. Specify 0 to disable gateway functionality.</param>
            <param name="addressFamily">Address family to listen on.  Default IPv4 address family.</param>
            <param name="listenOnAnyHostAddress">Set to true to listen on all IP addresses of the host instead of just the advertiseIP.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Hosting.EndpointOptionsExtensions.ConfigureEndpoints(Orleans.Hosting.ISiloBuilder,System.Int32,System.Int32,System.Net.Sockets.AddressFamily,System.Boolean)">
            <summary>
            Configure endpoints for the silo.
            </summary>
            <param name="builder">The host builder to configure.</param>
            <param name="siloPort">The port this silo uses for silo-to-silo communication.</param>
            <param name="gatewayPort">The port this silo uses for client-to-silo (gateway) communication. Specify 0 to disable gateway functionality.</param>
            <param name="addressFamily">Address family to listen on.  Default IPv4 address family.</param>
            <param name="listenOnAnyHostAddress">Set to true to listen on all IP addresses of the host instead of just the advertiseIP.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions">
            <summary>
            Extension methods for configuring <see cref="T:Orleans.IIncomingGrainCallFilter"/> and <see cref="T:Orleans.IOutgoingGrainCallFilter"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddIncomingGrainCallFilter(Orleans.Hosting.ISiloBuilder,Orleans.IIncomingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddIncomingGrainCallFilter``1(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddIncomingGrainCallFilter(Orleans.Hosting.ISiloBuilder,Orleans.IncomingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddOutgoingGrainCallFilter(Orleans.Hosting.ISiloBuilder,Orleans.IOutgoingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddOutgoingGrainCallFilter``1(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterSiloBuilderExtensions.AddOutgoingGrainCallFilter(Orleans.Hosting.ISiloBuilder,Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.HostingGrainExtensions">
            <summary>
            Methods for configuring <see cref="T:Orleans.Runtime.IGrainExtension"/>s on a silo.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.HostingGrainExtensions.AddGrainExtension``2(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Registers a grain extension implementation for the specified interface.
            </summary>
            <typeparam name="TExtensionInterface">The <see cref="T:Orleans.Runtime.IGrainExtension"/> interface being registered.</typeparam>
            <typeparam name="TExtension">The implementation of <typeparamref name="TExtensionInterface"/>.</typeparam>
        </member>
        <member name="T:Orleans.Hosting.ISiloBuilder">
            <summary>
            Builder for configuring an Orleans server.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloBuilder.Services">
            <summary>
            The services shared by the silo and host.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloBuilder.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.PlacementStrategyExtensions">
            <summary>
            Extensions for configuring grain placement.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.PlacementStrategyExtensions.AddPlacementDirector``2(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Configures a <typeparamref name="TDirector"/> as the placement director for placement strategy <typeparamref name="TStrategy"/>.
            </summary>
            <typeparam name="TStrategy">The placement strategy.</typeparam>
            <typeparam name="TDirector">The placement director.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.PlacementStrategyExtensions.AddPlacementDirector``1(Orleans.Hosting.ISiloBuilder,System.Func{System.IServiceProvider,Orleans.Runtime.Placement.IPlacementDirector})">
            <summary>
            Adds a placement director.
            </summary>
            <typeparam name="TStrategy">The placement strategy.</typeparam>
            <param name="builder">The builder.</param>
            <param name="createDirector">The delegate used to create the placement director.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.PlacementStrategyExtensions.AddPlacementDirector``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures a <typeparamref name="TDirector"/> as the placement director for placement strategy <typeparamref name="TStrategy"/>.
            </summary>
            <typeparam name="TStrategy">The placement strategy.</typeparam>
            <typeparam name="TDirector">The placement director.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.PlacementStrategyExtensions.AddPlacementDirector``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Orleans.Runtime.Placement.IPlacementDirector})">
            <summary>
            Adds a placement director.
            </summary>
            <typeparam name="TStrategy">The placement strategy.</typeparam>
            <param name="services">The service collection.</param>
            <param name="createDirector">The delegate used to create the placement director.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilder">
            <summary>
            Builder for configuring an Orleans server.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Hosting.ISiloBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureServices(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloBuilder" /> to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.Configure``1(Orleans.Hosting.ISiloBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The silo builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.Configure``1(Orleans.Hosting.ISiloBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The silo builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloBuilder"/> for chaining.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions">
            <summary>
            The silo builder startup extensions.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask``1(Orleans.Hosting.ISiloBuilder,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <typeparam name="TStartup">
            The startup task type.
            </typeparam>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloBuilder,Orleans.Runtime.IStartupTask,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloBuilder,System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask.Participate(Orleans.Runtime.ISiloLifecycle)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Hosting.GrainServicesSiloBuilderExtensions">
            <summary>
            Extension methods for registering grain services.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.GrainServicesSiloBuilderExtensions.AddGrainService``1(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Registers an application grain service to be started with the silo.
            </summary>
            <typeparam name="T">The grain service implementation type.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainServicesSiloBuilderExtensions.AddGrainService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an application grain service to be started with the silo.
            </summary>
            <typeparam name="T">The grain service implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainServicesSiloBuilderExtensions.AddGrainService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Registers an application grain service to be started with the silo.
            </summary>
            <param name="services">The service collection.</param>
            <param name="grainServiceType">The grain service implementation type.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.Metadata.GrainClassMap">
            <summary>
            Mapping between <see cref="T:Orleans.Runtime.GrainType"/> and implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainClassMap.#ctor(Orleans.Serialization.TypeSystem.TypeConverter,System.Collections.Immutable.ImmutableDictionary{Orleans.Runtime.GrainType,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainClassMap"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="classes">The grain classes.</param>
        </member>
        <member name="M:Orleans.Metadata.GrainClassMap.TryGetGrainClass(Orleans.Runtime.GrainType,System.Type@)">
            <summary>
            Returns the grain class type corresponding to the provided grain type.
            </summary>
            <param name="grainType">Type of the grain.</param>
            <param name="grainClass">The grain class.</param>
            <returns><see langword="true"/> if a corresponding grain class was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Metadata.SiloManifestProvider">
            <summary>
            Creates a <see cref="P:Orleans.Metadata.SiloManifestProvider.SiloManifest"/> for this silo.
            </summary>
        </member>
        <member name="T:Orleans.Core.StateStorageBridge`1">
            <summary>
            Provides functionality for operating on grain state.
            Implements the <see cref="T:Orleans.Core.IStorage`1" />
            </summary>
            <typeparam name="TState">The underlying state type.</typeparam>
            <seealso cref="T:Orleans.Core.IStorage`1" />
        </member>
        <member name="P:Orleans.Core.StateStorageBridge`1.State">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Core.StateStorageBridge`1.Etag">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Core.StateStorageBridge`1.RecordExists">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Core.StateStorageBridge`1.ReadStateAsync">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Core.StateStorageBridge`1.WriteStateAsync">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Core.StateStorageBridge`1.ClearStateAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.IHostApplicationBuilder)">
            <summary>
            Configures the host app builder to host an Orleans silo.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationBuilder"/> instance will result in one silo being configured.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.HostApplicationBuilder)">
            <summary>
            Configures the host app builder to host an Orleans silo.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder"/> instance will result in one silo being configured.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.IHostApplicationBuilder,System.Action{Orleans.Hosting.ISiloBuilder})">
            <summary>
            Configures the host builder to host an Orleans silo.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <param name="configureDelegate">The delegate used to configure the silo.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationBuilder"/> instance will result in one silo being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.HostApplicationBuilder,System.Action{Orleans.Hosting.ISiloBuilder})">
            <summary>
            Configures the host builder to host an Orleans silo.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <param name="configureDelegate">The delegate used to configure the silo.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder"/> instance will result in one silo being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Orleans.Hosting.ISiloBuilder})">
            <summary>
            Configures the host builder to host an Orleans silo.
            </summary>
            <param name="hostBuilder">The host builder.</param>
            <param name="configureDelegate">The delegate used to configure the silo.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> instance will result in one silo being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.UseOrleans(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Orleans.Hosting.ISiloBuilder})">
            <summary>
            Configures the host builder to host an Orleans silo.
            </summary>
            <param name="hostBuilder">The host builder.</param>
            <param name="configureDelegate">The delegate used to configure the silo.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> instance will result in one silo being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansSiloGenericHostExtensions.AddOrleans(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Orleans.Hosting.ISiloBuilder})">
            <summary>
            Configures the service collection to host an Orleans silo.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configureDelegate">The delegate used to configure the silo.</param>
            <returns>The service collection.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> instance will result in one silo being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            </remarks>
        </member>
    </members>
</doc>
