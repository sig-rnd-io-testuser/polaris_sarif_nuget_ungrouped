<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Streaming.EventHubs</name>
    </assembly>
    <members>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddEventHubStreams(Orleans.Hosting.IClientBuilder,System.String,System.Action{Orleans.Hosting.IClusterClientEventHubStreamConfigurator})">
            <summary>
            Configure cluster client to use event hub persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddEventHubStreams(Orleans.Hosting.IClientBuilder,System.String,System.Action{Orleans.Configuration.EventHubOptions})">
            <summary>
            Configure cluster client to use event hub persistent streams with default settings.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.Developer.SiloBuilderExtensions.AddEventDataGeneratorStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.Developer.IEventDataGeneratorStreamConfigurator})">
            <summary>
            Configure silo to use event data generator streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddEventHubStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.ISiloEventHubStreamConfigurator})">
            <summary>
            Configure silo to use event hub persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddEventHubStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Configuration.EventHubOptions},System.Action{Orleans.Configuration.AzureTableStreamCheckpointerOptions})">
            <summary>
            Configure silo to use event hub persistent streams with default check pointer and other settings
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.OrleansEventHubErrorCode">
            <summary>
            Orleans ServiceBus error codes
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.OrleansEventHubErrorCode.ServiceBus">
            <summary>
            Start of orlean servicebus error codes
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory">
            <summary>
            This is a persistent stream provider adapter that generates it's own events rather than reading them from Eventhub.
            This is primarily for test purposes.
             </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.InitEventHubClient">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.GetPartitionIdsAsync">
            <summary>
            Generate mocked eventhub partition Ids from EventHubGeneratorStreamProviderSettings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.Commands">
            <summary>
            Commands for IControllable
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.Commands.Randomly_Place_Stream_To_Queue">
            <summary>
            Command for Randomly_Place_Stream_To_Queue
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.Commands.Stop_Producing_On_Stream">
            <summary>
            Command for Stop_Producing_On_Stream
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.StreamRandomPlacementArg">
            <summary>
            Args for RandomlyPlaceStreamToQueue method
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.StreamRandomPlacementArg.StreamId">
            <summary>
            StreamId
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.StreamRandomPlacementArg.RandomNumber">
            <summary>
            A random number
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.StreamRandomPlacementArg.#ctor(Orleans.Runtime.StreamId,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="streamId"></param>
            <param name="randomNumber"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventDataGeneratorAdapterFactory.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            Execute Command
            </summary>
            <param name="command"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.SimpleStreamEventDataGenerator">
            <summary>
            Generate data for one stream
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.SimpleStreamEventDataGenerator.StreamId">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.SimpleStreamEventDataGenerator.SequenceNumberCounter">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.SimpleStreamEventDataGenerator.ShouldProduce">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.SimpleStreamEventDataGenerator.TryReadEvents(System.Int32,System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData}@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.EventHubPartitionDataGenerator">
            <summary>
            EHPartitionDataGenerator generate data for a EH partition, which can include data from different streams
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionDataGenerator.#ctor(Orleans.Configuration.EventDataGeneratorStreamOptions,System.Func{Orleans.Runtime.StreamId,Orleans.Streaming.EventHubs.Testing.IStreamDataGenerator{Azure.Messaging.EventHubs.EventData}},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
            <param name="generatorFactory"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionDataGenerator.AddDataGeneratorForStream(Orleans.Runtime.StreamId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionDataGenerator.StopProducingOnStream(Orleans.Runtime.StreamId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionDataGenerator.TryReadEvents(System.Int32,System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData}@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver">
            <summary>
            Eventhub receiver which configured with data generator
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver.#ctor(Orleans.Streaming.EventHubs.Testing.IDataGenerator{Azure.Messaging.EventHubs.EventData})">
            <summary>
            Constructor
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver.StopProducingOnStream(Orleans.Runtime.StreamId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver.ConfigureDataGeneratorForStream(Orleans.Runtime.StreamId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.EventHubPartitionGeneratorReceiver.CloseAsync">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.IDataGenerator`1">
            <summary>
            Data generator for test purpose
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.IDataGenerator`1.TryReadEvents(System.Int32,System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Data generator mimic event reading
            </summary>
            <param name="maxCount"></param>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.IStreamDataGeneratingController">
            <summary>
            StreamDataGeneratingController control stream data generating start and stop
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.IStreamDataGeneratingController.AddDataGeneratorForStream(Orleans.Runtime.StreamId)">
            <summary>
            configure data generator for a stream
            </summary>
            <param name="streamId"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.IStreamDataGeneratingController.StopProducingOnStream(Orleans.Runtime.StreamId)">
            <summary>
            Ask one stream to stop producing
            </summary>
            <param name="streamId"></param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.IStreamDataGenerator`1">
            <summary>
            data generator for a specific stream
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.IStreamDataGenerator`1.SequenceNumberCounter">
            <summary>
            counter for sequence number
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.IStreamDataGenerator`1.StreamId">
            <summary>
            Stream identity for this data generator
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.IStreamDataGenerator`1.ShouldProduce">
             <summary>
            
             </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.IIntCounter">
            <summary>
            counter for integer
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.Testing.IIntCounter.Value">
            <summary>
            counter value
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.Testing.IIntCounter.Increment">
            <summary>
            increment the counter
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.Testing.NoOpCheckpointer">
            <summary>
            NoOpCheckpointer is used in EventDataGeneratorStreamProvider ecosystem to replace the default Checkpointer which requires a back end storage. In EventHubDataGeneratorStreamProvider,
            it is generating EventData on the fly when receiver pull messages from the queue, which means it doesn't support recoverable stream, hence check pointing won't bring much value there. 
            So a checkpointer with no ops should be enough.
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor">
            <summary>
            Aggregated cache pressure monitor
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor.CacheMonitor">
            <summary>
            Cache monitor which is used to report cache related metrics
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor.#ctor(Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor.RecordCachePressureContribution(System.Double)">
            <summary>
            Record cache pressure to every monitor in this aggregated cache monitor group
            </summary>
            <param name="cachePressureContribution"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor.AddCachePressureMonitor(Orleans.Streaming.EventHubs.ICachePressureMonitor)">
            <summary>
            Add one monitor to this aggregated cache monitor group
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AggregatedCachePressureMonitor.IsUnderPressure(System.DateTime)">
            <summary>
            If any monitor in this aggregated cache monitor group is under pressure, then return true
            </summary>
            <param name="utcNow"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor">
            <summary>
            Cache pressure monitor whose back pressure algorithm is based on averaging pressure value
            over all pressure contribution
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor.CacheMonitor">
            <summary>
            Cache monitor which is used to report cache related metrics
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor.#ctor(Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor.#ctor(System.Double,Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="flowControlThreshold"></param>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor.RecordCachePressureContribution(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AveragingCachePressureMonitor.IsUnderPressure(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streaming.EventHubs.ICachePressureMonitor">
            <summary>
            Cache pressure monitor records pressure contribution to the cache, and determine if the cache is under pressure based on its 
            back pressure algorithm
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.ICachePressureMonitor.RecordCachePressureContribution(System.Double)">
            <summary>
            Record cache pressure contribution to the monitor
            </summary>
            <param name="cachePressureContribution"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.ICachePressureMonitor.IsUnderPressure(System.DateTime)">
            <summary>
            Determine if the monitor is under pressure
            </summary>
            <param name="utcNow"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.ICachePressureMonitor.CacheMonitor">
            <summary>
            Cache monitor which is used to report cache related metrics
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor">
            <summary>
            Pressure monitor which is in favor of the slow consumer in the cache
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.DefaultPressureWindowSize">
            <summary>
            DefaultPressureWindowSize
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.CacheMonitor">
            <summary>
            Cache monitor which is used to report cache related metrics
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.DefaultFlowControlThreshold">
            <summary>
            Default flow control threshold
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.PressureWindowSize">
            <summary>
            PressureWindowSize
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.FlowControlThreshold">
            <summary>
            FlowControlThreshold
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.#ctor(Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.#ctor(System.TimeSpan,Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="pressureWindowSize"></param>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.#ctor(System.Double,Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="flowControlThreshold"></param>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.#ctor(System.Double,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor)">
            <summary>
            Constructor
            </summary>
            <param name="flowControlThreshold"></param>
            <param name="pressureWindowSzie"></param>
            <param name="logger"></param>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.RecordCachePressureContribution(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.SlowConsumingPressureMonitor.IsUnderPressure(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventDataExtensions">
            <summary>
            Extends EventData to support streaming
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventDataExtensions.SetStreamNamespaceProperty(Azure.Messaging.EventHubs.EventData,System.String)">
            <summary>
            Adds stream namespace to the EventData
            </summary>
            <param name="eventData"></param>
            <param name="streamNamespace"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventDataExtensions.GetStreamNamespaceProperty(Azure.Messaging.EventHubs.EventData)">
            <summary>
            Gets stream namespace from the EventData
            </summary>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventDataExtensions.SerializeProperties(Azure.Messaging.EventHubs.EventData,Orleans.Serialization.Serializer)">
            <summary>
            Serializes event data properties
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventDataExtensions.DeserializeProperties(System.ArraySegment{System.Byte},Orleans.Serialization.Serializer)">
            <summary>
            Deserializes event data properties
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubAdapterFactory">
            <summary>
            Queue adapter factory which allows the PersistentStreamProvider to use EventHub as its backend persistent event queue.
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.dataAdapter">
            <summary>
            Data adapter
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.logger">
            <summary>
            Orleans logging
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.serviceProvider">
            <summary>
            Framework service provider
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.ehOptions">
            <summary>
            Stream provider settings
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.CacheFactory">
            <summary>
            Creates a message cache for an eventhub partition.
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.checkpointerFactory">
            <summary>
            Creates a partition checkpointer.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.StreamFailureHandlerFactory">
            <summary>
            Creates a failure handler for a partition.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.QueueMapperFactory">
            <summary>
            Create a queue mapper to map EventHub partitions to queues
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubAdapterFactory.ReceiverMonitorFactory">
            <summary>
            Create a receiver monitor to report performance metrics.
            Factory function should return an IEventHubReceiverMonitor.
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubAdapterFactory.EventHubReceiverFactory">
            <summary>
            Factory to create a IEventHubReceiver
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.CreateAdapter">
            <summary>
            Create queue adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.GetQueueAdapterCache">
            <summary>
            Create queue message cache adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.GetStreamQueueMapper">
            <summary>
            Create queue mapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Acquire delivery failure handler for a queue
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.QueueMessageBatchAsync``1(Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamId"></param>
            <param name="events"></param>
            <param name="token"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a queue receiver for the specified queueId
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.CreateCacheFactory(Orleans.Configuration.EventHubStreamCachePressureOptions)">
            <summary>
            Create a IEventHubQueueCacheFactory. It will create a EventHubQueueCacheFactory by default.
            User can override this function to return their own implementation of IEventHubQueueCacheFactory,
            and other customization of IEventHubQueueCacheFactory if they may.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterFactory.GetPartitionIdsAsync">
            <summary>
            Get partition Ids from eventhub
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubPartitionSettings">
            <summary>
            Event Hub Partition settings
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubPartitionSettings.Hub">
            <summary>
            Eventhub settings
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubPartitionSettings.Partition">
            <summary>
            Partition name
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterReceiver.Initialize">
            <summary>
            Initialization of EventHub receiver is performed at adapter receiver initialization, but if it fails,
             it will be retried when messages are requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubAdapterReceiver.ConfigureDataGeneratorForStream(Orleans.Runtime.StreamId)">
            <summary>
            For test purpose. ConfigureDataGeneratorForStream will configure a data generator for the stream
            </summary>
            <param name="streamId"></param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubBatchContainer">
            <summary>
            Batch container that is delivers payload and stream position information for a set of events in an EventHub EventData.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubBatchContainer.StreamId">
            <summary>
            Stream identifier for the stream this batch is part of.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubBatchContainer.SequenceToken">
            <summary>
            Stream Sequence Token for the start of this batch.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBatchContainer.#ctor(Orleans.Streaming.EventHubs.EventHubMessage,Orleans.Serialization.Serializer)">
            <summary>
            Batch container that delivers events from cached EventHub data associated with an orleans stream
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBatchContainer.GetEvents``1">
            <summary>
            Gets events of a specific type from the batch.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBatchContainer.ImportRequestContext">
            <summary>
            Gives an opportunity to IBatchContainer to set any data in the RequestContext before this IBatchContainer is sent to consumers.
            It can be the data that was set at the time event was generated and enqueued into the persistent provider or any other data.
            </summary>
            <returns>True if the RequestContext was indeed modified, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBatchContainer.ToEventData``1(Orleans.Serialization.Serializer,Orleans.Runtime.StreamId,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Put events list and its context into a EventData object
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubCheckpointer">
            <summary>
            This class stores EventHub partition checkpointer information (a partition offset) in azure table storage.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubCheckpointer.CheckpointExists">
            <summary>
            Indicates if a checkpoint exists
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubCheckpointer.Create(Orleans.Configuration.AzureTableStreamCheckpointerOptions,System.String,System.String,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Factory function that creates and initializes the checkpointer
            </summary>
            <param name="options"></param>
            <param name="streamProviderName"></param>
            <param name="partition"></param>
            <param name="serviceId"></param>
            <param name="loggerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubCheckpointer.Load">
            <summary>
            Loads a checkpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubCheckpointer.Update(System.String,System.DateTime)">
            <summary>
            Updates the checkpoint.  This is a best effort.  It does not always update the checkpoint.
            </summary>
            <param name="offset"></param>
            <param name="utcNow"></param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubDataAdapter">
            <summary>
            Default event hub data adapter.  Users may subclass to override event data to stream mapping.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.#ctor(Orleans.Serialization.Serializer)">
            <summary>
            Cache data adapter that adapts EventHub's EventData to CachedEventHubMessage used in cache
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetBatchContainer(Orleans.Providers.Streams.Common.CachedMessage@)">
            <summary>
            Converts a cached message to a batch container for delivery
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetBatchContainer(Orleans.Streaming.EventHubs.EventHubMessage)">
            <summary>
            Convert an EventHubMessage to a batch container
            </summary>
            <param name="eventHubMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetSequenceToken(Orleans.Providers.Streams.Common.CachedMessage@)">
            <summary>
            Gets the stream sequence token from a cached message.
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetOffset(Orleans.Providers.Streams.Common.CachedMessage)">
            <summary>
            Get offset from cached message.  Left to derived class, as only it knows how to get this from the cached message.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetPartitionKey(Orleans.Runtime.StreamId)">
            <summary>
            Get the Event Hub partition key to use for a stream.
            </summary>
            <param name="streamId">The stream Guid.</param>
            <returns>The partition key to use for the stream.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubDataAdapter.GetStreamIdentity(Azure.Messaging.EventHubs.EventData)">
            <summary>
            Get the <see cref="T:Orleans.Streams.IStreamIdentity"/> for an event message.
            </summary>
            <param name="queueMessage">The event message.</param>
            <returns>The stream identity.</returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubMessage">
            <summary>
            Replication of EventHub EventData class, reconstructed from cached data CachedEventHubMessage
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubMessage.#ctor(Orleans.Runtime.StreamId,System.String,System.String,System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object},System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="streamId">Stream Identity</param>
            <param name="partitionKey">EventHub partition key for message</param>
            <param name="offset">Offset into the EventHub partition where this message was from</param>
            <param name="sequenceNumber">Offset into the EventHub partition where this message was from</param>
            <param name="enqueueTimeUtc">Time in UTC when this message was injected by EventHub</param>
            <param name="dequeueTimeUtc">Time in UTC when this message was read from EventHub into the current service</param>
            <param name="properties">User properties from EventData object</param>
            <param name="payload">Binary data from EventData object</param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubMessage.#ctor(Orleans.Providers.Streams.Common.CachedMessage,Orleans.Serialization.Serializer)">
            <summary>
            Duplicate of EventHub's EventData class.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.StreamId">
            <summary>
            Stream identifier
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.PartitionKey">
            <summary>
            EventHub partition key
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.Offset">
            <summary>
            Offset into EventHub partition
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.SequenceNumber">
            <summary>
            Sequence number in EventHub partition
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.EnqueueTimeUtc">
            <summary>
            Time event was written to EventHub
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.DequeueTimeUtc">
            <summary>
            Time event was read from EventHub and added to cache
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.Properties">
            <summary>
            User EventData properties
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMessage.Payload">
            <summary>
            Binary event data
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubQueueCache">
            <summary>
            EventHub queue cache
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubQueueCache.defaultMaxAddCount">
            <summary>
            Default max number of items that can be added to the cache between purge calls
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.EventHubQueueCache.cache">
            <summary>
            Underlying message cache implementation
            Protected for test purposes
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.#ctor(System.String,System.Int32,Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},Orleans.Streaming.EventHubs.IEventHubDataAdapter,Orleans.Providers.Streams.Common.IEvictionStrategy,Orleans.Streams.IStreamQueueCheckpointer{System.String},Microsoft.Extensions.Logging.ILogger,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            EventHub queue cache.
            </summary>
            <param name="partition">Partition this instance is caching.</param>
            <param name="defaultMaxAddCount">Default max number of items that can be added to the cache between purge calls.</param>
            <param name="bufferPool">raw data block pool.</param>
            <param name="dataAdapter">Adapts EventData to cached.</param>
            <param name="evictionStrategy">Eviction strategy manage purge related events</param>
            <param name="checkpointer">Logic used to store queue position.</param>
            <param name="logger"></param>
            <param name="cacheMonitor"></param>
            <param name="cacheMonitorWriteInterval"></param>
            <param name="metadataMinTimeInCache"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.SignalPurge">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.AddCachePressureMonitor(Orleans.Streaming.EventHubs.ICachePressureMonitor)">
            <summary>
            Add cache pressure monitor to the cache's back pressure algorithm
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.Add(System.Collections.Generic.List{Azure.Messaging.EventHubs.EventData},System.DateTime)">
            <summary>
            Add a list of EventHub EventData to the cache.
            </summary>
            <param name="messages"></param>
            <param name="dequeueTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.GetCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Get a cursor into the cache to read events from a stream.
            </summary>
            <param name="streamId"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.TryGetNextMessage(System.Object,Orleans.Streams.IBatchContainer@)">
            <summary>
            Try to get the next message in the cache for the provided cursor.
            </summary>
            <param name="cursorObj"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.OnPurge(System.Nullable{Orleans.Providers.Streams.Common.CachedMessage},System.Nullable{Orleans.Providers.Streams.Common.CachedMessage})">
            <summary>
            Handles cache purge signals
            </summary>
            <param name="lastItemPurged"></param>
            <param name="newestItem"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCache.TryCalculateCachePressureContribution(Orleans.Streams.StreamSequenceToken,System.Double@)">
            <summary>
            cachePressureContribution should be a double between 0-1, indicating how much danger the item is of being removed from the cache.
              0 indicating  no danger,
              1 indicating removal is imminent.
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory">
            <summary>
            Factory class to configure and create IEventHubQueueCache
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.CacheMonitorFactory">
            <summary>
            Create a cache monitor to report performance metrics.
            Factory function should return an ICacheMonitor.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.BlockPoolMonitorFactory">
            <summary>
            Create a block pool monitor to report performance metrics.
            Factory function should return an IObjectPoolMonitor.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.#ctor(Orleans.Configuration.EventHubStreamCachePressureOptions,Orleans.Configuration.StreamCacheEvictionOptions,Orleans.Configuration.StreamStatisticOptions,Orleans.Streaming.EventHubs.IEventHubDataAdapter,Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions,System.Func{Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions,Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Providers.Streams.Common.ICacheMonitor},System.Func{Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions,Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Providers.Streams.Common.IBlockPoolMonitor})">
            <summary>
            Constructor for EventHubQueueCacheFactory
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.CreateCache(System.String,Orleans.Streams.IStreamQueueCheckpointer{System.String},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Function which create an EventHubQueueCache, which by default will configure the EventHubQueueCache using configuration in CreateBufferPool function
            and AddCachePressureMonitors function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.CreateBufferPool(Orleans.Configuration.StreamStatisticOptions,Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions,System.String@)">
            <summary>
            Function used to configure BufferPool for EventHubQueueCache. User can override this function to provide more customization on BufferPool creation
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.AddCachePressureMonitors(Orleans.Streaming.EventHubs.IEventHubQueueCache,Orleans.Configuration.EventHubStreamCachePressureOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Function used to configure cache pressure monitors for EventHubQueueCache. 
            User can override this function to provide more customization on cache pressure monitors
            </summary>
            <param name="cache"></param>
            <param name="providerOptions"></param>
            <param name="cacheLogger"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubQueueCacheFactory.CreateCache(System.String,Orleans.Streaming.EventHubs.IEventHubDataAdapter,Orleans.Configuration.StreamStatisticOptions,Orleans.Configuration.StreamCacheEvictionOptions,Orleans.Streams.IStreamQueueCheckpointer{System.String},Microsoft.Extensions.Logging.ILoggerFactory,Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},System.String,Orleans.Providers.Streams.Common.TimePurgePredicate,Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions)">
            <summary>
            Default function to be called to create an EventhubQueueCache in IEventHubQueueCacheFactory.CreateCache method. User can 
            override this method to add more customization.
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.IEventHubPartitionLocation">
            <summary>
            Location of a message within an EventHub partition
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.IEventHubPartitionLocation.EventHubOffset">
            <summary>
            Offset of the message within an EventHub partition
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.IEventHubPartitionLocation.SequenceNumber">
            <summary>
            EventHub sequence id of the message
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubSequenceToken">
            <summary>
            Event Hub messages consist of a batch of application layer events, so EventHub tokens contain three pieces of information.
            EventHubOffset - this is a unique value per partition that is used to start reading from this message in the partition.
            SequenceNumber - EventHub sequence numbers are unique ordered message IDs for messages within a partition.  
              The SequenceNumber is required for uniqueness and ordering of EventHub messages within a partition.
            event Index - Since each EventHub message may contain more than one application layer event, this value
              indicates which application layer event this token is for, within an EventHub message.  It is required for uniqueness
              and ordering of application layer events within an EventHub message.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubSequenceToken.EventHubOffset">
            <summary>
            Offset of the message within an EventHub partition
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubSequenceToken.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streaming.EventHubs.EventHubSequenceToken" /> class.
            </summary>
            <param name="eventHubOffset">EventHub offset within the partition from which this message came.</param>
            <param name="sequenceNumber">EventHub sequenceNumber for this message.</param>
            <param name="eventIndex">Index into a batch of events, if multiple events were delivered within a single EventHub message.</param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubSequenceToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streaming.EventHubs.EventHubSequenceToken" /> class.
            </summary>
            <remarks>
            This constructor is exposed for serializer use only.
            </remarks>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubSequenceToken.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubSequenceTokenV2">
            <summary>
            Event Hub messages consist of a batch of application layer events, so EventHub tokens contain three pieces of information.
            EventHubOffset - this is a unique value per partition that is used to start reading from this message in the partition.
            SequenceNumber - EventHub sequence numbers are unique ordered message IDs for messages within a partition.  
              The SequenceNumber is required for uniqueness and ordering of EventHub messages within a partition.
            event Index - Since each EventHub message may contain more than one application layer event, this value
              indicates which application layer event this token is for, within an EventHub message.  It is required for uniqueness
              and ordering of application layer events within an EventHub message.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubSequenceTokenV2.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streaming.EventHubs.EventHubSequenceTokenV2" /> class.
            </summary>
            <param name="eventHubOffset">EventHub offset within the partition from which this message came.</param>
            <param name="sequenceNumber">EventHub sequenceNumber for this message.</param>
            <param name="eventIndex">Index into a batch of events, if multiple events were delivered within a single EventHub message.</param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubSequenceTokenV2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Streaming.EventHubs.EventHubSequenceTokenV2" /> class.
            </summary>
            <remarks>
            This constructor is exposed for serializer use only.
            </remarks>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.IEventHubQueueCache">
            <summary>
            Interface for a stream message cache that stores EventHub EventData
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCache.Add(System.Collections.Generic.List{Azure.Messaging.EventHubs.EventData},System.DateTime)">
            <summary>
            Add a list of EventHub EventData to the cache.
            </summary>
            <param name="message"></param>
            <param name="dequeueTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCache.GetCursor(Orleans.Runtime.StreamId,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Get a cursor into the cache to read events from a stream.
            </summary>
            <param name="streamId"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCache.TryGetNextMessage(System.Object,Orleans.Streams.IBatchContainer@)">
            <summary>
            Try to get the next message in the cache for the provided cursor.
            </summary>
            <param name="cursorObj"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCache.AddCachePressureMonitor(Orleans.Streaming.EventHubs.ICachePressureMonitor)">
            <summary>
            Add cache pressure monitor to the cache's back pressure algorithm
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCache.SignalPurge">
            <summary>
            Send purge signal to the cache, the cache will perform a time based purge on its cached messages
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.IEventHubQueueCacheFactory">
            <summary>
            Factory responsible for creating a message cache for an EventHub partition.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubQueueCacheFactory.CreateCache(System.String,Orleans.Streams.IStreamQueueCheckpointer{System.String},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Function used to create a IEventHubQueueCache
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.IEventHubReceiver">
            <summary>
            Abstraction on EventhubReceiver class, used to configure EventHubReceiver class in EventhubAdapterReceiver,
            also used to configure EHGeneratorReceiver in EventHubAdapterReceiver for testing purpose
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <summary>
            Send an async message to the partition asking for more messages
            </summary>
            <param name="maxCount">Max amount of message which should be delivered in this request</param>
            <param name="waitTime">Wait time of this request</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.IEventHubReceiver.CloseAsync">
            <summary>
            Send a clean up message
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubReceiverProxy">
            <summary>
            pass through decorator class for EventHubReceiver
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.StatisticMonitors.DefaultEventHubBlockPoolMonitor">
            <summary>
            Default monitor for Object pool used by EventHubStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.StatisticMonitors.DefaultEventHubBlockPoolMonitor.#ctor(Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.StatisticMonitors.DefaultEventHubCacheMonitor">
            <summary>
            Default cache monitor for eventhub streaming provider ecosystem
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.StatisticMonitors.DefaultEventHubCacheMonitor.#ctor(Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.DefaultEventHubReceiverMonitor">
            <summary>
            Default EventHub receiver monitor that tracks metrics using loggers PKI support.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.DefaultEventHubReceiverMonitor.#ctor(Orleans.Streaming.EventHubs.EventHubReceiverMonitorDimensions)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions">Aggregation Dimension bag for EventhubReceiverMonitor</param>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions">
            <summary>
            Base class for monitor aggregation dimensions, which is an information bag for the monitoring target. 
            Monitors can use this information bag to build its aggregation dimensions.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions.EventHubPath">
            <summary>
            Eventhub path
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ehHubPath"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions.#ctor(Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions.#ctor">
            <summary>
            Zero parameter constructor
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubReceiverMonitorDimensions">
            <summary>
            Aggregation dimensions for EventHubReceiverMonitor
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubReceiverMonitorDimensions.EventHubPartition">
            <summary>
            Eventhub partition
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubReceiverMonitorDimensions.#ctor(Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
            <param name="ehPartition"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubReceiverMonitorDimensions.#ctor">
            <summary>
            Zero parameter constructor
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions">
            <summary>
            Aggregation dimensions for cache monitor used in Eventhub stream provider ecosystem
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions.BlockPoolId">
            <summary>
            Block pool this cache belongs to
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions.#ctor(Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
            <param name="ehPartition"></param>
            <param name="blockPoolId"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubCacheMonitorDimensions.#ctor">
            <summary>
            Zero parameters constructor
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions">
            <summary>
            Aggregation dimensions for block pool monitor used in Eventhub stream provider ecosystem
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions.BlockPoolId">
            <summary>
            Block pool Id
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions.#ctor(Orleans.Streaming.EventHubs.EventHubMonitorAggregationDimensions,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
            <param name="blockPoolId"></param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.EventHubBlockPoolMonitorDimensions.#ctor">
            <summary>
            Zero parameter constructor
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.AzureTableDataManager`1">
            <summary>
            Utility class to encapsulate row-based access to Azure table storage.
            </summary>
            <typeparam name="T">Table data entry used by this table / manager.</typeparam>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureTableDataManager`1.TableName">
            <summary> Name of the table this instance is managing. </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureTableDataManager`1.Logger">
            <summary> Logger for this table manager instance. </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.#ctor(Orleans.Streaming.EventHubs.AzureStorageOperationOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new <see cref="T:Orleans.Streaming.EventHubs.AzureTableDataManager`1"/> instance.
            </summary>
            <param name="options">Storage configuration.</param>
            <param name="logger">Logger to use.</param>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.InitTableAsync">
            <summary>
            Connects to, or creates and initializes a new Azure table if it does not already exist.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.DeleteTableAsync">
            <summary>
            Deletes the Azure table.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.ClearTableAsync">
            <summary>
            Deletes all entities the Azure table.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.CreateTableEntryAsync(`0)">
            <summary>
            Create a new data entry in the Azure table (insert new, not update existing).
            Fails if the data already exists.
            </summary>
            <param name="data">Data to be inserted into the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.UpsertTableEntryAsync(`0)">
            <summary>
            Inserts a data entry in the Azure table: creates a new one if does not exists or overwrites (without eTag) an already existing version (the "update in place" semantics).
            </summary>
            <param name="data">Data to be inserted or replaced in the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.InsertTableEntryAsync(`0)">
            <summary>
            Inserts a data entry in the Azure table: creates a new one if does not exists
            </summary>
            <param name="data">Data to be inserted or replaced in the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.MergeTableEntryAsync(`0,System.String)">
            <summary>
            Merges a data entry in the Azure table.
            </summary>
            <param name="data">Data to be merged in the table.</param>
            <param name="eTag">ETag to apply.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.MergeTableEntryAsync(`0,Azure.ETag)">
            <summary>
            Merges a data entry in the Azure table.
            </summary>
            <param name="data">Data to be merged in the table.</param>
            <param name="eTag">ETag to apply.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.UpdateTableEntryAsync(`0,System.String)">
            <summary>
            Updates a data entry in the Azure table: updates an already existing data in the table, by using eTag.
            Fails if the data does not already exist or of eTag does not match.
            </summary>
            <param name="data">Data to be updated into the table.</param>
            /// <param name="dataEtag">ETag to use.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.UpdateTableEntryAsync(`0,Azure.ETag)">
            <summary>
            Updates a data entry in the Azure table: updates an already existing data in the table, by using eTag.
            Fails if the data does not already exist or of eTag does not match.
            </summary>
            <param name="data">Data to be updated into the table.</param>
            /// <param name="dataEtag">ETag to use.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.DeleteTableEntryAsync(`0,System.String)">
            <summary>
            Deletes an already existing data in the table, by using eTag.
            Fails if the data does not already exist or if eTag does not match.
            </summary>
            <param name="data">Data entry to be deleted from the table.</param>
            <param name="eTag">ETag to use.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.DeleteTableEntryAsync(`0,Azure.ETag)">
            <summary>
            Deletes an already existing data in the table, by using eTag.
            Fails if the data does not already exist or if eTag does not match.
            </summary>
            <param name="data">Data entry to be deleted from the table.</param>
            <param name="eTag">ETag to use.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.ReadSingleTableEntryAsync(System.String,System.String)">
            <summary>
            Read a single table entry from the storage table.
            </summary>
            <param name="partitionKey">The partition key for the entry.</param>
            <param name="rowKey">The row key for the entry.</param>
            <returns>Value promise for tuple containing the data entry and its corresponding etag.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.ReadAllTableEntriesForPartitionAsync(System.String)">
            <summary>
            Read all entries in one partition of the storage table.
            NOTE: This could be an expensive and slow operation for large table partitions!
            </summary>
            <param name="partitionKey">The key for the partition to be searched.</param>
            <returns>Enumeration of all entries in the specified table partition.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.ReadAllTableEntriesAsync">
            <summary>
            Read all entries in the table.
            NOTE: This could be a very expensive and slow operation for large tables!
            </summary>
            <returns>Enumeration of all entries in the table.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.DeleteTableEntriesAsync(System.Collections.Generic.List{System.ValueTuple{`0,System.String}})">
            <summary>
            Deletes a set of already existing data entries in the table, by using eTag.
            Fails if the data does not already exist or if eTag does not match.
            </summary>
            <param name="collection">Data entries and their corresponding etags to be deleted from the table.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.ReadTableEntriesAndEtagsAsync(System.String)">
            <summary>
            Read data entries and their corresponding eTags from the Azure table.
            </summary>
            <param name="filter">Filter string to use for querying the table and filtering the results.</param>
            <returns>Enumeration of entries in the table which match the query condition.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableDataManager`1.BulkInsertTableEntries(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a set of new data entries into the table.
            Fails if the data does already exists.
            </summary>
            <param name="collection">Data entries to be inserted into the table.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.AzureTableConstants">
            <summary>
            Constants related to Azure Table storage (also applies to Table endpoints in Cosmos DB).
            </summary>
        </member>
        <member name="T:Orleans.Streaming.EventHubs.AzureTableUtils">
            <summary>
            General utility functions related to Azure Table storage (also applies to Table endpoints in Cosmos DB).
            </summary>
        </member>
        <member name="F:Orleans.Streaming.EventHubs.AzureTableUtils.ANY_ETAG">
            <summary>
            ETag of value "*" to match any etag for conditional table operations (update, merge, delete).
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.TableStorageDataNotFound(System.Exception)">
            <summary>
            Inspect an exception returned from Azure storage libraries to check whether it means that attempt was made to read some data that does not exist in storage table.
            </summary>
            <param name="exc">Exception that was returned by Azure storage library operation</param>
            <returns><c>True</c> if this exception means the data being read was not present in Azure table storage</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.ExtractRestErrorCode(System.Exception)">
            <summary>
            Extract REST error code from DataServiceClientException or DataServiceQueryException
            </summary>
            <param name="exc">Exception to be inspected.</param>
            <returns>Returns REST error code if found, otherwise <c>null</c></returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.EvaluateException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Examine a storage exception, and if applicable extracts the HTTP status code, and REST error code if <c>getRESTErrors=true</c>.
            </summary>
            <param name="e">Exception to be examined.</param>
            <param name="httpStatusCode">Output HTTP status code if applicable, otherwise HttpStatusCode.Unused (306)</param>
            <param name="restStatus">When <c>getRESTErrors=true</c>, will output REST error code if applicable, otherwise <c>null</c></param>
            <param name="getRESTErrors">Whether REST error code should also be examined / extracted.</param>
            <returns>Returns <c>true</c> if HTTP status code and REST error were extracted.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.IsRetriableHttpError(System.Net.HttpStatusCode,System.String)">
            <summary>
            Returns true if the specified HTTP status / error code is returned in a transient / retriable error condition
            </summary>
            <param name="httpStatusCode">HTTP error code value</param>
            <param name="restStatusCode">REST error code value</param>
            <returns><c>true</c> if this is a transient / retriable error condition</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.IsContentionError(System.Net.HttpStatusCode)">
            <summary>
            Check whether a HTTP status code returned from a REST call might be due to a (temporary) storage contention error.
            </summary>
            <param name="httpStatusCode">HTTP status code to be examined.</param>
            <returns>Returns <c>true</c> if the HTTP status code is due to storage contention.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.IsNotFoundError(System.Net.HttpStatusCode)">
            <summary>
            Check whether a HTTP status code returned from a REST call might be due to a (temporary) storage contention error.
            </summary>
            <param name="httpStatusCode">HTTP status code to be examined.</param>
            <returns>Returns <c>true</c> if the HTTP status code is due to storage contention.</returns>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.TableNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[A-Za-z][A-Za-z0-9]{2,62}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Za-z].<br/>
            ○ Match a character in the set [0-9A-Za-z] atomically at least 2 and at most 62 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureTableUtils.SanitizeTableProperty(System.String)">
            <summary>
            Remove any characters that can't be used in Azure PartitionKey or RowKey values.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableName">
            <summary>
            Table name for Azure Storage
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.StoragePolicyOptions">
            <summary>
            Azure Storage Policy Options
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ClientOptions">
            <summary>
            Options to be used when configuring the table storage client, or <see langword="null"/> to use the default options.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.CreateClient">
            <summary>
            The delegate used to create a <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> instance.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient">
            <summary>
            Gets or sets the client used to access the Azure Table Service.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.String)">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using a connection string.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.Uri)">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using an authenticated service URI.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.Func{System.Threading.Tasks.Task{Azure.Data.Tables.TableServiceClient}})">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using the provided callback.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using an authenticated service URI and a <see cref="T:Azure.Core.TokenCredential"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using an authenticated service URI and a <see cref="T:Azure.AzureSasCredential"/>.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.ConfigureTableServiceClient(System.Uri,Azure.Data.Tables.TableSharedKeyCredential)">
            <summary>
            Configures the <see cref="P:Orleans.Streaming.EventHubs.AzureStorageOperationOptions.TableServiceClient"/> using an authenticated service URI and a <see cref="T:Azure.Data.Tables.TableSharedKeyCredential"/>.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.EventDataGeneratorStreamOptions">
            <summary>
            Setting class for EHGeneratorStreamProvider
            </summary>
        </member>
        <member name="F:Orleans.Configuration.EventDataGeneratorStreamOptions.EventHubPartitionCount">
            <summary>
            Configure eventhub partition count wanted. EventDataGeneratorStreamProvider would generate the same set of partitions based on the count, when initializing.
            For example, if partition count set at 5, the generated partitions will be  partition-0, partition-1, partition-2, partition-3, partition-4
            </summary>
        </member>
        <member name="F:Orleans.Configuration.EventDataGeneratorStreamOptions.DefaultEventHubPartitionCount">
            <summary>
            Default EventHubPartitionRangeStart
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureTableStreamCheckpointerOptions.TableName">
            <summary>
            Azure table name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureTableStreamCheckpointerOptions.PersistInterval">
            <summary>
            Interval to write checkpoints.  Prevents spamming storage.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.EventHubOptions">
            <summary>
            EventHub settings for a specific hub
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubOptions.CreateConnection">
            <summary>
            Gets the delegate used to create connections to Azure Event Hub.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubOptions.ConsumerGroup">
            <summary>
            Event Hub consumer group.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubOptions.EventHubName">
            <summary>
            Event Hub name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubOptions.ConnectionOptions">
            <summary>
            Connection options used when creating a connection to an Azure Event Hub.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.EventHubOptions.CreateConnectionDelegate">
            <summary>
            Creates an Azure Event Hub connection.
            </summary>
            <param name="connectionOptions">The connection options.</param>
            <returns>An Azure Event Hub connection.</returns>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(System.String,System.String,System.String)">
            <summary>
            Configures the Azure Event Hub connection using the provided connection string.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(System.String,System.String,System.String,Azure.AzureNamedKeyCredential)">
            <summary>
            Configures the Azure Event Hub connection using the provided fully-qualified namespace string and credential.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(System.String,System.String,System.String,Azure.AzureSasCredential)">
            <summary>
            Configures the Azure Event Hub connection using the provided fully-qualified namespace string and credential.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(System.String,System.String,System.String,Azure.Core.TokenCredential)">
            <summary>
            Configures the Azure Event Hub connection using the provided fully-qualified namespace string and credential.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(Azure.Messaging.EventHubs.EventHubConnection,System.String)">
            <summary>
            Configures the Azure Event Hub connection using the provided connection instance.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.EventHubOptions.ConfigureEventHubConnection(Orleans.Configuration.EventHubOptions.CreateConnectionDelegate,System.String,System.String)">
            <summary>
            Configures the Azure Event Hub connection using the provided delegate.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubReceiverOptions.PrefetchCount">
            <summary>
            Optional parameter that configures the receiver prefetch count.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubReceiverOptions.StartFromNow">
            <summary>
            In cases where no checkpoint is found, this indicates if service should read from the most recent data, or from the beginning of a partition.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubStreamCachePressureOptions.SlowConsumingMonitorFlowControlThreshold">
            <summary>
            SlowConsumingPressureMonitorConfig
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubStreamCachePressureOptions.SlowConsumingMonitorPressureWindowSize">
            <summary>
            SlowConsumingMonitorPressureWindowSize
            </summary>
        </member>
        <member name="P:Orleans.Configuration.EventHubStreamCachePressureOptions.AveragingCachePressureMonitorFlowControlThreshold">
            <summary>
            AveragingCachePressureMonitorFlowControlThreshold, AveragingCachePressureMonitor is turn on by default. 
            User can turn it off by setting this value to null
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TableNameRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TableNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TableNameRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TableNameRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TableNameRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
