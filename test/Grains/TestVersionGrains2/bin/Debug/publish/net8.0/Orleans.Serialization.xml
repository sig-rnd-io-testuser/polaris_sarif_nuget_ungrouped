<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Serialization</name>
    </assembly>
    <members>
        <member name="T:Orleans.Serialization.Activators.IActivator`1">
            <summary>
            Functionality for creating object instances.
            </summary>
            <typeparam name="T">The instance type which this implementation creates.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Activators.IActivator`1.Create">
            <summary>
            Creates an instance of type <typeparamref name="T"/>.
            </summary>
            <returns>An instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter">
            <summary>
            An implementation of <see cref="T:System.Buffers.IBufferWriter`1"/> which writes to a <see cref="T:System.IO.Stream"/>, using an array as an intermediate buffer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter"/> struct.
            </summary>
            <param name="stream">The stream.</param>
            <param name="sizeHint">The size hint.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.ArrayStreamBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.BufferSliceReaderInput">
            <summary>
            Input type for <see cref="T:Orleans.Serialization.Buffers.Reader`1"/> to support <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> buffers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.BufferSliceReaderInput.#ctor(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice@)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.BufferSliceReaderInput"/> type.
            </summary>
            <param name="slice">The underlying buffer.</param>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.BufferWriterBox`1">
            <summary>
            A <see cref="T:System.Buffers.IBufferWriter`1"/> implementation which boxes another buffer writer.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Adaptors.BufferWriterBox`1.Value">
            <summary>
            Gets a reference to the underlying buffer writer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.BufferWriterBox`1.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.BufferWriterBox`1.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.BufferWriterBox`1.GetSpan(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter">
            <summary>
            A <see cref="T:System.Buffers.IBufferWriter`1"/> implementation for <see cref="T:System.Memory`1"/>
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter.#ctor(System.Memory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter.BytesWritten">
            <summary>
            Gets the number of bytes written.
            </summary>
            <value>The number of bytes written.</value>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter">
            <summary>
            An implementation of <see cref="T:System.Buffers.IBufferWriter`1"/> which writes to a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter"/> struct.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.MemoryStreamBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream">
            <summary>
            A <see cref="T:System.Buffers.IBufferWriter`1"/> implementation which boxes another buffer writer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream"/> class.
            </summary>
            <param name="minAllocationSize">Minimum size of the allocation.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.Rent">
            <summary>
            Gets an object from the pool if one is available, otherwise creates one.
            </summary>
            <returns>A <see cref="T:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.Return(Orleans.Serialization.Buffers.Adaptors.PooledBufferStream)">
            <summary>
            Return an object to the pool.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.Length">
            <summary>Gets the total length which has been written.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.ToArray">
            <summary>
            Returns the data which has been written as an array.
            </summary>
            <returns>The data which has been written.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.CopyTo``1(Orleans.Serialization.Buffers.Writer{``0}@)">
            <summary>Copies the contents of this writer to another writer.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.RentReadOnlySequence">
            <summary>
            Returns a new <see cref="T:System.Buffers.ReadOnlySequence`1"/> which must be used and returned before resetting this instance via the <see cref="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.ReturnReadOnlySequence(System.Buffers.ReadOnlySequence{System.Byte}@)"/> method.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.ReturnReadOnlySequence(System.Buffers.ReadOnlySequence{System.Byte}@)">
            <summary>
            Returns a <see cref="T:System.Buffers.ReadOnlySequence`1"/> previously rented by <see cref="M:Orleans.Serialization.Buffers.Adaptors.PooledBufferStream.RentReadOnlySequence"/>;
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter">
            <summary>
            An implementation of <see cref="T:System.Buffers.IBufferWriter`1"/> for writing to a <see cref="T:System.IO.Stream"/>, using pooled arrays as an intermediate buffer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter"/> struct.
            </summary>
            <param name="stream">The stream.</param>
            <param name="sizeHint">The size hint.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.PoolingStreamBufferWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter">
            <summary>
            A special-purpose <see cref="T:System.Buffers.IBufferWriter`1"/> implementation for supporting <see cref="T:System.Span`1"/> in <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter.#ctor(System.Span{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter.BytesWritten">
            <summary>
            Gets the number of bytes written.
            </summary>
            <value>The number of bytes written.</value>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Buffers.Adaptors.SpanBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Buffers.BufferWriterExtensions">
            <summary>
            Extensions for working with <see cref="T:System.Buffers.IBufferWriter`1"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.BufferWriterExtensions.CreateWriter``1(``0,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a <see cref="T:Orleans.Serialization.Buffers.Writer`1"/> instance for the provided buffer.
            </summary>
            <typeparam name="TBufferWriter">The type of the buffer writer.</typeparam>
            <param name="buffer">The buffer.</param>
            <param name="session">The session.</param>
            <returns>A new writer.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.PooledBuffer">
            <summary>
            A <see cref="T:System.Buffers.IBufferWriter`1"/> implementation implemented using pooled arrays which is specialized for creating <see cref="T:System.Buffers.ReadOnlySequence`1"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.PooledBuffer"/> struct.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.PooledBuffer.Length">
            <summary>Gets the total length which has been written.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.ToArray">
            <summary>
            Returns the data which has been written as an array.
            </summary>
            <returns>The data which has been written.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Reset">
            <summary>
            Resets this instance, returning all memory.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.GetSpan(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.CopyTo(System.Span{System.Byte})">
            <summary>Copies the contents of this writer to a span.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.CopyTo``1(Orleans.Serialization.Buffers.Writer{``0}@)">
            <summary>Copies the contents of this writer to another writer.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.CopyTo``1(``0@)">
            <summary>Copies the contents of this writer to another writer.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.AsReadOnlySequence">
            <summary>
            Returns a new <see cref="T:System.Buffers.ReadOnlySequence`1"/> which must not be accessed after disposing this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Slice">
            <summary>
            Returns a <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> covering this entire buffer.
            </summary>
            <remarks>
            The lifetime of the returned <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> must be shorter than the lifetime of this instance.
            </remarks>
            <returns>A <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> covering this entire buffer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Slice(System.Int32)">
            <summary>
            Returns a slice of this buffer, beginning at the specified offset.
            </summary>
            <remarks>
            The lifetime of the returned <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> must be shorter than the lifetime of this instance.
            </remarks>
            <returns>A slice representing a subset of this instance, beginning at the specified offset.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a slice of this buffer, beginning at the specified offset and having the specified length.
            </summary>
            <remarks>
            The lifetime of the returned <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> must be shorter than the lifetime of this instance.
            </remarks>
            <returns>A slice representing a subset of this instance, beginning at the specified offset.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.GetEnumerator">
            <summary>
            Returns an enumerator which can be used to enumerate the data referenced by this instance.
            </summary>
            <returns>An enumerator for the data contained in this instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Write(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Writes the provided sequence to this buffer.
            </summary>
            <param name="input">The data to write.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the provided value to this buffer.
            </summary>
            <param name="value">The data to write.</param>
        </member>
        <member name="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice">
            <summary>
            Represents a slice of a <see cref="T:Orleans.Serialization.Buffers.PooledBuffer"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.#ctor(Orleans.Serialization.Buffers.PooledBuffer@,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/> type.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset into the buffer at which this slice begins.</param>
            <param name="length">The length of this slice.</param>
        </member>
        <member name="P:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.Buffer">
            <summary>
            Gets the underlying <see cref="T:Orleans.Serialization.Buffers.PooledBuffer"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.Offset">
            <summary>
            Gets the offset into the underlying buffer at which this slice begins.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.Length">
            <summary>
            Gets the length of this slice.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.Slice(System.Int32)">
            <summary>
            Forms a slice out of this instance, beginning at the specified offset into this slice.
            </summary>
            <param name="offset">The offset into this slice where the newly formed slice will begin.</param>
            <returns>A slice instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of this instance, beginning at the specified offset into this slice and having the specified length.
            </summary>
            <param name="offset">The offset into this slice where the newly formed slice will begin.</param>
            <param name="length">The length of the new slice.</param>
            <returns>A slice instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.CopyTo(System.Span{System.Byte})">
            <summary>Copies the contents of this writer to a span.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.CopyTo(Orleans.Serialization.Buffers.PooledBuffer@)">
            <summary>Copies the contents of this writer to a pooled buffer.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.CopyTo``1(``0@)">
            <summary>Copies the contents of this writer to a buffer writer.</summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.ToArray">
            <summary>
            Returns the data which has been written as an array.
            </summary>
            <returns>The data which has been written.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.GetEnumerator">
            <summary>
            Returns an enumerator which can be used to enumerate the data referenced by this instance.
            </summary>
            <returns>An enumerator for the data contained in this instance.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.SpanEnumerator">
            <summary>
            Enumerates over spans of bytes in a <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.SpanEnumerator.#ctor(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.SpanEnumerator"/> type.
            </summary>
            <param name="slice">The slice to enumerate.</param>
        </member>
        <member name="P:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.SpanEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.PooledBuffer.BufferSlice.SpanEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.ReaderInput">
            <summary>
            Functionality for reading binary data.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Buffers.ReaderInput.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Orleans.Serialization.Buffers.ReaderInput.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.Skip(System.Int64)">
            <summary>
            Skips the specified number of bytes.
            </summary>
            <param name="count">The number of bytes to skip.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.Seek(System.Int64)">
            <summary>
            Seeks to the specified position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.ReadByte">
            <summary>
            Reads a byte from the input.
            </summary>
            <returns>The byte which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt32"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt64"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.ReadBytes(System.Span{System.Byte})">
            <summary>
            Fills the destination span with data from the input.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the input into the destination array.
            </summary>
            <param name="destination">The destination array.</param>
            <param name="offset">The offset into the destination to start writing bytes.</param>
            <param name="length">The number of bytes to copy into destination.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.ReaderInput.TryReadBytes(System.Int32,System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Tries to read the specified number of bytes from the input.
            </summary>
            <param name="length">The number of bytes to read..</param>
            <param name="bytes">The bytes which were read..</param>
            <returns><see langword="true"/> if the number of bytes were successfully read, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Reader">
            <summary>
            Helper methods for <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(Orleans.Serialization.Buffers.PooledBuffer,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="input">The input.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="input">The input.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(System.IO.Stream,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided input stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(System.Buffers.ReadOnlySequence{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="sequence">The buffer.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(System.ReadOnlySpan{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader.Create(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a reader for the provided buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Reader`1"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.SpanReaderInput">
            <summary>
            Marker type for <see cref="T:Orleans.Serialization.Buffers.Reader`1"/> objects which operate over <see cref="T:System.ReadOnlySpan`1"/> buffers.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Buffers.ReadOnlySequenceInput">
            <summary>
            Input type for <see cref="T:Orleans.Serialization.Buffers.Reader`1"/> to support <see cref="T:System.Buffers.ReadOnlySequence`1"/> buffers.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Reader`1">
            <summary>
            Provides functionality for parsing data from binary input.
            </summary>
            <typeparam name="TInput">The underlying buffer reader type.</typeparam>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Reader`1.Session">
            <summary>
            Gets the serializer session.
            </summary>
            <value>The serializer session.</value>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Reader`1.Position">
            <summary>
            Gets the current reader position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Reader`1.Length">
            <summary>
            Gets the input length.
            </summary>
            <value>The input length.</value>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.Skip(System.Int64)">
            <summary>
            Skips the specified number of bytes.
            </summary>
            <param name="count">The number of bytes to skip.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ForkFrom(System.Int64,Orleans.Serialization.Buffers.Reader{`0}@)">
            <summary>
            Creates a new reader beginning at the specified position.
            </summary>        
            <param name="position">
            The position in the input stream to fork from.
            </param>        
            <param name="forked">
            The forked reader instance.
            </param>        
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ResumeFrom(System.Int64)">
            <summary>
            Resumes the reader from the specified position after forked readers are no longer in use.
            </summary>
            <param name="position">
            The position to resume reading from.
            </param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadByte">
            <summary>
            Reads a byte from the input.
            </summary>
            <returns>The byte which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadInt32">
            <summary>
            Reads an <see cref="T:System.Int32"/> from the input.
            </summary>
            <returns>The <see cref="T:System.Int32"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt32"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/> from the input.
            </summary>
            <returns>The <see cref="T:System.Int64"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt64"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadBytes``1(``0@,System.Int32)">
            <summary>
            Reads the specified number of bytes into the provided writer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadBytes(System.UInt32)">
            <summary>
            Reads an array of bytes from the input.
            </summary>
            <param name="count">The length of the array to read.</param>
            <returns>The array wihch was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadBytes(System.Span{System.Byte})">
            <summary>
            Fills <paramref name="destination"/> with bytes read from the input.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.TryReadBytes(System.Int32,System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Tries the read the specified number of bytes from the input.
            </summary>
            <param name="length">The length.</param>
            <param name="bytes">The bytes which were read.</param>
            <returns><see langword="true"/> if the specified number of bytes were read from the input, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadVarUInt32">
            <summary>
            Reads a variable-width <see cref="T:System.UInt32"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt32"/> which was read.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Reader`1.ReadVarUInt64">
            <summary>
            Reads a variable-width <see cref="T:System.UInt64"/> from the input.
            </summary>
            <returns>The <see cref="T:System.UInt64"/> which was read.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Writer">
            <summary>
            Helper methods for creating <see cref="T:Orleans.Serialization.Buffers.Writer`1"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create``1(``0,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer output type.</typeparam>
            <param name="destination">The destination.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create(System.IO.MemoryStream,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.CreatePooled(System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Int32)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="session">The session.</param>
            <param name="sizeHint">The size hint.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create(System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Int32)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="session">The session.</param>
            <param name="sizeHint">The size hint.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create(System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="output">The destination.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create(System.Memory{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="output">The destination.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.Create(System.Span{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to the specified destination.
            </summary>
            <param name="output">The destination.</param>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer.CreatePooled(Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Creates a writer which writes to a pooled buffer.
            </summary>
            <param name="session">The session.</param>
            <returns>A new <see cref="T:Orleans.Serialization.Buffers.Writer`1"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Buffers.Writer`1">
            <summary>
            Provides functionality for writing to an output stream.
            </summary>
            <typeparam name="TBufferWriter">The underlying buffer writer type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Buffers.Writer`1.Output">
            <summary>
            The output buffer writer.
            </summary>
            <remarks>
            Modifying the output directly may corrupt the state of the writer.
            </remarks>
        </member>
        <member name="F:Orleans.Serialization.Buffers.Writer`1._currentSpan">
            <summary>
            The current write span.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Buffers.Writer`1._bufferPos">
            <summary>
            The buffer position within the current span.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Buffers.Writer`1._previousBuffersSize">
            <summary>
            The previous buffer's size.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Buffers.Writer`1.MaxMultiSegmentSizeHint">
            <summary>
            Max segment buffer size hint (1MB)
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Writer`1.Session">
            <summary>
            Gets the serializer session.
            </summary>
            <value>The serializer session.</value>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Writer`1.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Orleans.Serialization.Buffers.Writer`1.WritableSpan">
            <summary>
            Gets the current writable span.
            </summary>
            <value>The current writable span.</value>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.AdvanceSpan(System.Int32)">
            <summary>
            Advance the write position in the current span.
            </summary>
            <param name="length">The number of bytes to advance wirte position by.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.Commit">
            <summary>
            Commit the currently written buffers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.EnsureContiguous(System.Int32)">
            <summary>
            Ensures that there are at least <paramref name="length"/> contiguous bytes available to be written.
            </summary>
            <param name="length">The number of contiguous bytes to ensure.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.Allocate(System.Int32)">
            <summary>
            Allocates buffer space for the specified number of bytes.
            </summary>
            <param name="sizeHint">The number of bytes to reserve.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteByte(System.Byte)">
            <summary>
            Writes the provided <see cref="T:System.Byte"/> to the output buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteInt32(System.Int32)">
            <summary>
            Writes the provided <see cref="T:System.Int32"/> to the output buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteInt64(System.Int64)">
            <summary>
            Writes the provided <see cref="T:System.Int64"/> to the output buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteUInt32(System.UInt32)">
            <summary>
            Writes the provided <see cref="T:System.UInt32"/> to the output buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteUInt64(System.UInt64)">
            <summary>
            Writes the provided <see cref="T:System.UInt64"/> to the output buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt7(System.UInt32)">
            <summary>
            Writes a 7-bit unsigned value as a variable-width integer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt28(System.UInt32)">
            <summary>
            Writes a 28-bit unsigned value as a variable-width integer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt32(System.UInt32)">
            <summary>
            Writes the provided <see cref="T:System.UInt32"/> to the output buffer as a variable-width integer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt56(System.UInt64)">
            <summary>
            Writes a 56-bit unsigned value as a variable-width integer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt64(System.UInt64)">
            <summary>
            Writes the provided <see cref="T:System.UInt64"/> to the output buffer as a variable-width integer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteFieldHeader(System.UInt32,System.Type,System.Type,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Writes the field header.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="expectedType">The expected type.</param>
            <param name="actualType">The actual type.</param>
            <param name="wireType">The wire type.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteFieldHeaderExpected(System.UInt32,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Writes an expected field header value.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="wireType">The wire type of the field.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteStartObject(System.UInt32,System.Type,System.Type)">
            <summary>
            Writes the start object tag.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="expectedType">The expected type.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteEndObject">
            <summary>
            Writes the end object tag.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteEndBase">
            <summary>
            Writes the end base tag.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarInt8(System.SByte)">
            <summary>
            Writes a variable-width <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarInt16(System.Int16)">
            <summary>
            Writes a variable-width <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarInt32(System.Int32)">
            <summary>
            Writes a variable-width <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarInt64(System.Int64)">
            <summary>
            Writes a variable-width <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt8(System.Byte)">
            <summary>
            Writes a variable-width <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Buffers.Writer`1.WriteVarUInt16(System.UInt16)">
            <summary>
            Writes a variable-width <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Buffers.VarIntReaderExtensions">
            <summary>
            Extension method for working with variable-width integers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarInt8``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.SByte"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarInt16``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.UInt16"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarUInt8``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.Byte"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarUInt16``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.UInt16"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarInt32``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.Int32"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadVarInt64``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a variable-width <see cref="T:System.Int64"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadUInt8``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.Byte"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadUInt16``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.UInt16"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadUInt32``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.UInt32"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadUInt64``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.UInt64"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadInt8``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.SByte"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadInt16``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.Int16"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadInt32``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.Int32"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="M:Orleans.Serialization.Buffers.VarIntReaderExtensions.ReadInt64``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Reads a variable-width <see cref="T:System.Int64"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="wireType">The wire type.</param>
            <returns>A variable-width integer.</returns>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IDeepCopierProvider">
            <summary>
            Provides <see cref="T:Orleans.Serialization.Cloning.IDeepCopier`1"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopierProvider.GetDeepCopier``1">
            <summary>
            Gets a deep copier capable of copying instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type supported by the copier.</typeparam>
            <returns>A deep copier capable of copying instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopierProvider.TryGetDeepCopier``1">
            <summary>
            Gets a deep copier capable of copying instances of type <typeparamref name="T"/>, or returns <see langword="null"/> if an appropriate copier was not found.
            </summary>
            <typeparam name="T">The type supported by the copier.</typeparam>
            <returns>A deep copier capable of copying instances of type <typeparamref name="T"/>, or <see langword="null"/> if an appropriate copier was not found.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopierProvider.GetDeepCopier(System.Type)">
            <summary>
            Gets a deep copier capable of copying instances of type <paramref name="type"/>.
            </summary>
            <param name="type">
            The type supported by the returned copier.
            </param>
            <returns>A deep copier capable of copying instances of type <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopierProvider.TryGetDeepCopier(System.Type)">
            <summary>
            Gets a deep copier capable of copying instances of type <paramref name="type"/>, or returns <see langword="null"/> if an appropriate copier was not found.
            </summary>
            <param name="type">
            The type supported by the returned copier.
            </param>
            <returns>A deep copier capable of copying instances of type <paramref name="type"/>, or <see langword="null"/> if an appropriate copier was not found.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopierProvider.GetBaseCopier``1">
            <summary>
            Gets a base type copier capable of copying instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type supported by the returned copier.
            </typeparam>
            <returns>A base type copier capable of copying instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IDeepCopier">
            <summary>
            Marker type for deep copiers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopier.DeepCopy(System.Object,Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Creates a deep copy of the provided untyped input. The type must still match the copier instance!
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IOptionalDeepCopier">
            <summary>
            Marker interface for deep copiers of types that could optionally be shallow-copyable.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IOptionalDeepCopier.IsShallowCopyable">
            <summary>
            Returns true if the type is shallow-copyable.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.ShallowCopier`1">
            <summary>
            Base type for deep copiers of types that are actually shallow-copyable.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.ShallowCopier`1.DeepCopy(`0,Orleans.Serialization.Cloning.CopyContext)">
            <summary>Returns the input value.</summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.ShallowCopier`1.DeepCopy(System.Object,Orleans.Serialization.Cloning.CopyContext)">
            <summary>Returns the input value.</summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IDeepCopier`1">
            <summary>
            Provides functionality for creating clones of objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects which this instance can copy.</typeparam>
            <seealso cref="T:Orleans.Serialization.Cloning.IDeepCopier" />
        </member>
        <member name="M:Orleans.Serialization.Cloning.IDeepCopier`1.DeepCopy(`0,Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Creates a deep copy of the provided input.
            </summary>
            <param name="input">The input.</param>
            <param name="context">The context.</param>
            <returns>A copy of <paramref name="input"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IBaseCopier">
            <summary>
            Marker type for base type copiers.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IBaseCopier`1">
            <summary>
            Provides functionality for copying members from one object to another.
            </summary>
            <typeparam name="T">The type of objects which this instance can copy.</typeparam>
            <seealso cref="T:Orleans.Serialization.Cloning.IBaseCopier" />
        </member>
        <member name="M:Orleans.Serialization.Cloning.IBaseCopier`1.DeepCopy(`0,`0,Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Clones members from <paramref name="input"/> and copies them to <paramref name="output"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IDerivedTypeCopier">
            <summary>
            Indicates that an <see cref="T:Orleans.Serialization.Cloning.IDeepCopier"/> implementation generalizes over all sub-types.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.IGeneralizedCopier">
            <summary>
            Provides functionality for copying objects of multiple types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.IGeneralizedCopier.IsSupportedType(System.Type)">
            <summary>
            Returns a value indicating whether the provided type is supported by this implementation.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true"/> if the type is supported type by this implementation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Cloning.ISpecializableCopier">
            <summary>
            Provides functionality for creating <see cref="T:Orleans.Serialization.Cloning.IDeepCopier"/> instances which support a given type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.ISpecializableCopier.IsSupportedType(System.Type)">
            <summary>
            Returns a value indicating whether the provided type is supported by this implementation.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true"/> if the type is supported type by this implementation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.ISpecializableCopier.GetSpecializedCopier(System.Type)">
            <summary>
            Gets an <see cref="T:Orleans.Serialization.Cloning.IDeepCopier"/> implementation which supports the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An <see cref="T:Orleans.Serialization.Cloning.IDeepCopier"/> implementation which supports the specified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.Cloning.CopyContext">
            <summary>
            Provides context for a copy operation.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.#ctor(Orleans.Serialization.Serializers.CodecProvider,System.Action{Orleans.Serialization.Cloning.CopyContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Cloning.CopyContext"/> class.
            </summary>
            <param name="codecProvider">The codec provider.</param>
            <param name="onDisposed">The action to call when this context is disposed.</param>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.TryGetCopy``1(System.Object,``0@)">
            <summary>
            Returns the previously recorded copy of the provided object, if it exists.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="original">The original object.</param>
            <param name="result">The previously recorded copy of <paramref name="original"/>.</param>
            <returns><see langword="true"/> if a copy of <paramref name="original"/> has been recorded, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Records a copy of an object.
            </summary>
            <param name="original">The original value.</param>
            <param name="copy">The copy of <paramref name="original"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.DeepCopy``1(``0)">
            <summary>
            Copies the provided value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value.</param>
            <returns>A copy of the provided value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Cloning.UntypedCopierWrapper`1">
            <summary>
            Converts an untyped copier into a strongly-typed copier.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Cloning.CopyContextPool">
            <summary>
            Object pool for <see cref="T:Orleans.Serialization.Cloning.CopyContext"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContextPool.#ctor(Orleans.Serialization.Serializers.CodecProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Cloning.CopyContextPool"/> class.
            </summary>
            <param name="codecProvider">The codec provider.</param>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContextPool.GetContext">
            <summary>
            Gets a <see cref="T:Orleans.Serialization.Cloning.CopyContext"/>.
            </summary>
            <returns>A <see cref="T:Orleans.Serialization.Cloning.CopyContext"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Cloning.CopyContextPool.Return(Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Returns the specified copy context to the pool.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArrayCodec`1">
            <summary>
            Serializer for arrays of rank 1.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ArrayCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArrayCopier`1">
            <summary>
            Copier for arrays of rank 1.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ArrayCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayCopier`1.DeepCopy(`0[],Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyMemoryCodec`1">
            <summary>
            Serializer for <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ReadOnlyMemoryCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ReadOnlyMemory{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyMemoryCopier`1">
            <summary>
            Copier for <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ReadOnlyMemoryCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryCopier`1.DeepCopy(System.ReadOnlyMemory{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MemoryCodec`1">
            <summary>
            Serializer for <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.MemoryCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Memory{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MemoryCopier`1">
            <summary>
            Copier for <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.MemoryCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryCopier`1.DeepCopy(System.Memory{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArraySegmentCodec`1">
            <summary>
            Serializer for <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ArraySegmentCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ArraySegment{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArraySegmentCopier`1">
            <summary>
            Copier for <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ArraySegmentCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentCopier`1.DeepCopy(System.ArraySegment{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArrayListCodec">
            <summary>
            Serializer for <see cref="T:System.Collections.ArrayList"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayListCodec.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ArrayListSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ArrayListCodec"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayListCodec.ConvertFromSurrogate(Orleans.Serialization.Codecs.ArrayListSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayListCodec.ConvertToSurrogate(System.Collections.ArrayList,Orleans.Serialization.Codecs.ArrayListSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArrayListSurrogate">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ArrayListCodec"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ArrayListSurrogate.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArrayListCopier">
            <summary>
            Copier for <see cref="T:System.Collections.ArrayList"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayListCopier.DeepCopy(System.Collections.ArrayList,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArrayListCopier.DeepCopy(System.Collections.ArrayList,System.Collections.ArrayList,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.BitVector32Codec">
            <summary>
            Serializer for <see cref="T:System.Collections.Specialized.BitVector32"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.BitVector32Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Specialized.BitVector32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.BitVector32Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ByteArrayCodec">
            <summary>
            Serializer for <see cref="T:System.Byte"/> arrays.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteArrayCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteArrayCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Byte[])">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ByteArrayCopier">
            <summary>
            Copier for <see cref="T:System.Byte"/> arrays.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteArrayCopier.Orleans#Serialization#Cloning#IDeepCopier{System#Byte[]}#DeepCopy(System.Byte[],Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteArrayCopier.DeepCopy(System.Byte[],Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Creates a deep copy of the provided input.
            </summary>
            <param name="input">The input.</param>
            <param name="context">The context.</param>
            <returns>A copy of <paramref name="input" />.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCodec">
            <summary>
            Serializer for <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#ReadOnlyMemory{System#Byte}}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#ReadOnlyMemory{System#Byte}}#WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCopier">
            <summary>
            Copier for <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCopier.Orleans#Serialization#Cloning#IDeepCopier{System#ReadOnlyMemory{System#Byte}}#DeepCopy(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyMemoryOfByteCopier.DeepCopy(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Copies the input.
            </summary>
            <param name="input">The input.</param>
            <param name="copyContext">The copy context.</param>
            <returns>A copy of the input.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ArraySegmentOfByteCopier">
            <summary>
            Copier for <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentOfByteCopier.Orleans#Serialization#Cloning#IDeepCopier{System#ArraySegment{System#Byte}}#DeepCopy(System.ArraySegment{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ArraySegmentOfByteCopier.DeepCopy(System.ArraySegment{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Copies the input.
            </summary>
            <param name="input">The input.</param>
            <param name="copyContext">The copy context.</param>
            <returns>A copy of the input.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MemoryOfByteCodec">
            <summary>
            Serializer for <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Memory{System#Byte}}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Memory{System#Byte}}#WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Memory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Memory{System.Byte})">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MemoryOfByteCopier">
            <summary>
            Copier for <see cref="T:System.Memory`1"/> of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCopier.Orleans#Serialization#Cloning#IDeepCopier{System#Memory{System#Byte}}#DeepCopy(System.Memory{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MemoryOfByteCopier.DeepCopy(System.Memory{System.Byte},Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Copies the input.
            </summary>
            <param name="input">The input.</param>
            <param name="copyContext">The copy context.</param>
            <returns>A copy of the input.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.PooledBufferCodec">
            <summary>
            Serializer for <see cref="T:Orleans.Serialization.Buffers.PooledBuffer"/> instances.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.PooledBufferCopier">
            <summary>
            Copier for <see cref="T:Orleans.Serialization.Buffers.PooledBuffer"/> instances, which are assumed to be immutable.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CollectionCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.CollectionCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.ObjectModel.Collection{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CollectionCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.CollectionCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCopier`1.DeepCopy(System.Collections.ObjectModel.Collection{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CollectionCopier`1.DeepCopy(System.Collections.ObjectModel.Collection{`0},System.Collections.ObjectModel.Collection{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CommonCodecTypeFilter">
            <summary>
            Defines common type filtering operations.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CommonCodecTypeFilter.IsAbstractOrFrameworkType(System.Type)">
            <summary>
            Returns true if the provided type is a framework or abstract type.
            </summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the type is a framework or abstract type, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CompareInfoCodec">
            <summary>
            Serializer for <see cref="T:System.Globalization.CompareInfo"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CompareInfoCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CompareInfoCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Globalization.CompareInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2.ConvertFromSurrogate(Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2.ConvertToSurrogate(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate`2">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ConcurrentDictionaryCodec`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentDictionaryCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ConcurrentDictionaryCopier`2"/> class.
            </summary>
            <param name="keyCopier">The key copier.</param>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCopier`2.DeepCopy(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentDictionaryCopier`2.DeepCopy(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},System.Collections.Concurrent.ConcurrentDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ConcurrentQueueSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ConcurrentQueueSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1.ConvertToSurrogate(System.Collections.Concurrent.ConcurrentQueue{`0},Orleans.Serialization.Codecs.ConcurrentQueueSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentQueueSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ConcurrentQueueCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ConcurrentQueueSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConcurrentQueueCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ConcurrentQueueCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCopier`1.DeepCopy(System.Collections.Concurrent.ConcurrentQueue{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConcurrentQueueCopier`1.DeepCopy(System.Collections.Concurrent.ConcurrentQueue{`0},System.Collections.Concurrent.ConcurrentQueue{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ConsumeFieldExtension">
            <summary>
            Extension methods for consuming unknown fields.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConsumeFieldExtension.ConsumeUnknownField``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Consumes an unknown field.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConsumeFieldExtension.ConsumeUnknownField``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field@)">
            <summary>
            Consumes an unknown field.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ConsumeFieldExtension.ConsumeTagDelimitedField``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Consumes a tag-delimited field.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CultureInfoCodec">
            <summary>
            Serializer for <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CultureInfoCodec.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.CultureInfoSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.CultureInfoCodec"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CultureInfoCodec.ConvertFromSurrogate(Orleans.Serialization.Codecs.CultureInfoSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CultureInfoCodec.ConvertToSurrogate(System.Globalization.CultureInfo,Orleans.Serialization.Codecs.CultureInfoSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CultureInfoSurrogate">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.CultureInfoCodec"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Codecs.CultureInfoSurrogate.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DateOnlyCodec">
            <summary>
            Serializer for <see cref="T:System.DateOnly"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateOnlyCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.DateOnly)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateOnlyCodec.Orleans#Serialization#Codecs#IFieldCodec{System#DateOnly}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateOnlyCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DateTimeCodec">
            <summary>
            Serializer for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.DateTime)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeCodec.Orleans#Serialization#Codecs#IFieldCodec{System#DateTime}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DateTimeOffsetCodec">
            <summary>
            Serializer for <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeOffsetCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.DateTimeOffset)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeOffsetCodec.Orleans#Serialization#Codecs#IFieldCodec{System#DateTimeOffset}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DateTimeOffsetCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DictionaryCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCodec`2.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{System.Collections.Generic.IEqualityComparer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.DictionaryCodec`2"/> class.
            </summary>
            <param name="keyCodec">The key codec.</param>
            <param name="valueCodec">The value codec.</param>
            <param name="comparerCodec">The comparer codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.Dictionary{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DictionaryCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.DictionaryCopier`2"/> class.
            </summary>
            <param name="keyCopier">The key copier.</param>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCopier`2.DeepCopy(System.Collections.Generic.Dictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryCopier`2.DeepCopy(System.Collections.Generic.Dictionary{`0,`1},System.Collections.Generic.Dictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DictionaryBaseCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DictionaryBaseCodec`2.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{System.Collections.Generic.IEqualityComparer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.DictionaryCodec`2"/> class.
            </summary>
            <param name="keyCodec">The key codec.</param>
            <param name="valueCodec">The value codec.</param>
            <param name="comparerCodec">The comparer codec.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.Enum32BaseCodec`1">
            <summary>
            Serializer for enum types with a 32-bit base.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Orleans.Serialization.Codecs.IFieldCodec`1" />
        </member>
        <member name="M:Orleans.Serialization.Codecs.Enum32BaseCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Enum32BaseCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DateTimeKindCodec">
            <summary>
            Serializer and copier for <see cref="T:System.DateTimeKind"/>.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DayOfWeekCodec">
            <summary>
            Serializer and copier for <see cref="T:System.DayOfWeek"/>.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.FieldHeaderCodec">
            <summary>
            Codec for operating with the wire format.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FieldHeaderCodec.ReadFieldHeader``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field@)">
            <summary>
            Reads a field header.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field header.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FieldHeaderCodec.ReadFieldHeader``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a field header.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The field header.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FieldHeaderCodec.ReadExtendedFieldHeader``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field@)">
            <summary>
            Reads an extended field header.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FieldHeaderCodec.ReadFieldHeaderForAnalysis``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a field header for diagnostic purposes.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value which was read.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.FloatCodec">
            <summary>
            Serializer for <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FloatCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Single)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FloatCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Single}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FloatCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.FloatCodec.ReadFloatRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without any protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DoubleCodec">
            <summary>
            Serializer for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DoubleCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Double)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DoubleCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Double}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DoubleCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DoubleCodec.ReadDoubleRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without any protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.DecimalCodec">
            <summary>
            Serializer for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DecimalCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Decimal)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DecimalCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Decimal}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DecimalCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.DecimalCodec.ReadDecimalRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.HalfCodec">
            <summary>
            Serializer for <see cref="T:System.Half"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HalfCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Half)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HalfCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Half}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HalfCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HalfCodec.ReadHalfRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2">
            <summary>
            Surrogate serializer for <typeparamref name="TField"/> and all sub-types.
            </summary>
            <typeparam name="TField">The type which the implementation of this class supports.</typeparam>
            <typeparam name="TSurrogate">The surrogate type serialized in place of <typeparamref name="TField"/>.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2.ConvertFromSurrogate(`1@)">
            <summary>
            Converts a value from the surrogate type to the field type.
            </summary>
            <param name="surrogate">The surrogate.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedReferenceTypeSurrogateCodec`2.ConvertToSurrogate(`0,`1@)">
            <summary>
            Converts a value to the surrogate type.
            </summary>
            <param name="value">The value.</param>
            <param name="surrogate">The surrogate.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2">
            <summary>
            Surrogate serializer for <typeparamref name="TField"/> and all sub-types.
            </summary>
            <typeparam name="TField">The type which the implementation of this class supports.</typeparam>
            <typeparam name="TSurrogate">The surrogate type serialized in place of <typeparamref name="TField"/>.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2.ConvertFromSurrogate(`1@)">
            <summary>
            Converts a value from the surrogate type to the field type.
            </summary>
            <param name="surrogate">The surrogate.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GeneralizedValueTypeSurrogateCodec`2.ConvertToSurrogate(`0,`1@)">
            <summary>
            Converts a value to the surrogate type.
            </summary>
            <param name="value">The value.</param>
            <param name="surrogate">The surrogate.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.GuidCodec">
            <summary>
            Serializer for <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GuidCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Guid)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GuidCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Guid}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GuidCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GuidCodec.WriteRaw``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Guid)">
            <summary>
            Writes the raw GUID content.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.GuidCodec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads the raw GUID content.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.HashSetCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{System.Collections.Generic.IEqualityComparer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.HashSetCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
            <param name="comparerCodec">The comparer codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.HashSetCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.HashSetCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCopier`1.DeepCopy(System.Collections.Generic.HashSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.HashSetCopier`1.DeepCopy(System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.IFieldCodec">
            <summary>
            Marker type for field codecs.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IFieldCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <summary>
            Writes a field using the provided untyped value. The type must still match the codec instance!
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IFieldCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value and returns it untyped. The type must still match the codec instance!
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.IFieldCodec`1">
            <summary>
            Provides functionality for reading and writing values of a specified type.
            Implements the <see cref="T:Orleans.Serialization.Codecs.IFieldCodec" />
            </summary>
            <typeparam name="T">The type which this implementation can read and write.</typeparam>
            <seealso cref="T:Orleans.Serialization.Codecs.IFieldCodec" />
        </member>
        <member name="M:Orleans.Serialization.Codecs.IFieldCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IFieldCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.IDerivedTypeCodec">
            <summary>
            Marker interface for codecs which directly support serializing all derived types of their specified type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ISerializationCallbacks`1">
            <summary>
            Hooks for stages in serialization and copying.
            </summary>
            <typeparam name="T">The underlying value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnSerializing(`0)">
            <summary>
            Called when serializing.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnSerialized(`0)">
            <summary>
            Called when a value has been serialized.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnDeserializing(`0)">
            <summary>
            Called when deserializing.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnDeserialized(`0)">
            <summary>
            Called when a value has been deserialized.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnCopying(`0,`0)">
            <summary>
            Called when copying.
            </summary>
            <param name="original">The original value.</param>
            <param name="result">The copy.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ISerializationCallbacks`1.OnCopied(`0,`0)">
            <summary>
            Called when a value has been copied.
            </summary>
            <param name="original">The original value.</param>
            <param name="result">The copy.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableArrayCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableArrayCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableArraySurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableArrayCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableArrayCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableArraySurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableArrayCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableArray{`0},Orleans.Serialization.Codecs.ImmutableArraySurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableArraySurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableArrayCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableArraySurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableArrayCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableArrayCopier`1.DeepCopy(System.Collections.Immutable.ImmutableArray{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableDictionarySurrogate{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2.ConvertToSurrogate(System.Collections.Immutable.ImmutableDictionary{`0,`1},Orleans.Serialization.Codecs.ImmutableDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableDictionarySurrogate`2">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableDictionaryCodec`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableDictionarySurrogate`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableDictionaryCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableDictionaryCopier`2.DeepCopy(System.Collections.Immutable.ImmutableDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableHashSetSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableHashSetSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableHashSet{`0},Orleans.Serialization.Codecs.ImmutableHashSetSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableHashSetSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableHashSetCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableHashSetSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableHashSetSurrogate`1.KeyComparer">
            <summary>
            Gets or sets the key comparer.
            </summary>
            <value>The key comparer.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableHashSetCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableHashSetCopier`1.DeepCopy(System.Collections.Immutable.ImmutableHashSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableListCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableList`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableListCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableListSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableListCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableListCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableListSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableListCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableList{`0},Orleans.Serialization.Codecs.ImmutableListSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableListSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableListCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableListSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableListCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableList`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableListCopier`1.DeepCopy(System.Collections.Immutable.ImmutableList{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableQueueCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableQueue`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableQueueCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableQueueSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableQueueCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableQueueCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableQueueSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableQueueCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableQueue{`0},Orleans.Serialization.Codecs.ImmutableQueueSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableQueueSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableListCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableQueueSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableQueueCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableQueue`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableQueueCopier`1.DeepCopy(System.Collections.Immutable.ImmutableQueue{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2.ConvertToSurrogate(System.Collections.Immutable.ImmutableSortedDictionary{`0,`1},Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate{`0,`1}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate`2">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCodec`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate`2.KeyComparer">
            <summary>
            Gets or sets the key comparer.
            </summary>
            <value>The key comparer.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate`2.ValueComparer">
            <summary>
            Gets or sets the value comparer.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedDictionaryCopier`2.DeepCopy(System.Collections.Immutable.ImmutableSortedDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableSortedSet{`0},Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ImmutableSortedSetCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate`1.KeyComparer">
            <summary>
            Gets or sets the key comparer.
            </summary>
            <value>The key comparer.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableSortedSetCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableSortedSetCopier`1.DeepCopy(System.Collections.Immutable.ImmutableSortedSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableStackCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Immutable.ImmutableStack`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableStackCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ImmutableStackSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ImmutableStackCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableStackCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ImmutableStackSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableStackCodec`1.ConvertToSurrogate(System.Collections.Immutable.ImmutableStack{`0},Orleans.Serialization.Codecs.ImmutableStackSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableStackSurrogate`1">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.Codecs.ImmutableStackCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ImmutableStackSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ImmutableStackCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Immutable.ImmutableStack`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ImmutableStackCopier`1.DeepCopy(System.Collections.Immutable.ImmutableStack{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.BoolCodec">
            <summary>
            Serializer for <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.BoolCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Boolean)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.BoolCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Boolean}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.BoolCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.CharCodec">
            <summary>
            Serializer for <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CharCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Char)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CharCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Char}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.CharCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ByteCodec">
            <summary>
            Serializer for <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Byte)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Byte,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Byte}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ByteCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SByteCodec">
            <summary>
            Serializer for <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.SByte)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SByteCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.SByte,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SByteCodec.Orleans#Serialization#Codecs#IFieldCodec{System#SByte}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SByteCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.UInt16Codec">
            <summary>
            Serializer for <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt16Codec.Orleans#Serialization#Codecs#IFieldCodec{System#UInt16}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt16Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt16Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.UInt16)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt16Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.UInt16,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.Int16Codec">
            <summary>
            Serializer for <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int16Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Int16)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int16Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Int16,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int16Codec.Orleans#Serialization#Codecs#IFieldCodec{System#Int16}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int16Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.UInt32Codec">
            <summary>
            Serialzier for <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt32Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.UInt32)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt32Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.UInt32,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt32Codec.Orleans#Serialization#Codecs#IFieldCodec{System#UInt32}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt32Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.Int32Codec">
            <summary>
            Serializer for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int32Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Int32)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int32Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Int32,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int32Codec.Orleans#Serialization#Codecs#IFieldCodec{System#Int32}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int32Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.Int64Codec">
            <summary>
            Serializer for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int64Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Int64)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int64Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Int64,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int64Codec.Orleans#Serialization#Codecs#IFieldCodec{System#Int64}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int64Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.UInt64Codec">
            <summary>
            Serializer for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt64Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.UInt64)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt64Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.UInt64,System.Type)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <param name="actualType">The actual type.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt64Codec.Orleans#Serialization#Codecs#IFieldCodec{System#UInt64}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt64Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.Int128Codec">
            <summary>
            Serializer for <see cref="T:System.Int128"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int128Codec.Orleans#Serialization#Codecs#IFieldCodec{System#Int128}#WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Int128)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int128Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Int128)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int128Codec.Orleans#Serialization#Codecs#IFieldCodec{System#Int128}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int128Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.Int128Codec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.UInt128Codec">
            <summary>
            Serializer for <see cref="T:System.UInt128"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt128Codec.Orleans#Serialization#Codecs#IFieldCodec{System#UInt128}#WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.UInt128)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt128Codec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.UInt128)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt128Codec.Orleans#Serialization#Codecs#IFieldCodec{System#UInt128}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt128Codec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UInt128Codec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a value without protocol framing.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.IPAddressCodec">
            <summary>
            Serializer for <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPAddressCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPAddressCodec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads the raw length prefixed IP address value.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPAddressCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Net.IPAddress)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPAddressCodec.WriteRaw``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Net.IPAddress)">
            <summary>
            Writes the raw length prefixed IP address value.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.IPEndPointCodec">
            <summary>
            Serializer for <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPEndPointCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.IPEndPointCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Net.IPEndPoint)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.KeyValuePairCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.KeyValuePairCodec`2.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.KeyValuePairCodec`2"/> class.
            </summary>
            <param name="keyCodec">The key codec.</param>
            <param name="valueCodec">The value codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.KeyValuePairCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.KeyValuePairCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.KeyValuePairCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.KeyValuePairCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.KeyValuePairCopier`2"/> class.
            </summary>
            <param name="keyCopier">The key copier.</param>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.KeyValuePairCopier`2.DeepCopy(System.Collections.Generic.KeyValuePair{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ListCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ListCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ListCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ListCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCopier`1.DeepCopy(System.Collections.Generic.List{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ListCopier`1.DeepCopy(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1">
            <summary>
            Serializer for multi-dimensional arrays.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{System.Int32[]},Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1"/> class.
            </summary>
            <param name="intArrayCodec">The int array codec.</param>
            <param name="elementCodec">The element codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCodec`1.IsSupportedType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.MultiDimensionalArrayCopier`1">
            <summary>
            Copier for multi-dimensional arrays.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCopier`1.DeepCopy(System.Object,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.MultiDimensionalArrayCopier`1.IsSupportedType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.NameValueCollectionCodec">
            <summary>
            Serializer for <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NameValueCollectionCodec.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.NameValueCollectionSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.NameValueCollectionCodec"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NameValueCollectionCodec.ConvertFromSurrogate(Orleans.Serialization.Codecs.NameValueCollectionSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NameValueCollectionCodec.ConvertToSurrogate(System.Collections.Specialized.NameValueCollection,Orleans.Serialization.Codecs.NameValueCollectionSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.NameValueCollectionSurrogate">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.NameValueCollectionCodec"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Codecs.NameValueCollectionSurrogate.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.NameValueCollectionCopier">
            <summary>
            Copier for <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NameValueCollectionCopier.DeepCopy(System.Collections.Specialized.NameValueCollection,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.NullableCodec`1">
            <summary>
            Serializer for <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NullableCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.NullableCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NullableCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NullableCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.NullableCopier`1">
            <summary>
            Copier for <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NullableCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.NullableCopier`1"/> class.
            </summary>
            <param name="copier">The copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.NullableCopier`1.DeepCopy(System.Nullable{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ObjectCodec">
            <summary>
            Serializer for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Object}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Object}#WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Object)">
            <summary>
            Writes a field.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ObjectCopier">
            <summary>
            Copier for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ObjectCopier.DeepCopy(System.Object,Orleans.Serialization.Cloning.CopyContext)">
            <summary>
            Creates a deep copy of the provided input.
            </summary>
            <param name="input">The input.</param>
            <param name="context">The context.</param>
            <returns>A copy of <paramref name="input" />.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.QueueCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.QueueCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.Queue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.QueueCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.QueueCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCopier`1.DeepCopy(System.Collections.Generic.Queue{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.QueueCopier`1.DeepCopy(System.Collections.Generic.Queue{`0},System.Collections.Generic.Queue{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate`1">
            <summary>
            Surrogate type used by <see cref="T:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyCollectionCodec`1.ConvertToSurrogate(System.Collections.ObjectModel.ReadOnlyCollection{`0},Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReadOnlyCollectionCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyCollectionCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ReadOnlyCollectionCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReadOnlyCollectionCopier`1.DeepCopy(System.Collections.ObjectModel.ReadOnlyCollection{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReferenceCodec">
            <summary>
            Functionality for reading and writing object references.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.MarkValueField(Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Indicates that the field being serialized or deserialized is a value type.
            </summary>
            <param name="session">The serializer session.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.TryWriteReferenceFieldExpected``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Object)">
            <summary>
            Write an object reference if <paramref name="value"/> has already been written.
            This overload is suitable only for static codecs where expected type is statically known.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.TryWriteReferenceField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <summary>
            Write an object reference if <paramref name="value"/> has already been written and has been tracked via <see cref="M:Orleans.Serialization.Codecs.ReferenceCodec.RecordObject(Orleans.Serialization.Session.SerializerSession,System.Object)"/>.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldId">The field identifier.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
            <returns><see langword="true" /> if a reference was written, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.TryWriteReferenceField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Type,System.Object)">
            <summary>
            Write an object reference if <paramref name="value"/> has already been written and has been tracked via <see cref="M:Orleans.Serialization.Codecs.ReferenceCodec.RecordObject(Orleans.Serialization.Session.SerializerSession,System.Object)"/>.        /// 
            </summary>
            <remarks>This overload allows specifying a fixed reference type for codecs that implement <see cref="T:Orleans.Serialization.Codecs.IDerivedTypeCodec"/>.</remarks>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldId">The field identifier.</param>
            <param name="expectedType">The expected type.</param>
            <param name="actualType">The actual type.</param>
            <param name="value">The value.</param>
            <returns><see langword="true" /> if a reference was written, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.WriteNullReference``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32)">
            <summary>
            Writes the null reference.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldId">The field identifier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.ReadReference``2(Orleans.Serialization.Buffers.Reader{``1}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a referenced value.
            </summary>
            <typeparam name="T">The type of the referenced object.</typeparam>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The referenced value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.ReadReference``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Type)">
            <summary>
            Reads the reference.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="fieldType">The field type.</param>
            <returns>The referenced value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.RecordObject(Orleans.Serialization.Session.SerializerSession,System.Object)">
            <summary>
            Records that an object was read or written.
            </summary>
            <param name="session">The session.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.RecordObject(Orleans.Serialization.Session.SerializerSession,System.Object,System.UInt32)">
            <summary>
            Records that an object was read or written.
            </summary>
            <param name="session">The session.</param>
            <param name="value">The value.</param>
            <param name="referenceId">The reference identifier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceCodec.CreateRecordPlaceholder(Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Records and returns a placeholder reference id for objects which cannot be immediately deserialized.
            </summary>
            <param name="session">The session.</param>
            <returns>The placeholder reference id.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2">
            <summary>
            Surrogate serializer for <typeparamref name="TField"/>.
            </summary>
            <typeparam name="TField">The type which the implementation of this class supports.</typeparam>
            <typeparam name="TSurrogate">The surrogate type serialized in place of <typeparamref name="TField"/>.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2.ConvertFromSurrogate(`1@)">
            <summary>
            Converts a surrogate value to the field type.
            </summary>
            <param name="surrogate">The surrogate.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ReferenceTypeSurrogateCodec`2.ConvertToSurrogate(`0,`1@)">
            <summary>
            Converts a value to the surrogate type.
            </summary>
            <param name="value">The value.</param>
            <param name="surrogate">The surrogate.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SkipFieldCodec">
            <summary>
            A serializer which skips all fields which it encounters.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SkipFieldCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SkipFieldCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SkipFieldExtension">
            <summary>
            Extension methods for <see cref="T:Orleans.Serialization.Buffers.Reader`1"/> to skip fields.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SkipFieldExtension.SkipField``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Skips the current field.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedDictionaryCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.SortedDictionarySurrogate{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedDictionaryCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCodec`2.ConvertFromSurrogate(Orleans.Serialization.Codecs.SortedDictionarySurrogate{`0,`1}@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCodec`2.ConvertToSurrogate(System.Collections.Generic.SortedDictionary{`0,`1},Orleans.Serialization.Codecs.SortedDictionarySurrogate{`0,`1}@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedDictionarySurrogate`2">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.Codecs.SortedDictionaryCodec`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedDictionarySurrogate`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedDictionarySurrogate`2.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedDictionaryCopier`2">
            <summary>
            Copier  for <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedDictionaryCopier`2"/> class.
            </summary>
            <param name="keyCopier">The key copier.</param>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCopier`2.DeepCopy(System.Collections.Generic.SortedDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedDictionaryCopier`2.DeepCopy(System.Collections.Generic.SortedDictionary{`0,`1},System.Collections.Generic.SortedDictionary{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedListCodec`2">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCodec`2.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.SortedListSurrogate{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedListCodec`2"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCodec`2.ConvertFromSurrogate(Orleans.Serialization.Codecs.SortedListSurrogate{`0,`1}@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCodec`2.ConvertToSurrogate(System.Collections.Generic.SortedList{`0,`1},Orleans.Serialization.Codecs.SortedListSurrogate{`0,`1}@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedListSurrogate`2">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.Codecs.SortedListCodec`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedListSurrogate`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedListSurrogate`2.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedListCopier`2">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedListCopier`2"/> class.
            </summary>
            <param name="keyCopier">The key copier.</param>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCopier`2.DeepCopy(System.Collections.Generic.SortedList{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedListCopier`2.DeepCopy(System.Collections.Generic.SortedList{`0,`1},System.Collections.Generic.SortedList{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedSetCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.SortedSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCodec`1.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.SortedSetSurrogate{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedSetCodec`1"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCodec`1.ConvertFromSurrogate(Orleans.Serialization.Codecs.SortedSetSurrogate{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCodec`1.ConvertToSurrogate(System.Collections.Generic.SortedSet{`0},Orleans.Serialization.Codecs.SortedSetSurrogate{`0}@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedSetSurrogate`1">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.Codecs.SortedSetCodec`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedSetSurrogate`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.SortedSetSurrogate`1.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.SortedSetCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.SortedSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.SortedSetCopier`1"/> class.
            </summary>
            <param name="elementCopier">The element copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCopier`1.DeepCopy(System.Collections.Generic.SortedSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.SortedSetCopier`1.DeepCopy(System.Collections.Generic.SortedSet{`0},System.Collections.Generic.SortedSet{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.StackCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.StackCodec`1"/> class.
            </summary>
            <param name="fieldCodec">The field codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Collections.Generic.Stack{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.StackCopier`1">
            <summary>
            Copier for <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.StackCopier`1"/> class.
            </summary>
            <param name="valueCopier">The value copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCopier`1.DeepCopy(System.Collections.Generic.Stack{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StackCopier`1.DeepCopy(System.Collections.Generic.Stack{`0},System.Collections.Generic.Stack{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.StringCodec">
            <summary>
            Serializer for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StringCodec.Orleans#Serialization#Codecs#IFieldCodec{System#String}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.StringCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StringCodec.ReadRaw``1(Orleans.Serialization.Buffers.Reader{``0}@,System.UInt32)">
            <summary>
            Reads the raw string content.
            </summary>
            <param name="numBytes">Encoded string length in bytes.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StringCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.String)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.StringCodec.WriteRaw``1(Orleans.Serialization.Buffers.Writer{``0}@,System.String,System.Int32)">
            <summary>
            Writes the raw string content.
            </summary>
            <param name="value">String to be encoded.</param>
            <param name="numBytes">Encoded string length in bytes.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.TimeOnlyCodec">
            <summary>
            Serializer for <see cref="T:System.TimeOnly"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeOnlyCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.TimeOnly)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeOnlyCodec.Orleans#Serialization#Codecs#IFieldCodec{System#TimeOnly}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeOnlyCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Codecs.TimeSpanCodec">
            <summary>
            Serializer for <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeSpanCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.TimeSpan)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeSpanCodec.Orleans#Serialization#Codecs#IFieldCodec{System#TimeSpan}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TimeSpanCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`1">
            <summary>
            Serializer for <see cref="T:System.Tuple`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`1"/> class.
            </summary>
            <param name="valueCodec">The value codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`1">
            <summary>
            Copier for <see cref="T:System.Tuple`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`1"/> class.
            </summary>
            <param name="copier">The copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`1.DeepCopy(System.Tuple{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`2">
            <summary>
            Serializer for <see cref="T:System.Tuple`2"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`2.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`2"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`2">
            <summary>
            Copier for <see cref="T:System.Tuple`2"/>
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`2"/> class.
            </summary>
            <param name="copier1">The copier for <typeparamref name="T1"/>.</param>
            <param name="copier2">The copier for <typeparamref name="T2"/>.</param>
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`3">
            <summary>
            Serializer for <see cref="T:System.Tuple`3"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`3.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`3"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`3.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`3.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`3">
            <summary>
            Copier for <see cref="T:System.Tuple`3"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`3.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`3"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`3.DeepCopy(System.Tuple{`0,`1,`2},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`4">
            <summary>
            Serializer for <see cref="T:System.Tuple`4"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`4.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`4"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`4.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2,`3})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`4.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`4">
            <summary>
            Copier for <see cref="T:System.Tuple`4"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`4.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`4"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`4.DeepCopy(System.Tuple{`0,`1,`2,`3},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`5">
            <summary>
            Serializer for <see cref="T:System.Tuple`5"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`5.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`5"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`5.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2,`3,`4})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`5.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`5">
            <summary>
            Copier for <see cref="T:System.Tuple`5"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`5.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`5"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`5.DeepCopy(System.Tuple{`0,`1,`2,`3,`4},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`6">
            <summary>
            Serializer for <see cref="T:System.Tuple`6"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`6.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`6"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`6.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2,`3,`4,`5})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`6.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`6">
            <summary>
            Copier for <see cref="T:System.Tuple`6"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`6.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`6"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`6.DeepCopy(System.Tuple{`0,`1,`2,`3,`4,`5},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`7">
            <summary>
            Serializer for <see cref="T:System.Tuple`7"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`7.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5},Orleans.Serialization.Codecs.IFieldCodec{`6})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`7"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
            <param name="item7Codec">The <typeparamref name="T7"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`7.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2,`3,`4,`5,`6})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`7.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`7">
            <summary>
            Copier for <see cref="T:System.Tuple`7"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`7.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5},Orleans.Serialization.Cloning.IDeepCopier{`6})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`7"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
            <param name="copier7">The <typeparamref name="T7"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`7.DeepCopy(System.Tuple{`0,`1,`2,`3,`4,`5,`6},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCodec`8">
            <summary>
            Serializer for <see cref="T:System.Tuple`8"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="T8">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`8.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5},Orleans.Serialization.Codecs.IFieldCodec{`6},Orleans.Serialization.Codecs.IFieldCodec{`7})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCodec`8"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
            <param name="item7Codec">The <typeparamref name="T7"/> codec.</param>
            <param name="item8Codec">The <typeparamref name="T8"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`8.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Tuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCodec`8.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TupleCopier`8">
            <summary>
            Copier for <see cref="T:System.Tuple`8"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="T8">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`8.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5},Orleans.Serialization.Cloning.IDeepCopier{`6},Orleans.Serialization.Cloning.IDeepCopier{`7})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.TupleCopier`8"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
            <param name="copier7">The <typeparamref name="T7"/> copier.</param>
            <param name="copier8">The <typeparamref name="T8"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TupleCopier`8.DeepCopy(System.Tuple{`0,`1,`2,`3,`4,`5,`6,`7},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.TypeSerializerCodec">
            <summary>
            Serialzier for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TypeSerializerCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.TypeSerializerCodec.Orleans#Serialization#Codecs#IFieldCodec{System#Type}#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.TypeSerializerCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Codecs.UnknownFieldMarker">
            <summary>
            Marker object used to denote an unknown field and its position into a stream of data.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UnknownFieldMarker.#ctor(Orleans.Serialization.WireProtocol.Field,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.UnknownFieldMarker"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="position">The position.</param>
        </member>
        <member name="P:Orleans.Serialization.Codecs.UnknownFieldMarker.Position">
            <summary>
            The position into the stream at which this field occurs.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Codecs.UnknownFieldMarker.Field">
            <summary>
            The field header.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UnknownFieldMarker.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.UriCodec">
            <summary>
            Serializer for <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UriCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <summary>
            Reads a value.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.UriCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Uri)">
            <summary>
            Writes a field without type info (expected type is statically known).
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec">
            <summary>
            Serializer for <see cref="T:System.ValueTuple"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`1">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`1"/> class.
            </summary>
            <param name="valueCodec">The value codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`1.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`1.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier">
            <summary>
            Copier for <see cref="T:System.ValueTuple"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier.IsShallowCopyable">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier.Orleans#Serialization#Cloning#IDeepCopier#DeepCopy(System.Object,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier.DeepCopy(System.ValueTuple,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`1">
            <summary>
            Copier for <see cref="T:System.ValueTuple`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`1"/> class.
            </summary>
            <param name="copier">The copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`1.IsShallowCopyable">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`1.DeepCopy(System.ValueTuple{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`2">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`2"/>
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`2.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`2"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`2">
            <summary>
            Copier for <see cref="T:System.ValueTuple`2"/>
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`2.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`2"/> class.
            </summary>
            <param name="copier1">The copier for <typeparamref name="T1"/>.</param>
            <param name="copier2">The copier for <typeparamref name="T2"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`2.DeepCopy(System.ValueTuple{`0,`1},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`3">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`3"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`3.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`3"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`3.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`3.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`3">
            <summary>
            Copier for <see cref="T:System.ValueTuple`3"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`3.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`3"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`3.DeepCopy(System.ValueTuple{`0,`1,`2},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`4">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`4"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`4.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`4"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`4.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2,`3})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`4.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`4">
            <summary>
            Copier for <see cref="T:System.ValueTuple`4"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`4.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`4"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`4.DeepCopy(System.ValueTuple{`0,`1,`2,`3},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`5">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`5"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`5.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`5"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`5.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2,`3,`4})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`5.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`5">
            <summary>
            Copier for <see cref="T:System.ValueTuple`5"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`5.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`5"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`5.DeepCopy(System.ValueTuple{`0,`1,`2,`3,`4},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`6">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`6"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`6.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`6"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`6.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`6.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`6">
            <summary>
            Copier for <see cref="T:System.ValueTuple`6"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`6.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`6"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`6.DeepCopy(System.ValueTuple{`0,`1,`2,`3,`4,`5},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`7">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`7"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`7.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5},Orleans.Serialization.Codecs.IFieldCodec{`6})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`7"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
            <param name="item7Codec">The <typeparamref name="T7"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`7.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`7.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`7">
            <summary>
            Copier for <see cref="T:System.ValueTuple`7"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`7.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5},Orleans.Serialization.Cloning.IDeepCopier{`6})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`7"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
            <param name="copier7">The <typeparamref name="T7"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`7.DeepCopy(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCodec`8">
            <summary>
            Serializer for <see cref="T:System.ValueTuple`8"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="T8">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`8.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Codecs.IFieldCodec{`1},Orleans.Serialization.Codecs.IFieldCodec{`2},Orleans.Serialization.Codecs.IFieldCodec{`3},Orleans.Serialization.Codecs.IFieldCodec{`4},Orleans.Serialization.Codecs.IFieldCodec{`5},Orleans.Serialization.Codecs.IFieldCodec{`6},Orleans.Serialization.Codecs.IFieldCodec{`7})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCodec`8"/> class.
            </summary>
            <param name="item1Codec">The <typeparamref name="T1"/> codec.</param>
            <param name="item2Codec">The <typeparamref name="T2"/> codec.</param>
            <param name="item3Codec">The <typeparamref name="T3"/> codec.</param>
            <param name="item4Codec">The <typeparamref name="T4"/> codec.</param>
            <param name="item5Codec">The <typeparamref name="T5"/> codec.</param>
            <param name="item6Codec">The <typeparamref name="T6"/> codec.</param>
            <param name="item7Codec">The <typeparamref name="T7"/> codec.</param>
            <param name="item8Codec">The <typeparamref name="T8"/> codec.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`8.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCodec`8.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ValueTupleCopier`8">
            <summary>
            Copier for <see cref="T:System.ValueTuple`8"/>.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="T8">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`8.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.IDeepCopier{`1},Orleans.Serialization.Cloning.IDeepCopier{`2},Orleans.Serialization.Cloning.IDeepCopier{`3},Orleans.Serialization.Cloning.IDeepCopier{`4},Orleans.Serialization.Cloning.IDeepCopier{`5},Orleans.Serialization.Cloning.IDeepCopier{`6},Orleans.Serialization.Cloning.IDeepCopier{`7})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.ValueTupleCopier`8"/> class.
            </summary>
            <param name="copier1">The <typeparamref name="T1"/> copier.</param>
            <param name="copier2">The <typeparamref name="T2"/> copier.</param>
            <param name="copier3">The <typeparamref name="T3"/> copier.</param>
            <param name="copier4">The <typeparamref name="T4"/> copier.</param>
            <param name="copier5">The <typeparamref name="T5"/> copier.</param>
            <param name="copier6">The <typeparamref name="T6"/> copier.</param>
            <param name="copier7">The <typeparamref name="T7"/> copier.</param>
            <param name="copier8">The <typeparamref name="T8"/> copier.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ValueTupleCopier`8.DeepCopy(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.VersionCodec">
            <summary>
            Serializer for <see cref="T:System.Version"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.VersionCodec.#ctor(Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.Codecs.VersionSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.VersionCodec"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Codecs.VersionCodec.ConvertFromSurrogate(Orleans.Serialization.Codecs.VersionSurrogate@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.VersionCodec.ConvertToSurrogate(System.Version,Orleans.Serialization.Codecs.VersionSurrogate@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.VersionSurrogate">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.Codecs.VersionCodec"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Codecs.VersionSurrogate.Major">
            <summary>
            Gets or sets the major version component.
            </summary>
            <value>The major version component.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.VersionSurrogate.Minor">
            <summary>
            Gets or sets the minor version component.
            </summary>
            <value>The minor version component.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.VersionSurrogate.Build">
            <summary>
            Gets or sets the build number.
            </summary>
            <value>The build number.</value>
        </member>
        <member name="F:Orleans.Serialization.Codecs.VersionSurrogate.Revision">
            <summary>
            Gets or sets the revision.
            </summary>
            <value>The revision.</value>
        </member>
        <member name="T:Orleans.Serialization.Codecs.VoidCodec">
            <summary>
            Serializer for unknown types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.VoidCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.VoidCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.VoidCopier">
            <summary>
            Copier for unknown types.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Codecs.WellKnownStringComparerCodec">
            <summary>
            Serializer for well-known <see cref="T:System.StringComparer"/> types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.WellKnownStringComparerCodec.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Codecs.WellKnownStringComparerCodec"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Codecs.WellKnownStringComparerCodec.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.WellKnownStringComparerCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.WellKnownStringComparerCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.EqualityComparerBaseCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.EqualityComparerBaseCodec`1.DeepCopy(System.Collections.Generic.EqualityComparer{`0},System.Collections.Generic.EqualityComparer{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.EqualityComparerBaseCodec`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Collections.Generic.EqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.EqualityComparerBaseCodec`1.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Collections.Generic.EqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Codecs.ComparerBaseCodec`1">
            <summary>
            Serializer for <see cref="T:System.Collections.Generic.Comparer`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Codecs.ComparerBaseCodec`1.DeepCopy(System.Collections.Generic.Comparer{`0},System.Collections.Generic.Comparer{`0},Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ComparerBaseCodec`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Collections.Generic.Comparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Codecs.ComparerBaseCodec`1.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Collections.Generic.Comparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Configuration.ITypeManifestProvider">
            <summary>
            Provides type manifest information.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Configuration.TypeManifestProviderBase">
            <summary>
            Base class for generated type manifest providers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Configuration.TypeManifestProviderBase.Microsoft#Extensions#Options#IConfigureOptions{Orleans#Serialization#Configuration#TypeManifestOptions}#Configure(Orleans.Serialization.Configuration.TypeManifestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestProviderBase.Key">
            <summary>
            Gets the unique identifier for this type manifest provider.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Configuration.TypeManifestProviderBase.ConfigureInner(Orleans.Serialization.Configuration.TypeManifestOptions)">
            <summary>
            Configures the provided type manifest options.
            </summary>
            <param name="options">The type manifest options.</param>
        </member>
        <member name="T:Orleans.Serialization.Configuration.TypeManifestOptions">
            <summary>
            Configuration of all types which are known to the code generator.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.EnableConfigurationAnalysis">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Orleans.Serialization.SerializerConfigurationAnalyzer"/> should be enabled.
            </summary>
            <remarks>
            This property does not cause <see cref="T:Orleans.Serialization.SerializerConfigurationAnalyzer"/> to be invoked.
            That is the responsibility of the consuming framework.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.Activators">
            <summary>
            Gets the set of known activators, which are responsible for creating instances of a given type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.FieldCodecs">
            <summary>
            Gets the set of known field codecs, which are responsible for serializing and deserializing fields of a given type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.Serializers">
            <summary>
            Gets the set of known serializers, which are responsible for serializing and deserializing a given type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.Copiers">
            <summary>
            Gets the set of copiers, which are responsible for creating deep copies of a given type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.Converters">
            <summary>
            Gets the set of converters, which are responsible for converting from one type to another.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.Interfaces">
            <summary>
            Gets the set of known interfaces, which are interfaces that have corresponding proxies in the <see cref="P:Orleans.Serialization.Configuration.TypeManifestOptions.InterfaceProxies"/> collection.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.InterfaceProxies">
            <summary>
            Gets the set of known interface proxies, which capture method invocations which can be serialized, deserialized, and invoked against an implementation of this interface.
            </summary>
            <remarks>
            This allows decoupling the caller and target, so that remote procedure calls can be implemented by capturing an invocation, transmitting it, and later invoking it against a target object.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.InterfaceImplementations">
            <summary>
            Gets the set of interface implementations, which are implementations of the interfaces present in <see cref="P:Orleans.Serialization.Configuration.TypeManifestOptions.Interfaces"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.WellKnownTypeIds">
            <summary>
            Gets the mapping of well-known type identifiers to their corresponding type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.WellKnownTypeAliases">
            <summary>
            Gets the mapping of well-known type aliases to their corresponding type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.AllowedTypes">
            <summary>
            Gets the mapping of allowed type names.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.CompoundTypeAliases">
            <summary>
            Gets the mapping from compound type aliases to types.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.AllowAllTypes">
            <summary>
            Gets or sets a value indicating whether to allow all types by default.
            Default: <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestOptions.TypeManifestProviders">
            <summary>
            Gets the set of type manifest providers which have configured this instance.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Configuration.TypeManifestProviderAttribute">
            <summary>
            Defines a metadata provider for this assembly.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Configuration.TypeManifestProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Configuration.TypeManifestProviderAttribute"/> class.
            </summary>
            <param name="providerType">The metadata provider type.</param>
        </member>
        <member name="P:Orleans.Serialization.Configuration.TypeManifestProviderAttribute.ProviderType">
            <summary>
            Gets the manifest provider type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializerException">
            <summary>
            Base exception for any serializer exception.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializerException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializerException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.FieldIdNotPresentException">
            <summary>
            An field identifier was expected but not present.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.FieldIdNotPresentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldIdNotPresentException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.FieldIdNotPresentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldIdNotPresentException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.SchemaTypeInvalidException">
            <summary>
            The schema type is invalid.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SchemaTypeInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SchemaTypeInvalidException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SchemaTypeInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SchemaTypeInvalidException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.FieldTypeInvalidException">
            <summary>
            The field type is invalid.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.FieldTypeInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldTypeInvalidException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.FieldTypeInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldTypeInvalidException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.FieldTypeMissingException">
            <summary>
            A field type was expected but not present.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.FieldTypeMissingException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldTypeMissingException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.FieldTypeMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.FieldTypeMissingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.ExtendedWireTypeInvalidException">
            <summary>
            The extended wire type is invalid.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ExtendedWireTypeInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ExtendedWireTypeInvalidException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ExtendedWireTypeInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ExtendedWireTypeInvalidException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.UnsupportedWireTypeException">
            <summary>
            The wire type is unsupported.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnsupportedWireTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnsupportedWireTypeException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnsupportedWireTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnsupportedWireTypeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Serialization.UnsupportedWireTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnsupportedWireTypeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.ReferenceNotFoundException">
            <summary>
            A referenced value was not found.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ReferenceNotFoundException.TargetReference">
            <summary>
            Gets the target reference.
            </summary>
            <value>The target reference.</value>
        </member>
        <member name="P:Orleans.Serialization.ReferenceNotFoundException.TargetReferenceType">
            <summary>
            Gets the type of the target reference.
            </summary>
            <value>The type of the target reference.</value>
        </member>
        <member name="M:Orleans.Serialization.ReferenceNotFoundException.#ctor(System.Type,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ReferenceNotFoundException"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetId">The target identifier.</param>
        </member>
        <member name="M:Orleans.Serialization.ReferenceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ReferenceNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Orleans.Serialization.ReferenceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.UnknownReferencedTypeException">
            <summary>
            A referenced type was not found.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnknownReferencedTypeException.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnknownReferencedTypeException"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Orleans.Serialization.UnknownReferencedTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnknownReferencedTypeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Orleans.Serialization.UnknownReferencedTypeException.Reference">
            <summary>
            Gets or sets the reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Orleans.Serialization.UnknownReferencedTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.ReferenceFieldNotSupportedException">
            <summary>
            A reference to a value is not supported here.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ReferenceFieldNotSupportedException.TargetReferenceType">
            <summary>
            Gets the type of the target reference.
            </summary>
            <value>The type of the target reference.</value>
        </member>
        <member name="M:Orleans.Serialization.ReferenceFieldNotSupportedException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ReferenceFieldNotSupportedException"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Orleans.Serialization.ReferenceFieldNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ReferenceFieldNotSupportedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Orleans.Serialization.ReferenceFieldNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.UnknownWellKnownTypeException">
            <summary>
            A well-known type was not known.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnknownWellKnownTypeException.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnknownWellKnownTypeException"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Orleans.Serialization.UnknownWellKnownTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnknownWellKnownTypeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Orleans.Serialization.UnknownWellKnownTypeException.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Orleans.Serialization.UnknownWellKnownTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.IllegalTypeException">
            <summary>
            A specified type is not allowed.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IllegalTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.IllegalTypeException"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Orleans.Serialization.IllegalTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.IllegalTypeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Orleans.Serialization.IllegalTypeException.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="M:Orleans.Serialization.IllegalTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeMissingException">
            <summary>
            A type was expected but not found.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeMissingException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeMissingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.RequiredFieldMissingException">
            <summary>
            A required field was not present.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.RequiredFieldMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.RequiredFieldMissingException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Serialization.RequiredFieldMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.RequiredFieldMissingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.CodecNotFoundException">
            <summary>
            No suitable serializer codec was found for a specified type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.CodecNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.CodecNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Serialization.CodecNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.CodecNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.UnexpectedLengthPrefixValueException">
            <summary>
            A length encoded field which is expected to have a length
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnexpectedLengthPrefixValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnexpectedLengthPrefixValueException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Serialization.UnexpectedLengthPrefixValueException.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnexpectedLengthPrefixValueException"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="expectedLength">The expected length.</param>
            <param name="actualLength">The actual length.</param>
        </member>
        <member name="M:Orleans.Serialization.UnexpectedLengthPrefixValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.UnexpectedLengthPrefixValueException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper">
            <summary>
            Utilities for use by generated code.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.GetService``1(System.Object,Orleans.Serialization.Serializers.ICodecProvider)">
            <summary>
            Unwraps the provided service if it was wrapped.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="caller">The caller.</param>
            <param name="codecProvider">The codec provider.</param>
            <returns>The unwrapped service.</returns>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.UnwrapService``1(System.Object,``0)">
            <summary>
            Unwraps the provided service if it was wrapped.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="caller">The caller.</param>
            <param name="service">The service.</param>
            <returns>The unwrapped service.</returns>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.GetOptionalCopier``1(Orleans.Serialization.Cloning.IDeepCopier{``0})">
            <summary>
            Returns the provided copier if it's not shallow-copyable.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.InvokableThrowArgumentOutOfRange(System.Int32,System.Int32)">
            <summary>        
            Generated code helper method which throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>                
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ConsumeEndBaseOrEndObject``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Expects empty content (a single field header of either <see cref="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndBaseFields"/> or <see cref="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndTagDelimited"/>),
            but will consume any unexpected fields also.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ConsumeEndBaseOrEndObject``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field@)">
            <summary>
            Expects empty content (a single field header of either <see cref="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndBaseFields"/> or <see cref="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndTagDelimited"/>),
            but will consume any unexpected fields also.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.SerializeUnexpectedType``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <summary>
            Serializes an unexpected value.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="fieldIdDelta">The field identifier delta.</param>
            <param name="expectedType">The expected type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.DeserializeUnexpectedType``2(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field@)">
            <summary>
            Deserializes an unexpected value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <typeparam name="TField">The value type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="field">The field.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.GetMethodInfoOrDefault(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> matching the provided values.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
            <param name="methodTypeParameters">The method type parameters.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier`2">
            <summary>
            Default copier implementation for (rarely copied) exception classes
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ISerializerBuilder">
            <summary>
            Builder interface for configuring serialization.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ISerializerBuilder.Services">
            <summary>
            Gets the service collection.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializerBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Serialization.ISerializerBuilder"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializerBuilderExtensions.Configure(Orleans.Serialization.ISerializerBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Options.IConfigureOptions{Orleans.Serialization.Configuration.TypeManifestOptions}})">
            <summary>
            Configures the serialization builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">The factory.</param>
            <returns>The serialization builder</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializerBuilderExtensions.Configure(Orleans.Serialization.ISerializerBuilder,Microsoft.Extensions.Options.IConfigureOptions{Orleans.Serialization.Configuration.TypeManifestOptions})">
            <summary>
            Configures the serialization builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The serialization builder</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializerBuilderExtensions.Configure(Orleans.Serialization.ISerializerBuilder,System.Action{Orleans.Serialization.Configuration.TypeManifestOptions})">
            <summary>
            Configures the serialization builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The serialization builder</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializerBuilderExtensions.AddAssembly(Orleans.Serialization.ISerializerBuilder,System.Reflection.Assembly)">
            <summary>
            Adds an assembly to the builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="assembly">The assembly.</param>
            <returns>The serialization builder</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializerConfigurationAnalyzer">
            <summary>
            Analyzes serializer configuration to find likely configuration issues.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializerConfigurationAnalyzer.AnalyzeSerializerAvailability(Orleans.Serialization.Serializers.ICodecProvider,Orleans.Serialization.Configuration.TypeManifestOptions)">
            <summary>
            Analyzes grain interface methods to find parameter types and return types which are not serializable.
            </summary>
            <param name="codecProvider">
            The codec provider.
            </param>
            <param name="options">
            The type manifest options.
            </param>
            <returns>
            A collection of types which have serializability issues.
            </returns>
        </member>
        <member name="T:Orleans.Serialization.SerializerConfigurationAnalyzer.SerializerConfigurationComplaint">
            <summary>
            Represents a configuration issue regarding the serializability of a type used in interface methods.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerConfigurationAnalyzer.SerializerConfigurationComplaint.Methods">
            <summary>
            Gets a collection of interface types which reference the type this complaint represents.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerConfigurationAnalyzer.SerializerConfigurationComplaint.HasSerializer">
            <summary>
            Gets or sets a value indicating whether a serializer is available for this type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerConfigurationAnalyzer.SerializerConfigurationComplaint.HasCopier">
            <summary>
            Gets or sets a value indicating whether a copier is available for this type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ServiceCollectionExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extensions.
            </summary>
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ServiceCollectionExtensions.AddSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Orleans.Serialization.ISerializerBuilder})">
            <summary>
            Adds serializer support.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.Serialization.IServiceHolder`1">
            <summary>
            Holds a reference to a service.
            </summary>
            <typeparam name="T">The service type.</typeparam>
        </member>
        <member name="P:Orleans.Serialization.IServiceHolder`1.Value">
            <summary>
            Gets the service.
            </summary>
            <value>The service.</value>
        </member>
        <member name="T:Orleans.Serialization.Invocation.IInvokable">
            <summary>
            Represents an object which can be invoked asynchronously.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetTarget">
            <summary>
            Gets the invocation target.
            </summary>
            <returns>The invocation target.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.SetTarget(Orleans.Serialization.Invocation.ITargetHolder)">
            <summary>
            Sets the invocation target from an instance of <see cref="T:Orleans.Serialization.Invocation.ITargetHolder"/>.
            </summary>
            <param name="holder">The invocation target.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.Invoke">
            <summary>
            Invoke the object.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetArgumentCount">
            <summary>
            Gets the number of arguments.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetArgument(System.Int32)">
            <summary>
            Gets the argument at the specified index.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The argument at the specified index.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.SetArgument(System.Int32,System.Object)">
            <summary>
            Sets the argument at the specified index.
            </summary>
            <param name="index">The argument index.</param>
            <param name="value">The argument value</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetMethodName">
            <summary>
            Gets the method name.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetInterfaceName">
            <summary>
            Gets the full interface name.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetActivityName">
            <summary>
            Gets the activity name, which refers to both the interface name and method name.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetMethod">
            <summary>
            Gets the method info object, which may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetInterfaceType">
            <summary>
            Gets the interface type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IInvokable.GetDefaultResponseTimeout">
            <summary>
            Gets the default response timeout.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Invocation.IResponseCompletionSource">
            <summary>
            Represents a fulfillable promise for a response to a request.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IResponseCompletionSource.Complete(Orleans.Serialization.Invocation.Response)">
            <summary>
            Sets the result.
            </summary>
            <param name="value">The result value.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.IResponseCompletionSource.Complete">
            <summary>
            Sets the result to the default value.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ITargetHolder">
            <summary>
            Represents an object which holds an invocation target as well as target extensions.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ITargetHolder.GetTarget``1">
            <summary>
            Gets the target.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>The target.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ITargetHolder.GetComponent``1">
            <summary>
            Gets the component with the specified type.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <returns>The component with the specified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.Invocation.InvokablePool">
            <summary>
            Object pool for <see cref="T:Orleans.Serialization.Invocation.IInvokable"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.InvokablePool.Get``1">
            <summary>
            Gets a value from the pool.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>A value from the pool.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.InvokablePool.Return``1(``0)">
            <summary>
            Returns a value to the pool.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="obj">The value to return.</param>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ResponseCompletionSourcePool">
            <summary>
            Object pool for <see cref="T:Orleans.Serialization.Invocation.ResponseCompletionSource"/> and <see cref="T:Orleans.Serialization.Invocation.ResponseCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSourcePool.Get``1">
            <summary>
            Gets a value from the pool.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <returns>A value from the pool.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSourcePool.Return``1(Orleans.Serialization.Invocation.ResponseCompletionSource{``0})">
            <summary>
            Returns a value to the pool.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <param name="obj">The value to return to the pool</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSourcePool.Get">
            <summary>
            Gets a value from the pool.
            </summary>
            <returns>A value from the pool.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSourcePool.Return(Orleans.Serialization.Invocation.ResponseCompletionSource)">
            <summary>
            Returns a value to the pool.
            </summary>
            <param name="obj">The value to return to the pool</param>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ResponsePool">
            <summary>
            Object pool for <see cref="T:Orleans.Serialization.Invocation.Response`1"/> values.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponsePool.Get``1">
            <summary>
            Gets a value from the pool.
            </summary>
            <typeparam name="T">The underlying response type.</typeparam>
            <returns>A value from the pool.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponsePool.Return``1(Orleans.Serialization.Invocation.Response{``0})">
            <summary>
            Returns a value to the pool.
            </summary>
            <typeparam name="T">The underlying response type.</typeparam>
            <param name="obj">The value to return to the pool.</param>
        </member>
        <member name="T:Orleans.Serialization.Invocation.Response">
            <summary>
            Represents the result of a method invocation.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.Response.FromException(System.Exception)">
            <summary>
            Creates a new response representing an exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A new response.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.Response.FromResult``1(``0)">
            <summary>
            Creates a new response object which has been fulfilled with the provided value.
            </summary>
            <typeparam name="TResult">The underlying result type.</typeparam>
            <param name="value">The value.</param>
            <returns>A new response.</returns>
        </member>
        <member name="P:Orleans.Serialization.Invocation.Response.Completed">
            <summary>
            Gets a completed response.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Invocation.Response.Result">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.Invocation.Response.Exception">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Invocation.Response.GetResult``1">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Invocation.Response.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Invocation.Response.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Invocation.CompletedResponse">
            <summary>
            Represents a completed <see cref="T:Orleans.Serialization.Invocation.Response"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Invocation.CompletedResponse.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Invocation.CompletedResponse.Result">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Serialization.Invocation.CompletedResponse.Exception">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.CompletedResponse.GetResult``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.CompletedResponse.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.CompletedResponse.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Invocation.CompletedResponseActivator">
            <summary>
            Activator for <see cref="T:Orleans.Serialization.Invocation.CompletedResponse"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.CompletedResponseActivator.Create">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ExceptionResponse">
            <summary>
            A <see cref="T:Orleans.Serialization.Invocation.Response"/> which represents an exception, a broken promise.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Invocation.ExceptionResponse.Result">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Serialization.Invocation.ExceptionResponse.Exception">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ExceptionResponse.GetResult``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ExceptionResponse.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ExceptionResponse.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Invocation.Response`1">
            <summary>
            A <see cref="T:Orleans.Serialization.Invocation.Response"/> which represents a typed value.
            </summary>
            <typeparam name="TResult">The underlying result type.</typeparam>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ResponseCodec">
            <summary>
            Supports raw serialization of <see cref="T:Orleans.Serialization.Invocation.Response`1"/> values.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Invocation.ResponseCompletionSource">
            <summary>
            A fulfillable promise.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.AsValueTask">
            <summary>
            Returns this instance as a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </summary>
            <returns>This instance, as a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.AsVoidValueTask">
            <summary>
            Returns this instance as a <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
            <returns>This instance, as a <see cref="T:System.Threading.Tasks.ValueTask"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.GetStatus(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.SetException(System.Exception)">
            <summary>
            Completes this instance with an exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.SetResult(Orleans.Serialization.Invocation.Response)">
            <summary>
            Completes this instance with a result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.Complete(Orleans.Serialization.Invocation.Response)">
            <summary>
            Completes this instance with a result.
            </summary>
            <param name="value">The result value.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.Complete">
            <summary>
            Completes this instance with the default result.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.GetResult(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource.System#Threading#Tasks#Sources#IValueTaskSource#GetResult(System.Int16)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.Invocation.ResponseCompletionSource`1">
            <summary>
            A fulfillable promise.
            </summary>
            <typeparam name="TResult">The underlying result type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.AsValueTask">
            <summary>
            Returns this instance as a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </summary>
            <returns>This instance, as a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.AsVoidValueTask">
            <summary>
            Returns this instance as a <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
            <returns>This instance, as a <see cref="T:System.Threading.Tasks.ValueTask"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.GetStatus(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.SetException(System.Exception)">
            <summary>
            Completes this instance with an exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.SetResult(`0)">
            <summary>
            Completes this instance with a result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.Complete(Orleans.Serialization.Invocation.Response)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.Complete(Orleans.Serialization.Invocation.Response{`0})">
            <summary>
            Completes this instance with a result.
            </summary>
            <param name="value">The result value.</param>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.GetResult(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Invocation.ResponseCompletionSource`1.System#Threading#Tasks#Sources#IValueTaskSource#GetResult(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.DotNetSerializableCodec">
            <summary>
            Serializer for types which implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> pattern.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.DotNetSerializableCodec.#ctor(Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.DotNetSerializableCodec"/> class.
            </summary>
            <param name="typeResolver">The type resolver.</param>
        </member>
        <member name="M:Orleans.Serialization.DotNetSerializableCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DotNetSerializableCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DotNetSerializableCodec.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.ExceptionCodec">
            <summary>
            Serializer for <see cref="T:System.Exception"/> types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.#ctor(Orleans.Serialization.TypeSystem.TypeConverter,Orleans.Serialization.Codecs.IFieldCodec{System.Collections.Generic.Dictionary{System.Object,System.Object}},Orleans.Serialization.Cloning.IDeepCopier{System.Collections.Generic.Dictionary{System.Object,System.Object}},Orleans.Serialization.Cloning.IDeepCopier{System.Exception},Microsoft.Extensions.Options.IOptions{Orleans.Serialization.ExceptionSerializationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ExceptionCodec"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="dictionaryCodec">The dictionary codec.</param>
            <param name="dictionaryCopier">The dictionary copier.</param>
            <param name="exceptionCopier">The exception copier.</param>
            <param name="exceptionSerializationOptions">The exception serialization options.</param>
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.GetObjectData(System.Exception)">
            <summary>
            Gets the object data from the provided exception.
            </summary>
            <param name="value">The value.</param>
            <returns>A populated <see cref="T:System.Runtime.Serialization.SerializationInfo"/> value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.SetBaseProperties(System.Exception,System.String,System.String,System.Exception,System.Int32,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Sets base properties on the provided exception.
            </summary>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="innerException">The inner exception.</param>
            <param name="hResult">The HResult.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.GetDataProperty(System.Exception)">
            <summary>
            Gets the data property from the provided exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The provided exception's <see cref="P:System.Exception.Data"/> property.</returns>
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.SerializeException``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.Orleans#Serialization#Codecs#IFieldCodec#ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.DeepCopy(System.Exception,System.Exception,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ExceptionCodec.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.AggregateExceptionCodec">
            <summary>
            Serializer for <see cref="T:System.AggregateException"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.AggregateExceptionCodec.#ctor(Orleans.Serialization.ExceptionCodec,Orleans.Serialization.Serializers.IValueSerializer{Orleans.Serialization.AggregateExceptionSurrogate})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.AggregateExceptionCodec"/> class.
            </summary>
            <param name="baseCodec">The base codec.</param>
            <param name="surrogateSerializer">The surrogate serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.AggregateExceptionCodec.ConvertFromSurrogate(Orleans.Serialization.AggregateExceptionSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.AggregateExceptionCodec.ConvertToSurrogate(System.AggregateException,Orleans.Serialization.AggregateExceptionSurrogate@)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.AggregateExceptionSurrogate">
            <summary>
            Surrogate type for <see cref="T:Orleans.Serialization.AggregateExceptionCodec"/>.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ExceptionSerializationOptions">
            <summary>
            Options for exception serialization.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ExceptionSerializationOptions.SupportedNamespacePrefixes">
            <summary>
            Gets the collection of supported namespace prefixes for the exception serializer.
            Any exception type which has a namespace with one of these prefixes will be serialized using the exception serializer.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ExceptionSerializationOptions.SupportedExceptionTypeFilter">
            <summary>
            Gets or sets the predicate used to enable serialization for an exception type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializationCallbacksFactory">
            <summary>
            Creates delegates for calling methods marked with serialization attributes.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationCallbacksFactory.GetReferenceTypeCallbacks(System.Type)">
            <summary>
            Gets serialization callbacks for reference types.
            </summary>
            <param name="type">The type.</param>
            <returns>Serialization callbacks.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationCallbacksFactory.GetValueTypeCallbacks``2(System.Type)">
            <summary>
            Gets serialization callbacks for value types.
            </summary>
            <typeparam name="TOwner">The declaring type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="type">The type.</param>
            <returns>Serialization callbacks.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1">
            <summary>
            Serialization callbacks.
            </summary>
            <typeparam name="TDelegate">The delegate type for each callback.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1"/> class.
            </summary>
            <param name="onDeserializing">The callback invoked during deserialization.</param>
            <param name="onDeserialized">The callback invoked once a value is deserialized.</param>
            <param name="onSerializing">The callback invoked during serialization.</param>
            <param name="onSerialized">The callback invoked once a value is serialized.</param>
        </member>
        <member name="F:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1.OnDeserializing">
            <summary>
            Gets the callback invoked while deserializing.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1.OnDeserialized">
            <summary>
            Gets the callback invoked once a value has been deserialized.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1.OnSerializing">
            <summary>
            Gets the callback invoked during serialization.
            </summary>
            <value>The on serializing.</value>
        </member>
        <member name="F:Orleans.Serialization.SerializationCallbacksFactory.SerializationCallbacks`1.OnSerialized">
            <summary>
            Gets the callback invoked once a value has been serialized.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializationConstructorFactory">
            <summary>
            Creates delegates for calling ISerializable-conformant constructors.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationConstructorFactory.HasSerializationConstructor(System.Type)">
            <summary>
            Determines whether the provided type has a serialization constructor.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the provided type has a serialization constructor; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationConstructorNotFoundException">
            <summary>
            Thrown when a type has no serialization constructor.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationConstructorNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializationConstructorNotFoundException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationConstructorNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.SerializationConstructorNotFoundException" /> class.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Serialization.UnavailableExceptionFallbackException">
            <summary>
            Represents an exception which has a type which is unavailable during deserialization.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnavailableExceptionFallbackException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.UnavailableExceptionFallbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.UnavailableExceptionFallbackException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.UnavailableExceptionFallbackException.Properties">
            <summary>
            Gets the serialized properties of the exception.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.UnavailableExceptionFallbackException.ExceptionType">
            <summary>
            Gets the exception type name.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.UnavailableExceptionFallbackException.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.ValueTypeSerializer`1">
            <summary>
            Serializer for ISerializable value types.
            </summary>
            <typeparam name="T">The type which this serializer can serialize.</typeparam>
        </member>
        <member name="T:Orleans.Serialization.Serializer">
            <summary>
            Serializes and deserializes values.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializer.#ctor(Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializer"/> class.
            </summary>
            <param name="sessionPool">The session pool.</param>
        </member>
        <member name="P:Orleans.Serialization.Serializer.SessionPool">
            <summary>
            Gets the serializer session pool.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializer.GetSerializer``1">
            <summary>
            Returns a serializer which is specialized to the provided type parameter.
            </summary>
            <typeparam name="T">The underlying type for the returned serializer.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializer.CanSerialize``1">
            <summary>
            Returns <see langword="true"/> if the provided type, <typeparamref name="T"/>, can be serialized, and <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializer.CanSerialize(System.Type)">
            <summary>
            Returns <see langword="true"/> if the provided type, <paramref name="type"/>, can be serialized, and <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializer.SerializeToArray``1(``0)">
            <summary>
            Serializes the provided <paramref name="value"/> into a new array.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Memory{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Memory{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.IO.Stream,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``2(``0,``1)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``2(``0,``1,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``2(``0,Orleans.Serialization.Buffers.Writer{``1}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Span{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Span{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Byte[])">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.ArraySegment{System.Byte})">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.ArraySegment{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Serialize``1(``0,System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.IO.Stream,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.Buffers.ReadOnlySequence{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ReadOnlySpan{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ArraySegment{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``1(System.ArraySegment{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer.Deserialize``2(Orleans.Serialization.Buffers.Reader{``1}@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The serialized type.</typeparam>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializer`1">
            <summary>
            Serializes and deserializes values.
            </summary>
            <typeparam name="T">The type of value which this instance serializes and deserializes.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.#ctor(Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializer`1"/> class.
            </summary>
            <param name="sessionPool">The session pool.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.#ctor(Orleans.Serialization.Codecs.IFieldCodec{`0},Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializer`1"/> class.
            </summary>
            <param name="codec">The codec.</param>
            <param name="sessionPool">The session pool.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize``1(`0,Orleans.Serialization.Buffers.Writer{``0}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize``1(`0,``0)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize``1(`0,``0,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.SerializeToArray(`0)">
            <summary>
            Serializes the provided <paramref name="value"/> into a new array.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Memory{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Memory{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Span{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Span{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Byte[])">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.IO.Stream,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Serialize(`0,System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.IO.Stream,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ArraySegment{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ReadOnlySpan{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.Byte[])">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializer`1.Deserialize(System.ArraySegment{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Orleans.Serialization.ValueSerializer`1">
            <summary>
            Serializes and deserializes value types.
            </summary>
            <typeparam name="T">The type which this instance operates on.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.#ctor(Orleans.Serialization.Serializers.IValueSerializerProvider,Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ValueSerializer`1"/> class.
            </summary>
            <param name="codecProvider">The codec provider.</param>
            <param name="sessionPool">The session pool.</param>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize``1(`0@,Orleans.Serialization.Buffers.Writer{``0}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize``1(`0@,``0)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize``1(`0@,``0,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.SerializeToArray(`0@)">
            <summary>
            Serializes the provided <paramref name="value"/> into a new array.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.ArraySegment{System.Byte})">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Memory{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Memory{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Span{System.Byte}@)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Span{System.Byte}@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Byte[])">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.IO.Stream,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Serialize(`0@,System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.IO.Stream,`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.IO.Stream,`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ArraySegment{System.Byte},`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ReadOnlySpan{System.Byte},`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ReadOnlySpan{System.Byte},`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.Byte[],`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.Byte[],`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ReadOnlyMemory{System.Byte},`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ReadOnlyMemory{System.Byte},`0@,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <param name="session">The serializer session.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ValueSerializer`1.Deserialize(System.ArraySegment{System.Byte},`0@)">
            <summary>
            Deserialize a value of type <typeparamref name="T"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="result">The deserialized value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Orleans.Serialization.ObjectSerializer">
            <summary>
            Provides methods for serializing and deserializing values which have types which are not statically known.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.#ctor(Orleans.Serialization.Session.SerializerSessionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.ObjectSerializer"/> class.
            </summary>
            <param name="sessionPool">The session pool.</param>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.CanSerialize(System.Type)">
            <summary>
            Returns <see langword="true"/> if the provided type, <paramref name="type"/>, can be serialized, and <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Memory{System.Byte}@,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Memory{System.Byte}@,Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.IO.Stream,System.Type,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Type,System.Int32)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <param name="sizeHint">The estimated upper bound for the length of the serialized data.</param>
            <remarks>The destination stream will not be flushed by this method.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize``1(System.Object,``0,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize``1(System.Object,``0,Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize``1(System.Object,Orleans.Serialization.Buffers.Writer{``0}@,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <typeparam name="TBufferWriter">The output buffer writer.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Span{System.Byte}@,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Span{System.Byte}@,Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <remarks>This method slices the <paramref name="destination"/> to the serialized data length.</remarks>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Byte[],System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.ArraySegment{System.Byte},System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.ArraySegment{System.Byte},Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Serialize(System.Object,System.Byte[],Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Serializes the provided <paramref name="value"/> into <paramref name="destination"/>.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="destination">The destination where serialized data will be written.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The length of the serialized data.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.IO.Stream,Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ReadOnlySpan{System.Byte},Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.Byte[],Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ReadOnlyMemory{System.Byte},System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ArraySegment{System.Byte},System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize(System.ArraySegment{System.Byte},Orleans.Serialization.Session.SerializerSession,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="session">The serializer session.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Orleans.Serialization.ObjectSerializer.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Type)">
            <summary>
            Deserialize a value of type <paramref name="type"/> from <paramref name="source"/>.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="source">The source buffer.</param>
            <param name="type">The expected type of the value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Orleans.Serialization.DeepCopier">
            <summary>
            Provides functionality for copying object and values.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.DeepCopier.#ctor(Orleans.Serialization.Serializers.CodecProvider,Orleans.Serialization.Cloning.CopyContextPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.DeepCopier"/> class.
            </summary>
            <param name="codecProvider">The codec provider.</param>
            <param name="contextPool">The context pool.</param>
        </member>
        <member name="M:Orleans.Serialization.DeepCopier.GetCopier``1">
            <summary>
            Returns a copier which is specialized to the provided type parameter.
            </summary>
            <typeparam name="T">The underlying type for the returned copier.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.DeepCopier.Copy``1(``0)">
            <summary>
            Creates a copy of the provided value.
            </summary>
            <typeparam name="T">The type of the value to copy.</typeparam>
            <param name="value">The value to copy.</param>
            <returns>A copy of the provided value.</returns>
        </member>
        <member name="T:Orleans.Serialization.DeepCopier`1">
            <summary>
            Provides functionality for copying objects and values.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.DeepCopier`1.#ctor(Orleans.Serialization.Cloning.IDeepCopier{`0},Orleans.Serialization.Cloning.CopyContextPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.DeepCopier`1"/> class.
            </summary>
            <param name="copier">The copier.</param>
            <param name="contextPool">The context pool.</param>
        </member>
        <member name="M:Orleans.Serialization.DeepCopier`1.Copy(`0)">
            <summary>
            Creates a copy of the provided value.
            </summary>
            <param name="value">The value to copy.</param>
            <returns>A copy of the provided value.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.AbstractTypeSerializer`1">
            <summary>
            Serializer for types which are abstract and therefore cannot be instantiated themselves, such as abstract classes and interface types.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.CodecProvider">
            <summary>
            Provides access to serializers and related objects.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializers.CodecProvider"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="codecConfiguration">The codec configuration.</param>
        </member>
        <member name="P:Orleans.Serialization.Serializers.CodecProvider.Services">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.TryGetCodec``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetCodec(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.TryGetCodec(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetCodec``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetActivator``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetBaseCodec``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetValueSerializer``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetBaseCopier``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetDeepCopier``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.TryGetDeepCopier``1">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.GetDeepCopier(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.CodecProvider.TryGetDeepCopier(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ConcreteTypeSerializer`2">
            <summary>
            Serializer for reference types which can be instantiated.
            </summary>
            <typeparam name="TField">The field type.</typeparam>
            <typeparam name="TBaseCodec">The partial serializer implementation type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ConcreteTypeSerializer`2.#ctor(Orleans.Serialization.Activators.IActivator{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializers.ConcreteTypeSerializer`2"/> class.
            </summary>
            <param name="activator">The activator.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ConcreteTypeSerializer`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ConcreteTypeSerializer`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IActivatorProvider">
            <summary>
            Provides activators.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IActivatorProvider.GetActivator``1">
            <summary>
            Gets an activator for the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The activator.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IBaseCodec`1">
            <summary>
            Functionality for serializing and deserializing members in a type hierarchy.
            </summary>
            <typeparam name="T">The type supported by this codec.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IBaseCodec`1.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,`0)">
            <summary>
            Serializes the provided value.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IBaseCodec`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,`0)">
            <summary>
            Deserializes into the provided value.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IBaseCodec">
            <summary>
            Marker interface for base serializers.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IGeneralizedBaseCodec">
            <summary>
            A base type serializer which supports multiple types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IGeneralizedBaseCodec.IsSupportedType(System.Type)">
            <summary>
            Determines whether the specified type is supported by this instance.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ISpecializableBaseCodec">
            <summary>
            Provides functionality for creating <see cref="T:Orleans.Serialization.Serializers.IBaseCodec"/> instances which support a given type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ISpecializableBaseCodec.IsSupportedType(System.Type)">
            <summary>
            Determines whether the specified type is supported by this instance.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ISpecializableBaseCodec.GetSpecializedCodec(System.Type)">
            <summary>
            Gets an <see cref="T:Orleans.Serialization.Serializers.IBaseCodec"/> implementation which supports the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An <see cref="T:Orleans.Serialization.Serializers.IBaseCodec"/> implementation which supports the specified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IBaseCodecProvider">
            <summary>
            Provides access to <see cref="T:Orleans.Serialization.Serializers.IBaseCodec`1"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IBaseCodecProvider.GetBaseCodec``1">
            <summary>
            Gets a base codec for the specified type.
            </summary>
            <typeparam name="TField">The underlying field type.</typeparam>
            <returns>A base codec.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ICodecProvider">
            <summary>
            Provides functionality for accessing codecs, activators, and copiers.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Serializers.ICodecProvider.Services">
            <summary>
            Gets the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ICodecSelector">
            <summary>
            Functionality used by general-purpose codecs (such as a JSON codec) to allow types to opt-in to using them.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Serializers.ICodecSelector.CodecName">
            <summary>
            The well-known codec name, used to match an instance with a codec.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ICodecSelector.IsSupportedType(System.Type)">
            <summary>
            Returns true if the specified codec should be used for this type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ICopierSelector">
            <summary>
            Functionality used by general-purpose copiers (such as a JSON copier) to allow types to opt-in to using them.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.Serializers.ICopierSelector.CopierName">
            <summary>
            The well-known copier name, used to match an instance with a copier.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ICopierSelector.IsSupportedType(System.Type)">
            <summary>
            Returns true if the specified copier should be used for this type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.DelegateCodecSelector">
            <summary>
            Implementation of <see cref="T:Orleans.Serialization.Serializers.ICodecSelector"/> which uses a delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.DelegateCopierSelector">
            <summary>
            Implementation of <see cref="T:Orleans.Serialization.Serializers.ICopierSelector"/> which uses a delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IFieldCodecProvider">
            <summary>
            Provides access to field codecs.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IFieldCodecProvider.GetCodec``1">
            <summary>
            Gets a codec for the specified type.
            </summary>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A codec.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IFieldCodecProvider.TryGetCodec``1">
            <summary>
            Gets a codec for the specific type, or <see langword="null"/> if no appropriate codec was found.
            </summary>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A codec.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IFieldCodecProvider.GetCodec(System.Type)">
            <summary>
            Gets a codec for the specific type.
            </summary>
            <param name="fieldType">
            The field type.
            </param>
            <returns>A codec.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IFieldCodecProvider.TryGetCodec(System.Type)">
            <summary>
            Gets a codec for the specific type, or <see langword="null"/> if no appropriate codec was found.
            </summary>
            <param name="fieldType">
            The field type.
            </param>
            <returns>A codec.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IGeneralizedCodec">
            <summary>
            A codec which supports multiple types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IGeneralizedCodec.IsSupportedType(System.Type)">
            <summary>
            Determines whether the specified type is supported by this instance.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ISpecializableCodec">
            <summary>
            Provides access to codecs for multiple types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ISpecializableCodec.IsSupportedType(System.Type)">
            <summary>
            Determines whether the specified type is supported by this instance.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ISpecializableCodec.GetSpecializedCodec(System.Type)">
            <summary>
            Gets an <see cref="T:Orleans.Serialization.Codecs.IFieldCodec"/> implementation which supports the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An <see cref="T:Orleans.Serialization.Codecs.IFieldCodec"/> implementation which supports the specified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IValueSerializer`1">
            <summary>
            Functionality for serializing a value type.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IValueSerializer`1.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,`0@)">
            <summary>
            Serializes the provided value.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IValueSerializer`1.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,`0@)">
            <summary>
            Deserializes the specified type.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IValueSerializer">
            <summary>
            Marker interface for value type serializers.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Serializers.IValueSerializerProvider">
            <summary>
            Provides access to value type serializers.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Serializers.IValueSerializerProvider.GetValueSerializer``1">
            <summary>
            Gets the value serializer for the specified type.
            </summary>
            <typeparam name="TField">The value type.</typeparam>
            <returns>A value serializer for the specified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializers.SurrogateCodec`3">
            <summary>
            Surrogate serializer for <typeparamref name="TField"/>.
            </summary>
            <typeparam name="TField">The type which the implementation of this class supports.</typeparam>
            <typeparam name="TSurrogate">The surrogate type serialized in place of <typeparamref name="TField"/>.</typeparam>
            <typeparam name="TConverter">The converter type which converts between <typeparamref name="TField"/> and <typeparamref name="TSurrogate"/>.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.#ctor(Orleans.Serialization.Serializers.IValueSerializer{`1},Orleans.Serialization.Cloning.IDeepCopier{`1},`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializers.SurrogateCodec`3"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
            <param name="surrogateCopier">The surrogate copier.</param>
            <param name="converter">The surrogate converter.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.DeepCopy(`0,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.SurrogateCodec`3.DeepCopy(`0,`0,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ValueSerializer`2">
            <summary>
            Serializer for value types.
            </summary>
            <typeparam name="TField">The field type.</typeparam>
            <typeparam name="TValueSerializer">The value-type serializer implementation type.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueSerializer`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializers.ValueSerializer`2"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueSerializer`2.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueSerializer`2.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3">
            <summary>
            Surrogate serializer for <typeparamref name="TField"/>.
            </summary>
            <typeparam name="TField">The type which the implementation of this class supports.</typeparam>
            <typeparam name="TSurrogate">The surrogate type serialized in place of <typeparamref name="TField"/>.</typeparam>
            <typeparam name="TConverter">The converter type which converts between <typeparamref name="TField"/> and <typeparamref name="TSurrogate"/>.</typeparam>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.#ctor(Orleans.Serialization.Serializers.IValueSerializer{`1},Orleans.Serialization.Cloning.IDeepCopier{`1},`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3"/> class.
            </summary>
            <param name="surrogateSerializer">The surrogate serializer.</param>
            <param name="surrogateCopier">The surrogate copier.</param>
            <param name="converter">The surrogate converter.</param>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.DeepCopy(`0,Orleans.Serialization.Cloning.CopyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.Deserialize``1(Orleans.Serialization.Buffers.Reader{``0}@,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.ReadValue``1(Orleans.Serialization.Buffers.Reader{``0}@,Orleans.Serialization.WireProtocol.Field)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.Serialize``1(Orleans.Serialization.Buffers.Writer{``0}@,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.Serializers.ValueTypeSurrogateCodec`3.WriteField``1(Orleans.Serialization.Buffers.Writer{``0}@,System.UInt32,System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.Session.ReferencedObjectCollection">
            <summary>
            A collection of objects which are referenced while serializing, deserializing, or copying.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.Session.ReferencedObjectCollection.ReferenceToObjectCount">
            <summary>
            Gets or sets the reference to object count.
            </summary>
            <value>The reference to object count.</value>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.TryGetReferencedObject(System.UInt32)">
            <summary>
            Tries to get the referenced object with the specified id.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The referenced object with the specified id if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.MarkValueField">
            <summary>
            Marks a value field.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.GetOrAddReference(System.Object,System.UInt32@)">
            <summary>
            Gets or adds a reference.
            </summary>
            <param name="value">The value.</param>
            <param name="reference">The reference.</param>
            <returns><see langword="true" /> if a reference already existed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.GetReferenceIndex(System.Object)">
            <summary>
            Gets the index of the reference, or <c>-1</c> if the object has not been encountered before.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of the reference, or <c>-1</c> if the object has not been encountered before.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.RecordReferenceField(System.Object)">
            <summary>
            Records a reference field.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.RecordReferenceField(System.Object,System.UInt32)">
            <summary>
            Records a reference field with the specified identifier.
            </summary>
            <param name="value">The value.</param>
            <param name="referenceId">The reference identifier.</param>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.CopyReferenceTable">
            <summary>
            Copies the reference table.
            </summary>
            <returns>A copy of the reference table.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.CopyIdTable">
            <summary>
            Copies the identifier table.
            </summary>
            <returns>A copy of the identifier table.</returns>
        </member>
        <member name="P:Orleans.Serialization.Session.ReferencedObjectCollection.CurrentReferenceId">
            <summary>
            Gets or sets the current reference identifier.
            </summary>
            <value>The current reference identifier.</value>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedObjectCollection.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Session.ReferencedTypeCollection">
            <summary>
            Collection of referenced <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.GetReferencedType(System.UInt32)">
            <summary>
            Gets the type with the specified reference id.
            </summary>
            <param name="reference">The reference id.</param>
            <returns>The referenced type.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.TryGetReferencedType(System.UInt32,System.Type@)">
            <summary>
            Gets the type with the specified reference id.
            </summary>
            <param name="reference">The reference id.</param>
            <param name="type">The referenced type.</param>
            <returns><see langword="true" /> if the referenced type was found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.RecordReferencedType(System.Type)">
            <summary>
            Records a type with the specified identifier.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.TryGetTypeReference(System.Type,System.UInt32@)">
            <summary>
            Gets the identifier for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="reference">The reference.</param>
            <returns><see langword="true" /> if the type has been previoulsy referenced, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.GetOrAddTypeReference(System.Type)">
            <summary>
            Gets or adds the identifier for the specified type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.ReferencedTypeCollection.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Session.SerializerSession">
            <summary>
            Contextual information for a serializer operation.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSession.#ctor(Orleans.Serialization.TypeSystem.TypeCodec,Orleans.Serialization.Session.WellKnownTypeCollection,Orleans.Serialization.Serializers.CodecProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Session.SerializerSession"/> class.
            </summary>
            <param name="typeCodec">The type codec.</param>
            <param name="wellKnownTypes">The well known types.</param>
            <param name="codecProvider">The codec provider.</param>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSession.TypeCodec">
            <summary>
            Gets the type codec.
            </summary>
            <value>The type codec.</value>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSession.WellKnownTypes">
            <summary>
            Gets the well known types collection.
            </summary>
            <value>The well known types collection.</value>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSession.ReferencedTypes">
            <summary>
            Gets the referenced type collection.
            </summary>
            <value>The referenced type collection.</value>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSession.ReferencedObjects">
            <summary>
            Gets the referenced object collection.
            </summary>
            <value>The referenced object collection.</value>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSession.CodecProvider">
            <summary>
            Gets the codec provider.
            </summary>
            <value>The codec provider.</value>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSession.PartialReset">
            <summary>
            Resets the referenced objects collection.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSession.Reset">
            <summary>
            Performs a full reset.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Session.SerializerSessionPool">
            <summary>
            Pool for <see cref="T:Orleans.Serialization.Session.SerializerSession"/> objects.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSessionPool.#ctor(Orleans.Serialization.TypeSystem.TypeCodec,Orleans.Serialization.Session.WellKnownTypeCollection,Orleans.Serialization.Serializers.CodecProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Session.SerializerSessionPool"/> class.
            </summary>
            <param name="typeCodec">The type codec.</param>
            <param name="wellKnownTypes">The well known type collection.</param>
            <param name="codecProvider">The codec provider.</param>
        </member>
        <member name="P:Orleans.Serialization.Session.SerializerSessionPool.CodecProvider">
            <summary>
            Gets the codec provider.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSessionPool.GetSession">
            <summary>
            Gets a serializer session from the pool.
            </summary>
            <returns>A serializer session.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.SerializerSessionPool.ReturnSession(Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Returns a session to the pool.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:Orleans.Serialization.Session.WellKnownTypeCollection">
            <summary>
            Collection of well-known types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Session.WellKnownTypeCollection.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.Session.WellKnownTypeCollection"/> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Orleans.Serialization.Session.WellKnownTypeCollection.GetWellKnownType(System.UInt32)">
            <summary>
            Gets the type corresponding to the provided type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>A type.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.WellKnownTypeCollection.TryGetWellKnownType(System.UInt32,System.Type@)">
            <summary>
            Tries to get the type corresponding to the provided type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="type">The type.</param>
            <returns><see langword="true" /> if the corresponding type was found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.Session.WellKnownTypeCollection.TryGetWellKnownTypeId(System.Type,System.UInt32@)">
            <summary>
            Tries the get the type identifier corresponding to the provided type.
            </summary>
            <param name="type">The type.</param>
            <param name="typeId">The type identifier.</param>
            <returns><see langword="true" /> if the type has a well-known identifier, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.CachedTypeResolver">
            <summary>
            Type resolver which caches results.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CachedTypeResolver.GetName(System.Reflection.Assembly)">
            <summary>
            Gets the cached assembly name.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CachedTypeResolver.ResolveType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CachedTypeResolver.TryResolveType(System.String,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree">
            <summary>
            Represents a compound type aliases as a prefix tree.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree"/> class.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Key">
            <summary>
            Gets the key for this node.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Value">
            <summary>
            Gets the value for this node.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Create">
            <summary>
            Creates a new tree with a root node which has no key or value.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Add(System.Type)">
            <summary>
            Adds a node to the tree.
            </summary>
            <param name="key">The key for the new node.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Add(System.String)">
            <summary>
            Adds a node to the tree.
            </summary>
            <param name="key">The key for the new node.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Add(System.String,System.Type)">
            <summary>
            Adds a node to the tree.
            </summary>
            <param name="key">The key for the new node.</param>
            <param name="value">The value for the new node.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.CompoundTypeAliasTree.Add(System.Type,System.Type)">
            <summary>
            Adds a node to the tree.
            </summary>
            <param name="key">The key for the new node.</param>
            <param name="value">The value for the new node.</param>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.DefaultTypeFilter">
            <summary>
            Type which allows any exception type to be resolved.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.DefaultTypeFilter.IsTypeNameAllowed(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TypeResolver">
            <summary>
            Provides methods for resolving a <see cref="T:System.Type"/> from a string.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeResolver.ResolveType(System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> corresponding to the provided <paramref name="name"/>, throwing an exception if resolution fails.
            </summary>
            <param name="name">The type name.</param>
            <returns>The <see cref="T:System.Type"/> corresponding to the provided <paramref name="name"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeResolver.TryResolveType(System.String,System.Type@)">
            <summary>
            Resolves the <see cref="T:System.Type"/> corresponding to the provided <paramref name="name" />, returning true if resolution succeeded and false otherwise.
            </summary>
            <param name="name">The type name.</param>
            <param name="type">The resolved type.</param>
            <returns><see langword="true"/> if resolution succeeded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.QualifiedType">
            <summary>
            Represents an assembly-qualifies type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.QualifiedType.EqualityComparer">
            <summary>
            Gets the equality comparer.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.QualifiedType"/> struct.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.QualifiedType.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.QualifiedType.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.Deconstruct(System.String@,System.String@)">
            <summary>
            Deconstructs this instance.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.op_Implicit(System.ValueTuple{System.String,System.String})~Orleans.Serialization.TypeSystem.QualifiedType">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Orleans.Serialization.TypeSystem.QualifiedType"/>.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.op_Equality(Orleans.Serialization.TypeSystem.QualifiedType,Orleans.Serialization.TypeSystem.QualifiedType)">
            <summary>
            Compares two values for equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.op_Inequality(Orleans.Serialization.TypeSystem.QualifiedType,Orleans.Serialization.TypeSystem.QualifiedType)">
            <summary>
            Compares two values for inequality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.QualifiedType.QualifiedTypeEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Orleans.Serialization.TypeSystem.QualifiedType"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.QualifiedTypeEqualityComparer.Equals(Orleans.Serialization.TypeSystem.QualifiedType,Orleans.Serialization.TypeSystem.QualifiedType)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.QualifiedType.QualifiedTypeEqualityComparer.GetHashCode(Orleans.Serialization.TypeSystem.QualifiedType)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameFormatter">
            <summary>
            Utility methods for formatting <see cref="T:System.Type"/> and <see cref="T:System.Reflection.TypeInfo"/> instances in a way which can be parsed by
            <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.RuntimeTypeNameFormatter.Format(System.Type)">
            <summary>
            Returns a <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>
            A <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameParser">
            <summary>
            Utility class for parsing type names, as formatted by <see cref="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameFormatter"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.RuntimeTypeNameParser.Parse(System.String)">
            <summary>
            Parse the provided value as a type name.
            </summary>
            <param name="input">The input.</param>
            <returns>A parsed type specification.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.RuntimeTypeNameParser.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse the provided value as a type name.
            </summary>
            <param name="input">The input.</param>
            <returns>A parsed type specification.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter">
            <summary>
            Rewrites <see cref="T:Orleans.Serialization.TypeSystem.TypeSpec"/> graphs.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.Rewriter`1">
            <summary>
            Signature for a delegate which rewrites a <see cref="T:Orleans.Serialization.TypeSystem.QualifiedType"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="state">The state provided to the rewriter method.</param>
            <returns>The rewritten qualified type.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.CompoundAliasResolver`1">
            <summary>
            Signature for a delegate which resolves a compound type alias.
            </summary>
            <param name="input">The input.</param>
            <param name="state">The state provided to the resolve method.</param>
            <returns>The resolved type type.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.Rewrite``1(Orleans.Serialization.TypeSystem.TypeSpec,Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.Rewriter{``0},``0@)">
            <summary>
            Rewrites a <see cref="T:Orleans.Serialization.TypeSystem.TypeSpec"/> using the provided rewriter delegate.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.Rewrite``1(Orleans.Serialization.TypeSystem.TypeSpec,Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.Rewriter{``0},Orleans.Serialization.TypeSystem.RuntimeTypeNameRewriter.CompoundAliasResolver{``0},``0@)">
            <summary>
            Rewrites a <see cref="T:Orleans.Serialization.TypeSystem.TypeSpec"/> using the provided rewriter delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TypeCodec">
            <summary>
            Functionality for serializing and deserializing types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.#ctor(Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.TypeCodec"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.WriteLengthPrefixed``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Type)">
            <summary>
            Writes a type with a length-prefix.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.WriteEncodedType``1(Orleans.Serialization.Buffers.Writer{``0}@,System.Type)">
            <summary>
            Writes a type.
            </summary>
            <typeparam name="TBufferWriter">The buffer writer type.</typeparam>
            <param name="writer">The writer.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.TryRead``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a type.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The type if it was successfully read, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.ReadLengthPrefixed``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Reads a length-prefixed type.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeCodec.TryReadForAnalysis``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Type@,System.String@)">
            <summary>
            Tries to read a type for diagnostics purposes.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="type">The type.</param>
            <param name="typeString">The type name as a string.</param>
            <returns><see langword="true" /> if a type was successfully read, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TypeCodec.TypeKey">
            <summary>
            Represents a named type for the purposes of serialization.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TypeConverter">
            <summary>
            Formats and parses <see cref="T:System.Type"/> instances using configured rules.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeConverter.#ctor(System.Collections.Generic.IEnumerable{Orleans.Serialization.ITypeConverter},System.Collections.Generic.IEnumerable{Orleans.Serialization.ITypeNameFilter},System.Collections.Generic.IEnumerable{Orleans.Serialization.ITypeFilter},Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions},Orleans.Serialization.TypeSystem.TypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.TypeConverter"/> class.
            </summary>
            <param name="formatters">The type name formatters.</param>
            <param name="typeNameFilters">The type name filters.</param>
            <param name="typeFilters">The type filters.</param>
            <param name="options">The options.</param>
            <param name="typeResolver">The type resolver.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeConverter.Format(System.Type,System.Boolean)">
            <summary>
            Formats the provided type.
            </summary>
            <param name="type">The type.</param>
            <param name="allowAllTypes">Whether all types are allowed or not.</param>
            <returns>The formatted type name.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeConverter.Format(System.Type,System.Func{Orleans.Serialization.TypeSystem.TypeSpec,Orleans.Serialization.TypeSystem.TypeSpec},System.Boolean)">
            <summary>
            Formats the provided type, rewriting elements using the provided delegate.
            </summary>
            <param name="type">The type.</param>
            <param name="rewriter">A delegate used to rewrite the type.</param>
            <param name="allowAllTypes">Whether all types are allowed or not.</param>
            <returns>The formatted type name.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeConverter.Parse(System.String)">
            <summary>
            Parses the provided type string.
            </summary>
            <param name="formatted">The formatted type name.</param>
            <returns>The parsed type.</returns>
            <exception cref="T:System.TypeLoadException">Unable to load the resulting type.</exception>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeConverter.TryParse(System.String,System.Type@)">
            <summary>
            Parses the provided type string.
            </summary>
            <param name="formatted">The formatted type name.</param>
            <param name="result">The result.</param>
            <returns><see langword="true"/> if the type was parsed and loaded; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TypeSpec">
            <summary>
            Represents a type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TypeSpec.Format">
            <summary>
            Formats this instance in a way that can be parsed by <see cref="T:Orleans.Serialization.TypeSystem.RuntimeTypeNameParser"/>.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.PointerTypeSpec">
            <summary>
            Represents a pointer (*) type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.PointerTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.PointerTypeSpec"/> class.
            </summary>
            <param name="elementType">The element type.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.PointerTypeSpec.ElementType">
            <summary>
            Gets the element type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.PointerTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.PointerTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.ReferenceTypeSpec">
            <summary>
            Represents a reference (&amp;) type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ReferenceTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.ReferenceTypeSpec"/> class.
            </summary>
            <param name="elementType">The element type.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.ReferenceTypeSpec.ElementType">
            <summary>
            Gets the element type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ReferenceTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ReferenceTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.ArrayTypeSpec">
            <summary>
            Represents an array type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ArrayTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.ArrayTypeSpec"/> class.
            </summary>
            <param name="elementType">The array element type.</param>
            <param name="dimensions">The number of dimensions for the array.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.ArrayTypeSpec.Dimensions">
            <summary>
            Gets the number of array dimensions.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.ArrayTypeSpec.ElementType">
            <summary>
            Gets the element type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ArrayTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ArrayTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec">
            <summary>
            Represents an constructed generic type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec,System.Int32,Orleans.Serialization.TypeSystem.TypeSpec[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec"/> class.
            </summary>
            <param name="unconstructedType">The unconstructed type.</param>
            <param name="arity">The expected number of type arguments.</param>
            <param name="arguments">The generic type arguments.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec.UnconstructedType">
            <summary>
            Gets the unconstructed type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec.Arguments">
            <summary>
            Gets the type arguments.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.ConstructedGenericTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.NamedTypeSpec">
            <summary>
            Represents a named type, which may be an unconstructed generic type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.NamedTypeSpec.#ctor(Orleans.Serialization.TypeSystem.NamedTypeSpec,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.NamedTypeSpec"/> class.
            </summary>
            <param name="containingType">The containing type.</param>
            <param name="name">The type name.</param>
            <param name="arity">The generic arity of the type, which must be greater than or equal to the generic arity of the containing type.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.NamedTypeSpec.Arity">
            <summary>
            Gets the number of generic parameters which this type requires.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.NamedTypeSpec.Name">
            <summary>
            Gets the type name, which includes the namespace if this is not a nested type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.NamedTypeSpec.ContainingType">
            <summary>
            Gets the containing type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.NamedTypeSpec.GetNamespaceQualifiedName">
            <summary>
            Gets the namespace-qualified type name, including containing types (for nested types).
            </summary>
            <returns>The namespace-qualified type name.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.NamedTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.NamedTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec">
            <summary>
            Represents an assembly-qualified type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec.Assembly">
            <summary>
            Gets the assembly specification.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec.Type">
            <summary>
            Gets the qualified type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.AssemblyQualifiedTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.TupleTypeSpec">
            <summary>
            Represents a type function.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TupleTypeSpec.#ctor(Orleans.Serialization.TypeSystem.TypeSpec[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.TupleTypeSpec"/> class.
            </summary>
            <param name="elements">The tuple elements.</param>
            <param name="arity">The number of generic type parameters which the type accepts.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.TupleTypeSpec.Arity">
            <summary>
            Gets the number of generic parameters which this type requires.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.TupleTypeSpec.Elements">
            <summary>
            Gets the tuple elements.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TupleTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.TupleTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.TypeSystem.LiteralTypeSpec">
            <summary>
            Represents a literal.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.LiteralTypeSpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.TypeSystem.LiteralTypeSpec"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Orleans.Serialization.TypeSystem.LiteralTypeSpec.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.LiteralTypeSpec.Format">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.TypeSystem.LiteralTypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.ITypeConverter">
            <summary>
            Converts between <see cref="T:System.Type"/> and <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ITypeConverter.TryFormat(System.Type,System.String@)">
            <summary>
            Formats the provided type as a string.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ITypeConverter.TryParse(System.String,System.Type@)">
            <summary>
            Parses the provided type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ITypeNameFilter">
            <summary>
            Functionality for allowing types to be loaded and to participate in serialization, deserialization, etcetera.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ITypeNameFilter.IsTypeNameAllowed(System.String,System.String)">
            <summary>
            Determines whether the specified type name corresponds to a type which is allowed to be loaded, serialized, deserialized, etcetera.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns><see langword="true" /> if the specified type is allowed; <see langword="false" /> if the type is not allowed; <see langword="null" /> if the type is unknown by this filter.</returns>
        </member>
        <member name="T:Orleans.Serialization.ITypeFilter">
            <summary>
            Functionality for allowing types to be loaded and to participate in serialization, deserialization, etcetera.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ITypeFilter.IsTypeAllowed(System.Type)">
            <summary>
            Determines whether the specified type is allowed to be serialized, deserialized, etcetera.
            </summary>
            <param name="type">The type</param>
            <returns><see langword="true" /> if the specified type is allowed; <see langword="false" /> if the type is not allowed; <see langword="null" /> if the type is unknown by this filter.</returns>
        </member>
        <member name="T:Orleans.Serialization.Utilities.BitStreamFormatter">
            <summary>
            Utilities for formatting an encoded bitstream in a textual manner.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format``1(Orleans.Serialization.Buffers.Reader{``0}@)">
            <summary>
            Formats the provided buffer.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(Orleans.Serialization.Buffers.PooledBuffer.BufferSlice,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified array.
            </summary>
            <param name="slice">The array.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(System.Byte[],Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(System.ReadOnlySpan{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified buffer.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(System.ReadOnlyMemory{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified buffer.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(System.Buffers.ReadOnlySequence{System.Byte},Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified buffer.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format(System.IO.Stream,Orleans.Serialization.Session.SerializerSession)">
            <summary>
            Formats the specified buffer.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="session">The session.</param>
            <returns>The formatted input.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.Format``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Text.StringBuilder)">
            <summary>
            Formats the specified buffer.
            </summary>
            <typeparam name="TInput">The reader input type.</typeparam>
            <param name="reader">The reader.</param>
            <param name="result">The destination string builder.</param>
        </member>
        <member name="M:Orleans.Serialization.Utilities.BitStreamFormatter.FormatTagDelimitedField``1(Orleans.Serialization.Buffers.Reader{``0}@,System.Text.StringBuilder,System.Int32)">
            <summary>
            Consumes a tag-delimited field.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.Utilities.ValueTypeGetter`2">
            <summary>
            The delegate used to set fields in value types.
            </summary>
            <typeparam name="TDeclaring">The declaring type of the field.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="instance">The instance having its field set.</param>
        </member>
        <member name="T:Orleans.Serialization.Utilities.ValueTypeSetter`2">
            <summary>
            The delegate used to set fields in value types.
            </summary>
            <typeparam name="TDeclaring">The declaring type of the field.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="instance">The instance having its field set.</param>
            <param name="value">The value being set.</param>
        </member>
        <member name="T:Orleans.Serialization.Utilities.FieldAccessor">
            <summary>
            Functionality for accessing fields.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Utilities.FieldAccessor.GetGetter(System.Type,System.String)">
            <summary>
            Returns a delegate to get the value of a specified field.
            </summary>
            <returns>A delegate to get the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.FieldAccessor.GetValueGetter(System.Type,System.String)">
            <summary>
            Returns a delegate to get the value of a specified field.
            </summary>
            <returns>A delegate to get the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.FieldAccessor.GetReferenceSetter(System.Type,System.String)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.Utilities.FieldAccessor.GetValueSetter(System.Type,System.String)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="T:Orleans.Serialization.Utilities.Internal.InternalServiceCollectionExtensions">
            <summary>
            Extension methods for configuring dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.Utilities.Internal.InternalServiceCollectionExtensions.AddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an existing registration of <typeparamref name="TImplementation"/> as a provider of service type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="M:Orleans.Serialization.Utilities.Internal.InternalServiceCollectionExtensions.AddFromExisting(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Registers an existing registration of <paramref name="implementation"/> as a provider of service type <paramref name="service"/>.
            </summary>
            <param name="services">The service collection.</param>
            <param name="service">The service type being provided.</param>
            <param name="implementation">The implementation of <paramref name="service"/>.</param>
        </member>
        <member name="T:Orleans.Serialization.WireProtocol.ExtendedWireType">
            <summary>
            Represents an extended wire type
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndTagDelimited">
            <summary>
            Marks the end of a tag-delimited field.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndBaseFields">
            <summary>
            Marks the end of base-type fields in a tag-delimited object.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.WireProtocol.Field">
            <summary>
            Represents a field header.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Field.Tag">
            <summary>
            The tag byte.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Field.FieldIdDeltaRaw">
            <summary>
            The raw field identifier delta.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Field.FieldTypeRaw">
            <summary>
            The raw field type.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Field.#ctor(Orleans.Serialization.WireProtocol.Tag)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.WireProtocol.Field"/> struct.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Field.#ctor(Orleans.Serialization.WireProtocol.Tag,System.UInt32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.WireProtocol.Field"/> struct.
            </summary>
            <param name="tag">The tag.</param>
            <param name="extendedFieldIdDelta">The extended field identifier delta.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.FieldIdDelta">
            <summary>
            Gets or sets the field identifier delta.
            </summary>
            <value>The field identifier delta.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.HasFieldId">
            <summary>
            Gets a value indicating whether this instance has a field identifier.
            </summary>
            <value><see langword="true" /> if this instance has a field identifier; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.HasExtendedFieldId">
            <summary>
            Gets a value indicating whether this instance has an extended field identifier.
            </summary>
            <value><see langword="true" /> if this instance has an extended field identifier; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.WireType">
            <summary>
            Gets or sets the wire type.
            </summary>
            <value>The wire type.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.SchemaType">
            <summary>
            Gets or sets the schema type.
            </summary>
            <value>The schema type.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.ExtendedWireType">
            <summary>
            Gets or sets the extended wire type.
            </summary>
            <value>The extended wire type.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.IsSchemaTypeValid">
            <summary>
            Gets a value indicating whether this instance has a valid schema type.
            </summary>
            <value><see langword="true" /> if this instance has a valid schema; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.HasExtendedSchemaType">
            <summary>
            Gets a value indicating whether this instance has an extended schema type.
            </summary>
            <value><see langword="true" /> if this instance has an extended schema type; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.IsEndBaseFields">
            <summary>
            Gets a value indicating whether this instance represents the end of base fields in a tag-delimited structure.
            </summary>
            <value><see langword="true" /> if this instance represents end of base fields in a tag-delimited structure; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.IsEndObject">
            <summary>
            Gets a value indicating whether this instance represents the end of a tag-delimited structure.
            </summary>
            <value><see langword="true" /> if this instance represents end of a tag-delimited structure; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.IsEndBaseOrEndObject">
            <summary>
            Gets a value indicating whether this instance represents the end of a tag-delimited structure or the end of base fields in a tag-delimited structure.
            </summary>
            <value><see langword="true" /> if this instance represents the end of a tag-delimited structure or the end of base fields in a tag-delimited structure; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Field.IsReference">
            <summary>
            Gets a value indicating whether this instance has a wire type of <see cref="F:Orleans.Serialization.WireProtocol.WireType.Reference"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Field.EnsureWireTypeTagDelimited">
            <summary>
            Ensures that the wire type is <see cref="F:Orleans.Serialization.WireProtocol.WireType.TagDelimited"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Field.EnsureWireType(Orleans.Serialization.WireProtocol.WireType)">
            <summary>
            Ensures that the wire type is supported.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Field.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.WireProtocol.SchemaType">
            <summary>
            Identifies the runtime type (schema type) of a field.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.SchemaType.Expected">
            <summary>
            Indicates that the runtime type is the exact type expected by the current schema.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.SchemaType.WellKnown">
            <summary>
            Indicates that the runtime type is an instance of a well-known type. Followed by a VarInt type id.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.SchemaType.Encoded">
            <summary>
            Indicates that the runtime type is encoded as a named type. Followed by an encoded type name.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.SchemaType.Referenced">
            <summary>
            Indicates that the runtime type is a type which was previously specified. Followed by a VarInt indicating which previous type is being reused.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.WireProtocol.Tag">
            <summary>
            A serialization tag, which is always exactly a single byte. This acts as a part of the field header for all serialized fields.
            </summary>
            <remarks>
            The typical form for a tag byte is <c>[W W W] [S S] [F F F]</c>, where each is a bit.
            W is a <see cref="P:Orleans.Serialization.WireProtocol.Tag.WireType"/>, S is a <see cref="P:Orleans.Serialization.WireProtocol.Tag.SchemaType"/> bit, and F is a field identifier bit.
            </remarks>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.WireTypeMask">
            <summary>
            The wire type mask.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.SchemaTypeMask">
            <summary>
            The schema type mask.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.FieldIdMask">
            <summary>
            The field identifier mask.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.FieldIdCompleteMask">
            <summary>
            The field identifier complete mask.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.ExtendedWireTypeMask">
            <summary>
            The extended wire type mask.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.Tag.MaxEmbeddedFieldIdDelta">
            <summary>
            The maximum embedded field identifier delta.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Tag.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.WireProtocol.Tag"/> struct.
            </summary>
            <param name="tag">The tag byte.</param>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Tag.op_Implicit(System.Byte)~Orleans.Serialization.WireProtocol.Tag">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Orleans.Serialization.WireProtocol.Tag"/>.
            </summary>
            <param name="tag">The tag.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Tag.op_Implicit(Orleans.Serialization.WireProtocol.Tag)~System.Byte">
            <summary>
            Performs an implicit conversion from <see cref="T:Orleans.Serialization.WireProtocol.Tag"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="tag">The tag.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.WireType">
            <summary>
            Gets or sets the wire type of the data following this tag.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.HasExtendedWireType">
            <summary>
            Gets a value indicating whether this instance has an extended wire type.
            </summary>
            <value><see langword="true" /> if this instance has an extended wire type; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.ExtendedWireType">
            <summary>
            Gets or sets the extended wire type of the data following this tag.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.SchemaType">
            <summary>
            Gets or sets the schema type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.IsSchemaTypeValid">
            <summary>
            Gets a value indicating whether the <see cref="P:Orleans.Serialization.WireProtocol.Tag.SchemaType" /> property is valid.
            </summary>
            <value><see langword="true"/> if the <see cref="P:Orleans.Serialization.WireProtocol.Tag.SchemaType"/> is valid, <see langword="false"/> otherwise.</value>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.FieldIdDelta">
            <summary>
            Returns the <see cref="P:Orleans.Serialization.WireProtocol.Tag.FieldIdDelta"/> of the field represented by this tag.
            </summary>
            <remarks>
            If <see cref="P:Orleans.Serialization.WireProtocol.Tag.IsFieldIdValid"/> is <see langword="false"/>, this value is not a complete field id delta.
            </remarks>
        </member>
        <member name="M:Orleans.Serialization.WireProtocol.Tag.SetFieldIdInvalid">
            <summary>
            Invalidates <see cref="P:Orleans.Serialization.WireProtocol.Tag.FieldIdDelta"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.IsFieldIdValid">
            <summary>
            Gets a value indicating whether the <see cref="P:Orleans.Serialization.WireProtocol.Tag.FieldIdDelta"/> property is valid.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="P:Orleans.Serialization.WireProtocol.Tag.FieldIdDelta"/> represents a complete id, <see langword="false"/> if more data is required.
            </value>
            <remarks>
            If all bits are set in the field id portion of the tag, this field id is not valid and this tag must be followed by a field id.
            Therefore, field ids 0-6 can be represented without additional bytes.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.WireProtocol.Tag.HasExtendedFieldId">
            <summary>
            Gets a value indicating whether the tag is followed by an extended field id.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.WireProtocol.WireType">
            <summary>
            Represents a 3-bit wire type, shifted into position 
            </summary>
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.VarInt">
            <summary>
            A variable-length integer vlaue.
            </summary>
            <remarks>        
            Followed by a variable-length integer. 
            </remarks>        
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.TagDelimited">
            <summary>
            A compound value comprised of a collection of tag-delimited fields.
            </summary>
            <remarks>        
            Followed by field specifiers, then an <see cref="F:Orleans.Serialization.WireProtocol.WireType.Extended"/> tag with <see cref="F:Orleans.Serialization.WireProtocol.ExtendedWireType.EndTagDelimited"/> as the extended wire type. 
            </remarks>        
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.LengthPrefixed">
            <summary>
            A length-prefixed value.
            </summary>
            <remarks>        
            Followed by VarInt length representing the number of bytes which follow. 
            </remarks>        
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.Fixed32">
            <summary>
            A 32-bit value.
            </summary>
            <remarks>        
            Followed by 4 bytes.
            </remarks>        
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.Fixed64">
            <summary>
            A 64-bit value.
            </summary>
            <remarks>        
            Followed by 8 bytes.
            </remarks>        
        </member>
        <member name="F:Orleans.Serialization.WireProtocol.WireType.Reference">
            <summary>
            A reference to a previously encoded value.
            </summary>
            <remarks>        
            Followed by 8 bytes.
            </remarks>        
        </member>
    </members>
</doc>
