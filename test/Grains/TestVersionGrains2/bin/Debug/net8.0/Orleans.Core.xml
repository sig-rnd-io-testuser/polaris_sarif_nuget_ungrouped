<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Core</name>
    </assembly>
    <members>
        <member name="T:Orleans.Internal.AsyncExecutorWithRetries">
            <summary>
            This class is a convenient utility class to execute a certain asynchronous function with retries,
            allowing to specify custom retry filters and policies.
            </summary>
        </member>
        <member name="F:Orleans.Internal.AsyncExecutorWithRetries.INFINITE_RETRIES">
            <summary>
            Constant used to request an infinite number of retries.
            </summary>
        </member>
        <member name="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
            <param name="action">
            The action to be executed.
            </param>
            <param name="maxNumErrorTries">
            The maximum number of retries.
            </param>
            <param name="retryExceptionFilter">
            The retry exception filter.
            </param>
            <param name="maxExecutionTime">
            The maximum execution time.
            </param>
            <param name="onErrorBackOff">
            The backoff provider.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.
            </returns>
        </member>
        <member name="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
            <param name="function">
            The delegate to be executed.
            </param>
            <param name="maxNumErrorTries">
            The maximum number of retries.
            </param>
            <param name="retryExceptionFilter">
            The retry exception filter.
            </param>
            <param name="maxExecutionTime">
            The maximum execution time.
            </param>
            <param name="onErrorBackOff">
            The backoff provider.
            </param>
            <returns>
            The value returned from the successful invocation of the provided function.
            </returns>
        </member>
        <member name="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.Func{``0,System.Int32,System.Boolean},System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider,Orleans.Internal.IBackoffProvider)">
            <summary>
            Execute a given <paramref name="function"/> a number of times, based on retry configuration parameters.
            </summary>
            <typeparam name="T">
            The underlying return type of <paramref name="function"/>.
            </typeparam>
            <param name="function">
            Function to execute
            </param>
            <param name="maxNumSuccessTries">
            Maximal number of successful execution attempts. <see cref="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)"/> will try to re-execute the given <paramref name="function"/> again if directed so by <paramref name="retryValueFilter"/> .
            Set to <c>-1</c> for unlimited number of success retries, until <paramref name="retryValueFilter"/> is satisfied. Set to <c>0</c> for only one success attempt, which will cause <paramref name="retryValueFilter"/> to be
            ignored and the given <paramref name="function"/> executed only once until first success.
            </param>
            <param name="maxNumErrorTries">
            Maximal number of execution attempts due to errors. Set to -1 for unlimited number of error retries, until <paramref name="retryExceptionFilter"/> is satisfied.
            </param>
            <param name="retryValueFilter">
            Filter <paramref name="function"/> to indicate if successful execution should be retried. Set to <see langword="null"/> to disable successful retries.
            </param>
            <param name="retryExceptionFilter">
            Filter <paramref name="function"/> to indicate if error execution should be retried. Set to <see langword="null"/> to disable error retries.
            </param>
            <param name="maxExecutionTime">
            The maximal execution time of the <see cref="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)"/> function.
            </param>
            <param name="onSuccessBackOff">
            The backoff provider object, which determines how much to wait between success retries.
            </param>
            <param name="onErrorBackOff">
            The backoff provider object, which determines how much to wait between error retries
            </param>
            <returns>
            The value returned from the successful invocation of <paramref name="function"/>.
            </returns>
        </member>
        <member name="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetriesHelper``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.TimeSpan,System.DateTime,System.Func{``0,System.Int32,System.Boolean},System.Func{System.Exception,System.Int32,System.Boolean},Orleans.Internal.IBackoffProvider,Orleans.Internal.IBackoffProvider)">
            <summary>
            Execute a given <paramref name="function"/> a number of times, based on retry configuration parameters.
            </summary>
            <typeparam name="T">
            The underlying return type of <paramref name="function"/>.
            </typeparam>
            <param name="function">
            Function to execute.
            </param>
            <param name="maxNumSuccessTries">
            Maximal number of successful execution attempts. <see cref="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)"/> will try to re-execute the given <paramref name="function"/> again if directed so by <paramref name="retryValueFilter"/> .
            Set to <c>-1</c> for unlimited number of success retries, until <paramref name="retryValueFilter"/> is satisfied. Set to <c>0</c> for only one success attempt, which will cause <paramref name="retryValueFilter"/> to be
            ignored and the given <paramref name="function"/> executed only once until first success.
            </param>
            <param name="maxNumErrorTries">
            Maximal number of execution attempts due to errors. Set to -1 for unlimited number of error retries, until <paramref name="retryExceptionFilter"/> is satisfied.
            </param>
            <param name="maxExecutionTime">
            The maximal execution time of the <see cref="M:Orleans.Internal.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.Internal.IBackoffProvider)"/> function.
            </param>
            <param name="startExecutionTime">
            The time at which execution was started.
            </param>
            <param name="retryValueFilter">
            Filter <paramref name="function"/> to indicate if successful execution should be retried. Set to <see langword="null"/> to disable successful retries.
            </param>
            <param name="retryExceptionFilter">
            Filter <paramref name="function"/> to indicate if error execution should be retried. Set to <see langword="null"/> to disable error retries.
            </param>
            <param name="onSuccessBackOff">
            The backoff provider object, which determines how much to wait between success retries.
            </param>
            <param name="onErrorBackOff">
            The backoff provider object, which determines how much to wait between error retries
            </param>
            <returns>
            The value returned from the successful invocation of <paramref name="function"/>.
            </returns>
        </member>
        <member name="T:Orleans.Internal.IBackoffProvider">
            <summary>
            Functionality for determining how long to wait between successive operation attempts.
            </summary>
        </member>
        <member name="M:Orleans.Internal.IBackoffProvider.Next(System.Int32)">
            <summary>
            Returns the amount of time to wait before attempting a subsequent operation.
            </summary>
            <param name="attempt">The number of operation attempts which have been made.</param>
            <returns>The amount of time to wait before attempting a subsequent operation.</returns>
        </member>
        <member name="T:Orleans.Internal.FixedBackoff">
            <summary>
            A fixed-duration backoff implementation, which always returns the configured delay.
            </summary>
        </member>
        <member name="M:Orleans.Internal.FixedBackoff.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Internal.FixedBackoff"/> class.
            </summary>
            <param name="delay">
            The fixed delay between attempts.
            </param>
        </member>
        <member name="M:Orleans.Internal.FixedBackoff.Next(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Internal.ExponentialBackoff">
            <summary>
            An exponential backoff implementation, which initially returns the minimum delay it is configured
            with and exponentially increases its delay by two raised to the power of the attempt number until
            the maximum backoff delay is reached.
            </summary>
        </member>
        <member name="M:Orleans.Internal.ExponentialBackoff.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Internal.ExponentialBackoff"/> class.
            </summary>
            <param name="minDelay">
            The minimum delay.
            </param>
            <param name="maxDelay">
            The maximum delay.
            </param>
            <param name="step">
            The step, which is multiplied by two raised to the power of the attempt number and added to the minimum delay to compute the delay for each iteration.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One or more argument values are outside out of their valid range.
            </exception>
        </member>
        <member name="M:Orleans.Internal.ExponentialBackoff.Next(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Internal.OrleansTaskExtentions">
            <summary>
            Extensions for working with <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Internal.OrleansTaskExtentions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan,System.String)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeout">Amount of time to wait before timing out</param>
            <param name="exceptionMessage">Text to put into the timeout exception message</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The completed task</returns>
        </member>
        <member name="M:Orleans.Internal.OrleansTaskExtentions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeSpan">Amount of time to wait before timing out</param>
            <param name="exceptionMessage">Text to put into the timeout exception message</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The value of the completed task</returns>
        </member>
        <member name="M:Orleans.Internal.OrleansTaskExtentions.WithCancellation(System.Threading.Tasks.Task,System.String,System.Threading.CancellationToken)">
            <summary>
            For making an uncancellable task cancellable, by ignoring its result.
            </summary>
            <param name="taskToComplete">The task to wait for unless cancelled</param>
            <param name="message">Message to set in the exception</param>
            <param name="cancellationToken">A cancellation token for cancelling the wait</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Internal.OrleansTaskExtentions.WithCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            For making an uncancellable task cancellable, by ignoring its result.
            </summary>
            <param name="taskToComplete">The task to wait for unless cancelled</param>
            <param name="cancellationToken">A cancellation token for cancelling the wait</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Internal.RandomTimeSpan">
            <summary>
            Random TimeSpan generator
            </summary>
        </member>
        <member name="T:Orleans.Internal.StandardExtensions">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="T:Orleans.AsyncLock">
             <summary>
             An async mutual exclusion mechanism that supports scoping via ‘using’.
             </summary>
             <remarks>
             (Adapted from http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx)
            
             When programming with <b>async</b>, the <b>lock</b> keyword is problematic:
             <list type="bullet">
                 <item><b>lock</b> will cause the thread to block while it waits for exclusive access to the critical section of code.</item>
                 <item>The <b>await</b> keyword cannot be used within the scope of a <b>lock</b> construct.</item>
             </list>
            
             It is still useful, at times, to provide exclusive access to a critical section of code. AsyncLock provides semantics
             that correspond to that of a (non-recursive) mutex, while maintaining compatibility with the tenets of async programming.
             </remarks>
             <example>
             The following example implements some work that needs to be done under lock:
             <code>
             class Test
             {
                 private AsyncLock _initLock = new AsyncLock();
                 public async Task&lt;int> WorkUnderLock()
                 {
                         using (await _initLock.LockAsync()) // analogous to lock(_initLock)
                         {
                              return await DoSomeWork();
                         }
                 }
             }
             </code>
             </example>
            
             We decided to keep the implementation simple and mimic the semantics of a regular mutex as much as possible.
             1) AsyncLock is NOT IDisposable, since we don't want to give the developer an option to erroneously manually dispose the lock
             while there may be some unreleased LockReleasers.
             2) AsyncLock does NOT have to implement the Finalizer function. The underlying resource of SemaphoreSlim will be eventually released by the .NET,
             when SemaphoreSlim is finalized. Having finalizer for AsyncLock will not speed it up.
             3) LockReleaser is IDisposable to implement the "using" pattern.
             4) LockReleaser does NOT have to implement the Finalizer function. If users forget to Dispose the LockReleaser (analogous to forgetting to release a mutex)
             the AsyncLock will remain locked, which may potentially cause deadlock. This is OK, since these are the exact regular mutex semantics - if one forgets to unlock the mutex, it stays locked.
        </member>
        <member name="M:Orleans.AsyncLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.AsyncLock"/> class.
            </summary>
        </member>
        <member name="M:Orleans.AsyncLock.LockAsync">
            <summary>
            Acquires the lock asynchronously.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> which must be used to release the lock.</returns>
        </member>
        <member name="T:Orleans.AsyncSerialExecutor`1">
            <summary>
            A utility class that provides serial execution of async functions.
            In can be used inside reentrant grain code to execute some methods in a non-reentrant (serial) way.
            </summary>
            <typeparam name="TResult">
            The underlying type returned from functions invoked by this executor.
            </typeparam>
        </member>
        <member name="T:Orleans.AsyncSerialExecutor`1.InterlockedExchangeLock">
            <summary>
            A lock which relies on <see cref="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)"/>
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor`1.InterlockedExchangeLock.TryGetLock">
            <summary>
            Attempts to acquire the lock, returning <see langword="true"/> if the lock was acquired and <see langword="false"/> otherwise.
            </summary>
            <returns>
            <see langword="true"/> if the lock was acquired and <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor`1.InterlockedExchangeLock.ReleaseLock">
            <summary>
            Releases the lock unconditionally.
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor`1.AddNext(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Submit the next function for execution. It will execute after all previously submitted functions have finished, without interleaving their executions.
            Returns a promise that represents the execution of this given function. 
            The returned promise will be resolved when the given function is done executing.
            </summary>
            <param name="func">The function to schedule for invocation.</param>
            <returns>The result of the scheduled function invocation.</returns>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor`1.ExecuteNext">
            <summary>
            Executes the next scheduled function.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Orleans.AsyncSerialExecutor">
            <summary>
            A utility class that provides serial execution of async functions.
            In can be used inside reentrant grain code to execute some methods in a non-reentrant (serial) way.
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor.AddNext(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Submits the next function for execution. It will execute after all previously submitted functions have finished, without interleaving their executions.
            Returns a promise that represents the execution of this given function. 
            The returned promise will be resolved when the given function is done executing.
            </summary>
            <param name="func">The function to schedule for invocation.</param>
            <returns>The result of the scheduled function invocation.</returns>
        </member>
        <member name="T:Orleans.BatchWorker">
            <summary>
            General pattern for an asynchronous worker that performs a work task, when notified,
            to service queued work. Each work cycle handles ALL the queued work. 
            If new work arrives during a work cycle, another cycle is scheduled. 
            The worker never executes more than one instance of the work cycle at a time, 
            and consumes no resources when idle. It uses TaskScheduler.Current 
            to schedule the work cycles.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.Work">
            <summary>Implement this member in derived classes to define what constitutes a work cycle</summary>
            <returns>>
            A <see cref="T:System.Threading.Tasks.Task"/>
            </returns>
        </member>
        <member name="P:Orleans.BatchWorker.CancellationToken">
            <summary>
            Gets or sets the cancellation used to cancel this batch worker.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.Notify">
            <summary>
            Notify the worker that there is more work.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.Notify(System.DateTime)">
            <summary>
            Instructs the batch worker to run again to check for work, if
            it has not run again already by then, at specified <paramref name="utcTime"/>.
            </summary>
            <param name="utcTime"></param>
        </member>
        <member name="M:Orleans.BatchWorker.CheckForMoreWork">
            <summary>
            Executes at the end of each work cycle on the same task scheduler.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.IsIdle">
            <summary>
            Check if this worker is idle.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.WaitForCurrentWorkToBeServiced">
            <summary>
            Wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.NotifyAndWaitForWorkToBeServiced">
            <summary>
            Notify the worker that there is more work, and wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
        </member>
        <member name="T:Orleans.BatchWorkerFromDelegate">
            <summary>
            A <see cref="T:Orleans.BatchWorker"/> implementation which executes a provided delegate as its <see cref="M:Orleans.BatchWorker.Work"/> implementation.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorkerFromDelegate.#ctor(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:Orleans.BatchWorkerFromDelegate"/> instance.
            </summary>
            <param name="work">The delegate to invoke when <see cref="M:Orleans.BatchWorker.Work"/> is invoked.</param>
            <param name="cancellationToken">The cancellation token used to stop the worker.</param>
        </member>
        <member name="M:Orleans.BatchWorkerFromDelegate.Work">
            <inheritdoc />
        </member>
        <member name="T:Orleans.MultiTaskCompletionSource">
            <summary>
            An alternative to <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> which completes only once a specified number of signals have been received.
            </summary>
        </member>
        <member name="M:Orleans.MultiTaskCompletionSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.MultiTaskCompletionSource"/> class.
            </summary>
            <param name="count">
            The number of signals which must occur before this completion source completes.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The count value is less than or equal to zero.
            </exception>
        </member>
        <member name="P:Orleans.MultiTaskCompletionSource.Task">
            <summary>
            Gets the task which is completed when a sufficient number of signals are received.
            </summary>
        </member>
        <member name="M:Orleans.MultiTaskCompletionSource.SetOneResult">
            <summary>
            Signals this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">This method was called more times than the initially specified count argument allows.</exception>
        </member>
        <member name="T:Orleans.ClientObservers.IClientGatewayObserver">
            <summary>
            Handles gateway notifications which are sent to connected clients.
            </summary>
        </member>
        <member name="M:Orleans.ClientObservers.IClientGatewayObserver.StopSendingToGateway(Orleans.Runtime.SiloAddress)">
            <summary>
            Signals a client that it should stop sending messages to the specified gateway.
            </summary>
            <param name="gateway">The gateway</param>
        </member>
        <member name="T:Orleans.ClientObservers.ClientGatewayObserver">
            <summary>
            Handles gateway notification events.
            </summary>
        </member>
        <member name="M:Orleans.ClientObservers.ClientGatewayObserver.#ctor(Orleans.Messaging.GatewayManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClientObservers.ClientGatewayObserver"/> class.
            </summary>
            <param name="gatewayManager">
            The gateway manager.
            </param>
        </member>
        <member name="M:Orleans.ClientObservers.ClientGatewayObserver.StopSendingToGateway(Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ClientObservers.ClientObserver">
            <summary>
            Base type for special client-wide observers.
            </summary>
        </member>
        <member name="M:Orleans.ClientObservers.ClientObserver.GetObserverGrainId(Orleans.Runtime.ClientGrainId)">
            <summary>
            Gets the observer id.
            </summary>
            <param name="clientId">The client id.</param>
            <returns>The observer id.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainInterfaceUtils">
            <summary>
            Utilities for grain interface types.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.GetMethods(System.Type,System.Boolean)">
            <summary>
            Gets all grain interface methods for a specified type, which may be a class.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="bAllMethods">Whether to get all methods or only declared methods.</param>
            <returns>All grain interface methods for a specified type.</returns>
        </member>
        <member name="T:Orleans.IGrainState`1">
            <summary>
            Defines the state of a grain
            </summary>
            <typeparam name="T">
            The underlying state type.
            </typeparam>
        </member>
        <member name="P:Orleans.IGrainState`1.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:Orleans.IGrainState`1.ETag">
            <summary>Gets or sets the ETag that allows optimistic concurrency checks at the storage provider level.</summary>
        </member>
        <member name="P:Orleans.IGrainState`1.RecordExists">
            <summary>
            Gets or sets a value indicating whether the record exists in storage.
            </summary>
        </member>
        <member name="T:Orleans.GrainState`1">
            <summary>
            Default implementation of <see cref="T:Orleans.IGrainState`1"/>.
            </summary>
            <typeparam name="T">The type of application level payload.</typeparam>
        </member>
        <member name="P:Orleans.GrainState`1.State">
            <inheritdoc />
        </member>
        <member name="P:Orleans.GrainState`1.ETag">
            <inheritdoc />
        </member>
        <member name="P:Orleans.GrainState`1.RecordExists">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainState`1"/> class. 
            </summary>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainState`1"/> class. 
            </summary>
            <param name="state">
            The initial value of the state.
            </param>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainState`1"/> class.
            </summary>
            <param name="state">
            The initial value of the state.
            </param>
            <param name="eTag">
            The initial e-tag value that allows optimistic concurrency checks at the storage provider level.
            </param>
        </member>
        <member name="T:Orleans.CollectionAgeLimitAttribute">
            <summary>
            Specifies the period of inactivity before a grain is available for collection and deactivation.
            </summary>
        </member>
        <member name="M:Orleans.CollectionAgeLimitAttribute.#ctor">
            <summary>
            Specifies the period of inactivity before a grain is available for collection and deactivation.
            </summary>
            <remarks>
            Use the <see cref="P:Orleans.CollectionAgeLimitAttribute.Minutes"/>, <see cref="P:Orleans.CollectionAgeLimitAttribute.Days"/>, and <see cref="P:Orleans.CollectionAgeLimitAttribute.Hours"/> properties or the <see cref="P:Orleans.CollectionAgeLimitAttribute.AlwaysActive"/> to set the limit.
            </remarks>
        </member>
        <member name="M:Orleans.CollectionAgeLimitAttribute.#ctor(System.String)">
            <summary>
            Specifies the period of inactivity before a grain is available for collection and deactivation.
            </summary>
            <param name="inactivityPeriod">The period of inactivity before a grain is available for collection and deactivation, expressed as a string using <see cref="M:System.TimeSpan.Parse(System.String)"/> syntax.</param>
        </member>
        <member name="F:Orleans.CollectionAgeLimitAttribute.MinAgeLimit">
            <summary>
            Gets the minimum activation age.
            </summary>
        </member>
        <member name="P:Orleans.CollectionAgeLimitAttribute.Days">
            <summary>
            Gets or sets the number of days to delay collecting an idle activation for.
            </summary>
        </member>
        <member name="P:Orleans.CollectionAgeLimitAttribute.Hours">
            <summary>
            Gets or sets the number of hours to delay collecting an idle activation for.
            </summary>
        </member>
        <member name="P:Orleans.CollectionAgeLimitAttribute.Minutes">
            <summary>
            Gets or sets the number of minutes to delay collecting an idle activation for.
            </summary>
        </member>
        <member name="P:Orleans.CollectionAgeLimitAttribute.AlwaysActive">
            <summary>
            Gets or sets a value indicating whether this grain should never be collected by the idle activation collector.
            </summary>
        </member>
        <member name="P:Orleans.CollectionAgeLimitAttribute.AgeLimit">
            <summary>
            Gets the idle activation collection age.
            </summary>
        </member>
        <member name="M:Orleans.CollectionAgeLimitAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.KeepAliveAttribute">
            <summary>
            When applied to a grain implementation type this attribute specifies that activations of the grain shouldn't be collected by the idle activation collector.
            </summary>
        </member>
        <member name="M:Orleans.KeepAliveAttribute.Populate(System.IServiceProvider,System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigUtilities">
            <summary>
            Utilities class for working with configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.GetLocalIPAddress(System.Net.Sockets.AddressFamily,System.String)">
            <summary>
            Gets the address of the local server.
            If there are multiple addresses in the correct family in the server's DNS record, the first will be returned.
            </summary>
            <returns>The server's IPv4 address.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RedactConnectionStringInfo(System.String)">
            <summary>
            Prints the DataConnectionString,
            without disclosing any credential info
            such as the Azure Storage AccountKey, SqlServer password or AWS SecretKey.
            </summary>
            <param name="connectionString">The connection string to print.</param>
            <returns>The string representation of the DataConnectionString with account credential info redacted.</returns>
        </member>
        <member name="T:Orleans.Runtime.InvalidSchedulingContextException">
            <summary>
            Signifies that an operation was attempted on an invalid SchedulingContext.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.InvalidSchedulingContextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.InvalidSchedulingContextException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Orleans.Runtime.InvalidSchedulingContextException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.InvalidSchedulingContextException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Orleans.Runtime.InvalidSchedulingContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.InvalidSchedulingContextException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Orleans.Runtime.ActivityPropagationGrainCallFilter">
            <summary>
            A grain call filter which helps to propagate activity correlation information across a call chain.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ActivityPropagationOutgoingGrainCallFilter">
            <summary>
            Propagates distributed context information to outgoing requests.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivityPropagationOutgoingGrainCallFilter.#ctor(System.Diagnostics.DistributedContextPropagator)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ActivityPropagationOutgoingGrainCallFilter"/> class.
            </summary>
            <param name="propagator">The context propagator.</param>
        </member>
        <member name="M:Orleans.Runtime.ActivityPropagationOutgoingGrainCallFilter.Invoke(Orleans.IOutgoingGrainCallContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ActivityPropagationIncomingGrainCallFilter">
            <summary>
            Populates distributed context information from incoming requests.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivityPropagationIncomingGrainCallFilter.#ctor(System.Diagnostics.DistributedContextPropagator)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.ActivityPropagationIncomingGrainCallFilter"/> class.
            </summary>
            <param name="propagator">The context propagator.</param>
        </member>
        <member name="M:Orleans.Runtime.ActivityPropagationIncomingGrainCallFilter.Invoke(Orleans.IIncomingGrainCallContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.OrleansCallBackDataEvent">
            <summary>
            Event source for <see cref="T:Orleans.Runtime.CallbackData"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.OnTimeout(Orleans.Runtime.Message)">
            <summary>
            Indicates that a request timeout occurred.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.OnTimeout">
            <summary>
            Indicates that a request timeout occurred.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.OnTargetSiloFail(Orleans.Runtime.Message)">
            <summary>
            Indicates that a target silo failed.
            </summary>
            <param name="message">A message addressed to the target silo.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.OnTargetSiloFail">
            <summary>
            Indicates that a target silo failed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.DoCallback(Orleans.Runtime.Message)">
            <summary>
            Indicates that a request completed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansCallBackDataEvent.DoCallback">
            <summary>
            Indicates that a request completed.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GenericGrainInterfaceType">
            <summary>
            Represents a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> that is parameterized using type parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.#ctor(Orleans.Runtime.GrainInterfaceType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GenericGrainInterfaceType"/> struct.
            </summary>
            <param name="value">The underlying grain interface type.</param>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainInterfaceType.Value">
            <summary>
            The underlying <see cref="T:Orleans.Runtime.GrainInterfaceType"/>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainInterfaceType.Arity">
            <summary>
            The arity of the generic type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainInterfaceType.IsConstructed">
            <summary>
            Returns <see langword="true" /> if this instance contains concrete type parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.TryParse(Orleans.Runtime.GrainInterfaceType,Orleans.Runtime.GenericGrainInterfaceType@)">
            <summary>
            Returns the generic interface id corresponding to the provided value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.GetGenericGrainType">
            <summary>
            Returns a non-constructed version of this instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.Construct(Orleans.Serialization.TypeSystem.TypeConverter,System.Type[])">
            <summary>
            Returns a constructed version of this instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.GetArguments(Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Returns the type arguments which this instance was constructed with.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainInterfaceType.ToString">
            <summary>
            Returns a UTF8 interpretation of the current instance.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GenericGrainType">
            <summary>
            Represents a <see cref="P:Orleans.Runtime.GenericGrainType.GrainType"/> that is parameterized using type parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.#ctor(Orleans.Runtime.GrainType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.GenericGrainType"/> struct.
            </summary>
            <param name="grainType">The underlying grain type.</param>
            <param name="arity">The generic arity of the grain type.</param>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainType.GrainType">
            <summary>
            The underlying grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainType.Arity">
            <summary>
            The generic arity of the grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GenericGrainType.IsConstructed">
            <summary>
            Returns <see langword="true" /> if this instance contains concrete type parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.TryParse(Orleans.Runtime.GrainType,Orleans.Runtime.GenericGrainType@)">
            <summary>
            Returns the generic grain type corresponding to the provided value.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.GetUnconstructedGrainType">
            <summary>
            Returns a non-constructed version of this instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.Construct(Orleans.Serialization.TypeSystem.TypeConverter,System.Type[])">
            <summary>
            Returns a constructed version of this instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.GetArguments(Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Gets the type arguments using the provided type converter.
            </summary>
            <param name="converter">The type converter</param>
            <returns>The type arguments.</returns>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.Equals(Orleans.Runtime.GenericGrainType)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GenericGrainType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Runtime.LifecycleParticipantExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.ILifecycleParticipant`1"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LifecycleParticipantExtensions.ParticipateIn``1(Orleans.ILifecycleParticipant{Orleans.ILifecycleObservable})">
            <summary>
            Conforms components written to participate with any <see cref="T:Orleans.ILifecycleObservable"/> to take part in specific lifecycles.
            </summary>
            <typeparam name="TLifecycle">The target lifecycle observer type.</typeparam>
            <param name="participant">The lifecycle participant.</param>
            <returns>An adapter wrapped around <paramref name="participant"/> which implements <see cref="T:Orleans.ILifecycleParticipant`1"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.LifecycleParticipantExtensions.Bridge`1">
            <summary>
            Adapts one lifecycle participant to a lifecycle participant of another observer type.
            </summary>
            <typeparam name="TLifecycle"></typeparam>
        </member>
        <member name="T:Orleans.Runtime.ClientClusterManifestProvider">
            <summary>
            <see cref="T:Orleans.Runtime.IClusterManifestProvider"/> implementation for external clients.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ClientClusterManifestProvider.Current">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.ClientClusterManifestProvider.Updates">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.ClientClusterManifestProvider.LocalGrainManifest">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ClientClusterManifestProvider.StartAsync">
            <summary>
            Starts this service.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes once the service has started.</returns>
        </member>
        <member name="M:Orleans.Runtime.ClientClusterManifestProvider.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.ClientClusterManifestProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ClientManifestProvider">
            <summary>
            Creates a manifest of the locally available grain interface types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ClientManifestProvider.ClientManifest">
            <summary>
            Gets the client manifest.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Versions.GrainVersionManifest">
            <summary>
            Functionality for querying the declared version of grain interfaces.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.#ctor(Orleans.Runtime.IClusterManifestProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Versions.GrainVersionManifest"/> class.
            </summary>
            <param name="clusterManifestProvider">The cluster manifest provider.</param>
        </member>
        <member name="P:Orleans.Runtime.Versions.GrainVersionManifest.LatestVersion">
            <summary>
            Gets the current cluster manifest version.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.GetLocalVersion(Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Gets the local version for a specified grain interface type.
            </summary>
            <param name="interfaceType">The grain interface type name.</param>
            <returns>The version of the specified grain interface.</returns>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.GetAvailableVersions(Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Gets a collection of all known versions for a grain interface.
            </summary>
            <param name="interfaceType">The grain interface type name.</param>
            <returns>All known versions for the specified grain interface.</returns>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.GetSupportedSilos(Orleans.Runtime.GrainInterfaceType,System.UInt16)">
            <summary>
            Gets the set of supported silos for a specified grain interface and version.
            </summary>
            <param name="interfaceType">The grain interface type name.</param>
            <param name="version">The grain interface version.</param>
            <returns>The set of silos which support the specified grain interface type and version.</returns>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.GetSupportedSilos(Orleans.Runtime.GrainType)">
            <summary>
            Gets the set of supported silos for the specified grain type.
            </summary>
            <param name="grainType">The grain type.</param>
            <returns>The silos which support the specified grain type.</returns>
        </member>
        <member name="M:Orleans.Runtime.Versions.GrainVersionManifest.GetSupportedSilos(Orleans.Runtime.GrainType,Orleans.Runtime.GrainInterfaceType,System.UInt16[])">
            <summary>
            Gets the set of supported silos for the specified combination of grain type, interface type, and version.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="interfaceType">The grain interface type name.</param>
            <param name="versions">The grain interface version.</param>
            <returns>The set of silos which support the specified grain.</returns>
        </member>
        <member name="T:Orleans.Runtime.IClusterManifestProvider">
            <summary>
            Provides access to the cluster manifest.
            </summary>
            <seealso cref="T:Orleans.Metadata.ClusterManifest"/>
        </member>
        <member name="P:Orleans.Runtime.IClusterManifestProvider.Current">
            <summary>
            Gets the current cluster manifest.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IClusterManifestProvider.Updates">
            <summary>
            Gets the stream of cluster manifest updates.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IClusterManifestProvider.LocalGrainManifest">
            <summary>
            Gets the local grain manifest.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IClusterManifestSystemTarget">
            <summary>
            Internal interface for exposing the cluster manifest.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IClusterManifestSystemTarget.GetClusterManifest">
            <summary>
            Gets the current cluster manifest.
            </summary>
            <returns>The current cluster manifest.</returns>
        </member>
        <member name="M:Orleans.Runtime.IClusterManifestSystemTarget.GetClusterManifestUpdate(Orleans.Metadata.MajorMinorVersion)">
            <summary>
            Gets an updated cluster manifest if newer than the provided <paramref name="previousVersion"/>.
            </summary>
            <returns>The current cluster manifest, or <see langword="null"/> if it is not newer than the provided version.</returns>
        </member>
        <member name="T:Orleans.Runtime.ClusterManifestUpdate">
            <summary>
            Represents an update to the cluster manifest.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ClusterManifestUpdate.Version">
            <summary>
            Gets the version of this instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ClusterManifestUpdate.SiloManifests">
            <summary>
            Gets the manifests for each silo in the cluster.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ClusterManifestUpdate.IncludesAllActiveServers">
            <summary>
            Gets a value indicating whether this update includes all active servers.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.CachingIdSpanCodec">
            <summary>
            A serializer for <see cref="T:Orleans.Runtime.IdSpan"/> which caches values and avoids re-encoding and unnecessary allocations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.CachingSiloAddressCodec">
            <summary>
            A serializer for <see cref="T:Orleans.Runtime.SiloAddress"/> which caches values and avoids re-encoding and unnecessary allocations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.InvalidMessageFrameException">
            <summary>
            Indicates that a message frame is invalid, either when sending a message or receiving a message.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.InvalidMessageFrameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.InvalidMessageFrameException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.InvalidMessageFrameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.InvalidMessageFrameException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.InvalidMessageFrameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.InvalidMessageFrameException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Orleans.Runtime.Messaging.PrefixingBufferWriter">
            <summary>
            An <see cref="T:System.Buffers.IBufferWriter`1"/> that reserves some fixed size for a header.
            </summary>
            <remarks>
            This type is used for inserting the length of list in the header when the length is not known beforehand.
            It is optimized to minimize or avoid copying.
            </remarks>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.expectedPrefixSize">
            <summary>
            The length of the header.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.payloadSizeHint">
            <summary>
            A hint from our owner at the size of the payload that follows the header.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.innerWriter">
            <summary>
            The underlying buffer writer.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.prefixMemory">
            <summary>
            The memory reserved for the header from the <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.innerWriter"/>.
            This memory is not reserved until the first call from this writer to acquire memory.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.realMemory">
            <summary>
            The memory acquired from <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.innerWriter"/>.
            This memory is not reserved until the first call from this writer to acquire memory.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.advanced">
            <summary>
            The number of elements written to a buffer belonging to <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.innerWriter"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.privateWriter">
            <summary>
            The fallback writer to use when the caller writes more than we allowed for given the <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.payloadSizeHint"/>
            in anything but the initial call to <see cref="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.GetSpan(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.#ctor(System.Int32,System.Int32,System.Buffers.MemoryPool{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.PrefixingBufferWriter"/> class.
            </summary>
            <param name="prefixSize">The length of the header to reserve space for. Must be a positive number.</param>
            <param name="payloadSizeHint">A hint at the expected max size of the payload. The real size may be more or less than this, but additional copying is avoided if it does not exceed this amount. If 0, a reasonable guess is made.</param>
            <param name="memoryPool"></param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Advance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.GetMemory(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.GetSpan(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Complete(System.ReadOnlySpan{System.Byte})">
            <summary>
            Inserts the prefix and commits the payload to the underlying <see cref="T:System.Buffers.IBufferWriter`1"/>.
            </summary>
            <param name="prefix">The prefix to write in. The length must match the one given in the constructor.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Init(System.IO.Pipelines.PipeWriter)">
            <summary>
            Sets this instance to a usable state.
            </summary>
            <param name="writer">The underlying writer that should ultimately receive the prefix and payload.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Reset">
            <summary>
            Resets this instance to a reusable state.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Initialize(System.Int32)">
            <summary>
            Makes the initial call to acquire memory from the underlying writer.
            </summary>
            <param name="sizeHint">The size requested by the caller to either <see cref="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.GetMemory(System.Int32)"/> or <see cref="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.GetSpan(System.Int32)"/>.</param>
        </member>
        <member name="T:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence">
            <summary>
            Manages a sequence of elements, readily castable as a <see cref="T:System.Buffers.ReadOnlySequence`1"/>.
            </summary>
            <remarks>
            Instance members are not thread-safe.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.#ctor(System.Buffers.MemoryPool{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence"/> class.
            </summary>
            <param name="memoryPool">The pool to use for recycling backing arrays.</param>
        </member>
        <member name="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.AsReadOnlySequence">
            <summary>
            Gets this sequence expressed as a <see cref="T:System.Buffers.ReadOnlySequence`1"/>.
            </summary>
            <returns>A read only sequence representing the data in this object.</returns>
        </member>
        <member name="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.DebuggerDisplay">
            <summary>
            Gets the value to display in a debugger datatip.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.Advance(System.Int32)">
            <summary>
            Advances the sequence to include the specified number of elements initialized into memory
            returned by a prior call to <see cref="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.GetMemory(System.Int32)"/>.
            </summary>
            <param name="count">The number of elements written into memory.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.GetMemory(System.Int32)">
            <summary>
            Gets writable memory that can be initialized and added to the sequence via a subsequent call to <see cref="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.Advance(System.Int32)"/>.
            </summary>
            <param name="sizeHint">The size of the memory required, or 0 to just get a convenient (non-empty) buffer.</param>
            <returns>The requested memory.</returns>
        </member>
        <member name="M:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.Dispose">
            <summary>
            Clears the entire sequence, recycles associated memory into pools,
            and resets this instance for reuse.
            This invalidates any <see cref="T:System.Buffers.ReadOnlySequence`1"/> previously produced by this instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start">
            <summary>
            Gets the index of the first element in <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/> to consider part of the sequence.
            </summary>
            <remarks>
            The <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start"/> represents the offset into <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/> where the range of "active" bytes begins. At the point when the block is leased
            the <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start"/> is guaranteed to be equal to 0. The value of <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start"/> may be assigned anywhere between 0 and
            <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/>.Length, and must be equal to or less than <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.End"/>.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.End">
            <summary>
            Gets or sets the index of the element just beyond the end in <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/> to consider part of the sequence.
            </summary>
            <remarks>
            The <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.End"/> represents the offset into <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/> where the range of "active" bytes ends. At the point when the block is leased
            the <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.End"/> is guaranteed to be equal to <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start"/>. The value of <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.Start"/> may be assigned anywhere between 0 and
            <see cref="F:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.AvailableMemory"/>.Length, and must be equal to or less than <see cref="P:Orleans.Runtime.Messaging.PrefixingBufferWriter.Sequence.SequenceSegment.End"/>.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.Messaging.Connection.Run">
            <summary>
            Start processing this connection.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes when the connection terminates and has completed processing.</returns>
        </member>
        <member name="M:Orleans.Runtime.Messaging.Connection.PrepareMessageForSend(Orleans.Runtime.Message)">
            <summary>
            Called immediately prior to transporting a message.
            </summary>
            <param name="msg"></param>
            <returns>Whether or not to continue transporting the message.</returns>
        </member>
        <member name="M:Orleans.Runtime.Messaging.Connection.CloseAsync">
            <summary>
            Close the connection. This method should only be called by <see cref="M:Orleans.Runtime.Messaging.Connection.StartClosing(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.Connection.HandleReceiveMessageFailure(Orleans.Runtime.Message,System.Exception)">
            <summary>
            Handles a message receive failure.
            </summary>
            <returns><see langword="true"/> if the exception should not be caught and <see langword="false"/> if it should be caught.</returns>
        </member>
        <member name="T:Orleans.Runtime.Messaging.ConnectionFailedException">
            <summary>
            Indicates that a connection failed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.ConnectionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.ConnectionFailedException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Messaging.ConnectionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.ConnectionFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.ConnectionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.ConnectionFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Runtime.Messaging.ConnectionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Messaging.ConnectionFailedException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Runtime.Messaging.IUnderlyingTransportFeature">
            <summary>
            Holds the underlying transport used by a connection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.IUnderlyingTransportFeature.Transport">
            <summary>
            Gets the underlying transport.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Messaging.UnderlyingConnectionTransportFeature">
            <summary>
            Holds the underlying transport used by a connection.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Messaging.UnderlyingConnectionTransportFeature.Transport">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.Messaging.NetworkProtocolVersion">
            <summary>
            Identifies a network protocol version.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementContext">
            <summary>
            Provides context for a grain placement operation.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.IPlacementContext.GetCompatibleSilos(Orleans.Runtime.Placement.PlacementTarget)">
            <summary>
            Gets the collection of silos which are compatible with the provided placement target.
            </summary>
            <param name="target">
            A description of the grain being placed as well as contextual information about the request which is triggering placement.
            </param>
            <returns>The collection of silos which are compatible with the provided placement target.</returns>
        </member>
        <member name="M:Orleans.Runtime.Placement.IPlacementContext.GetCompatibleSilosWithVersions(Orleans.Runtime.Placement.PlacementTarget)">
            <summary>
            Gets the collection of silos which are compatible with the provided placement target, along with the versions of the grain interface which each server supports.
            </summary>
            <param name="target">
            A description of the grain being placed as well as contextual information about the request which is triggering placement.
            </param>
            <returns>The collection of silos which are compatible with the provided placement target, along with the versions of the grain interface which each server supports.</returns>
        </member>
        <member name="P:Orleans.Runtime.Placement.IPlacementContext.LocalSilo">
            <summary>
            Gets the local silo's identity.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Placement.IPlacementContext.LocalSiloStatus">
            <summary>
            Gets the local silo's status.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementDirector">
            <summary>
            Interface for placement directors.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Placement.IPlacementDirector.PlacementHintKey">
            <summary>
            Gets the <see cref="P:Orleans.Runtime.Placement.PlacementTarget.RequestContextData"/> key used to store the placement hint, if present.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.IPlacementDirector.OnAddActivation(Orleans.Runtime.PlacementStrategy,Orleans.Runtime.Placement.PlacementTarget,Orleans.Runtime.Placement.IPlacementContext)">
            <summary>
            Picks an appropriate silo to place the specified target on.
            </summary>
            <param name="strategy">The target's placement strategy.</param>
            <param name="target">The grain being placed as well as information about the request which triggered the placement.</param>
            <param name="context">The placement context.</param>
            <returns>An appropriate silo to place the specified target on.</returns>
        </member>
        <member name="M:Orleans.Runtime.Placement.IPlacementDirector.GetPlacementHint(System.Collections.Generic.Dictionary{System.String,System.Object},Orleans.Runtime.SiloAddress[])">
            <summary>
            Gets the placement hint from the provided request context data, if present and valid.
            </summary>
            <param name="requestContextData">The request context data.</param>
            <param name="compatibleSilos">The compatible silos.</param>
            <returns>The placement hint, if present and valid, or <see landword="null"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.Placement.PlacementTarget">
            <summary>
            Describes a placement target, which is a grain as well as context regarding the request which is triggering grain placement.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Placement.PlacementTarget.#ctor(Orleans.Runtime.GrainId,System.Collections.Generic.Dictionary{System.String,System.Object},Orleans.Runtime.GrainInterfaceType,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.Placement.PlacementTarget"/> struct.
            </summary>
            <param name="grainIdentity">The grain being targeted.</param>
            <param name="requestContextData">The <see cref="T:Orleans.Runtime.RequestContext"/> dictionary for the request which triggered placement.</param>
            <param name="interfaceType">The interface being requested.</param>
            <param name="interfaceVersion">The interface version being requested.</param>
        </member>
        <member name="P:Orleans.Runtime.Placement.PlacementTarget.GrainIdentity">
            <summary>
            Gets the grain being targeted.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Placement.PlacementTarget.InterfaceType">
            <summary>
            Gets the interface type of the interface which is being called on the grain which triggered this placement request.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Placement.PlacementTarget.InterfaceVersion">
            <summary>
            Gets the interface version being requested.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Placement.PlacementTarget.RequestContextData">
            <summary>
            Gets the <see cref="T:Orleans.Runtime.RequestContext"/> dictionary for the request which triggered placement.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.AsyncEnumerableGrainExtension">
            <summary>
            Grain-side support for returning <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> from grain methods.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.#ctor(Orleans.Runtime.IGrainContext,Microsoft.Extensions.Options.IOptions{Orleans.Configuration.MessagingOptions})">
            <summary>
            Initializes a new <see cref="T:Orleans.Runtime.AsyncEnumerableGrainExtension"/> instance.
            </summary>
            <param name="grainContext">The grain which this extension is attached to.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.DisposeAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.StartEnumeration``1(System.Guid,Orleans.Runtime.IAsyncEnumerableRequest{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.MoveNext``1(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.AsyncEnumerableGrainExtension.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceRuntime.SetGrainCancellationTokensTarget(Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IInvokable)">
            <summary>
            Sets target grain to the found instances of type GrainCancellationToken
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IHealthCheckable">
            <summary>
            Interface for services which can be probed for health status.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IHealthCheckable.CheckHealth(System.DateTime,System.String@)">
            <summary>
            Returns a value indicating the health of this instance.
            </summary>
            <param name="lastCheckTime">The last time which this instance health was checked.</param>
            <param name="reason">If this method returns <see langword="false"/>, this parameter will describe the reason for that verdict.</param>
            <returns><see langword="true"/> if the instance is healthy, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.ILocalSiloDetails">
            <summary>
            Details of the local silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.Name">
            <summary>
            Gets the name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.ClusterId">
            <summary>
            Gets the cluster identity. This used to be called DeploymentId before Orleans 2.0 name.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.DnsHostName">
            <summary>
            Gets the host name of this silo.
            </summary>
            <remarks>
            This is equal to <see cref="M:System.Net.Dns.GetHostName"/>.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.SiloAddress">
            <summary>
            Gets the address of this silo's inter-silo endpoint.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.GatewayAddress">
            <summary>
            Gets the address of this silo's gateway proxy endpoint.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IRuntimeClient">
            <summary>
            The IRuntimeClient interface defines a subset of the runtime API that is exposed to both silo and client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.InternalGrainFactory">
            <summary>
            Grain Factory to get and cast grain references.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.CurrentActivationIdentity">
            <summary>
            A unique identifier for the current client.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.GetResponseTimeout">
            <summary>
            Get the current response timeout setting for this client.
            </summary>
            <returns>Response timeout value</returns>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Sets the current response timeout setting for this client.
            </summary>
            <param name="timeout">New response timeout value</param>
        </member>
        <member name="T:Orleans.Runtime.OnDeserializedCallbacks">
            <summary>
            Helper class used to invoke <see cref="M:Orleans.Serialization.IOnDeserialized.OnDeserialized(Orleans.Serialization.DeserializationContext)"/> on objects which implement <see cref="T:Orleans.Serialization.IOnDeserialized"/>, immediately after deserialization.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OnDeserializedCallbacks.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OnDeserializedCallbacks"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="P:Orleans.Runtime.OnDeserializedCallbacks.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.OnDeserializedCallbacks.RuntimeClient">
            <summary>
            Gets the runtime client.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OnDeserializedCallbacks.OnDeserialized(Orleans.Serialization.IOnDeserialized)">
            <summary>
            The hook method invoked by the serialization infrastructure.
            </summary>
            <param name="value">The value which was deserialized.</param>
        </member>
        <member name="T:Orleans.Runtime.OutgoingCallInvoker`1">
            <summary>
            Invokes a request on a grain reference.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OutgoingCallInvoker`1.#ctor(Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IInvokable,Orleans.CodeGeneration.InvokeMethodOptions,System.Action{Orleans.Runtime.GrainReference,Orleans.Serialization.Invocation.IResponseCompletionSource,Orleans.Serialization.Invocation.IInvokable,Orleans.CodeGeneration.InvokeMethodOptions},Orleans.IOutgoingGrainCallFilter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OutgoingCallInvoker`1"/> class.
            </summary>
            <param name="grain">The grain reference.</param>
            <param name="request">The request.</param>
            <param name="options"></param>
            <param name="sendRequest"></param>
            <param name="filters">The invocation interceptors.</param>
        </member>
        <member name="T:Orleans.Runtime.RequestContextExtensions">
            <summary>
            Extensions for working with <see cref="T:Orleans.Runtime.RequestContext"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RequestContextExtensions.Import(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the specified context data into the current <see cref="T:Orleans.Runtime.RequestContext"/>, clearing all existing values.
            </summary>
            <param name="contextData">The context data.</param>
        </member>
        <member name="M:Orleans.Runtime.RequestContextExtensions.Export(Orleans.Serialization.DeepCopier)">
            <summary>
            Exports a copy of the current <see cref="T:Orleans.Runtime.RequestContext"/>.
            </summary>
            <param name="copier">The copier.</param>
            <returns>A copy of the current request context.</returns>
        </member>
        <member name="T:Orleans.Runtime.IRingRange">
            <summary>
            Represents a range or set of ranges around a virtual ring where points along the ring are identified using <see cref="T:System.UInt32"/> values.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRingRange.InRange(System.UInt32)">
            <summary>
            Returns a value indicating whether <paramref name="value"/> is within this ring range.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns><see langword="true"/> if the reminder is in our responsibility range, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.IRingRange.InRange(Orleans.Runtime.GrainId)">
            <summary>
            Returns a value indicating whether <paramref name="grainId"/> is within this ring range.
            </summary>
            <param name="grainId">The value to check.</param>
            <returns><see langword="true"/> if the reminder is in our responsibility range, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.ISingleRange">
            <summary>
            Represents a single, contiguous range round a virtual ring where points along the ring are identified using <see cref="T:System.UInt32"/> values.
            </summary>
            <seealso cref="T:Orleans.Runtime.IRingRange" />
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.Begin">
            <summary>
            Gets the exclusive lower bound of the range.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.End">
            <summary>
            Gets the inclusive upper bound of the range.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleRange.InRange(System.UInt32)">
            <summary>
            checks if n is element of (Begin, End], while remembering that the ranges are on a ring
            </summary>
            <param name="n"></param>
            <returns>true if n is in (Begin, End], false otherwise</returns>
        </member>
        <member name="T:Orleans.Runtime.RangeFactory">
            <summary>
            Utility class for creating <see cref="T:Orleans.Runtime.IRingRange" /> values.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.RangeFactory.RING_SIZE">
            <summary>
            The ring size.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.RangeFactory.EmptyRange">
            <summary>
            Represents an empty range.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.RangeFactory.FullRange">
            <summary>
            Represents a full range.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RangeFactory.CreateFullRange">
            <summary>
            Creates the full range.
            </summary>
            <returns>IRingRange.</returns>
        </member>
        <member name="M:Orleans.Runtime.RangeFactory.CreateRange(System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.IRingRange"/> representing the values between the exclusive lower bound, <paramref name="begin"/>, and the inclusive upper bound, <paramref name="end"/>.
            </summary>
            <param name="begin">The exclusive lower bound.</param>
            <param name="end">The inclusive upper bound.</param>
            <returns>A new <see cref="T:Orleans.Runtime.IRingRange"/> representing the values between the exclusive lower bound, <paramref name="begin"/>, and the inclusive upper bound, <paramref name="end"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.RangeFactory.CreateRange(System.Collections.Generic.List{Orleans.Runtime.IRingRange})">
            <summary>
            Creates a new <see cref="T:Orleans.Runtime.IRingRange"/> representing the union of all provided ranges.
            </summary>
            <param name="inRanges">The ranges.</param>
            <returns>A new <see cref="T:Orleans.Runtime.IRingRange"/> representing the union of all provided ranges.</returns>
        </member>
        <member name="M:Orleans.Runtime.RangeFactory.GetEquallyDividedSubRange(Orleans.Runtime.IRingRange,System.Int32,System.Int32)">
            <summary>
            Creates equally divided sub-ranges from the provided range and returns one sub-range from that range.
            </summary>
            <param name="range">The range.</param>
            <param name="numSubRanges">The number of sub-ranges.</param>
            <param name="mySubRangeIndex">The index of the sub-range to return.</param>
            <returns>The identified sub-range.</returns>
        </member>
        <member name="M:Orleans.Runtime.RangeFactory.GetSubRanges(Orleans.Runtime.IRingRange)">
            <summary>
            Gets the contiguous sub-ranges represented by the provided range.
            </summary>
            <param name="range">The range.</param>
            <returns>The contiguous sub-ranges represented by the provided range.</returns>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.Current">
            <summary>
            The full version string of the Orleans runtime, eg: '2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.IsAssemblyDebugBuild(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether the provided <paramref name="assembly"/> was built in debug mode.
            </summary>
            <param name="assembly">
            The assembly to check.
            </param>
            <returns>
            A value indicating whether the provided assembly was built in debug mode.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.SiloStatus">
            <summary>
            Possible statuses of a silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.None">
            <summary>
            No known status.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Created">
            <summary>
            This silo was just created, but not started yet.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Joining">
            <summary>
            This silo has just started, but not ready yet. It is attempting to join the cluster.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Active">
            <summary>
            This silo is alive and functional.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.ShuttingDown">
            <summary>
            This silo is shutting itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Stopping">
            <summary>
            This silo is stopping itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Dead">
            <summary>
            This silo is deactivated/considered to be dead.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloStatusExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Runtime.SiloStatus"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsTerminating(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if this silo is currently terminating: ShuttingDown, Stopping or Dead.
            </summary>
            <param name="siloStatus">The silo status.</param>
            <returns><c>true</c> if the specified silo status is terminating; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TaskSchedulerAgent.HandleFault(System.Exception)">
            <summary>
            Handles fault
            </summary>
            <param name="ex"></param>
            <returns>false agent has been stopped</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainCountStatistics">
            <summary>
            Centralized statistics on per-grain-type activation counts.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloRuntimeStatistics">
            <summary>
            Snapshot of current runtime statistics for a silo
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ActivationCount">
            <summary>
            Total number of activations in a silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RecentlyUsedActivationCount">
            <summary>
            Number of activations in a silo that have been recently used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.CpuUsage">
            <summary>
            The CPU utilization.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.AvailableMemory">
            <summary>
            The amount of memory available in the silo [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.MemoryUsage">
            <summary>
            The used memory size.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.TotalPhysicalMemory">
            <summary>
            The total physical memory available [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.IsOverloaded">
            <summary>
            Is this silo overloaded.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ClientCount">
            <summary>
            The number of clients currently connected to that silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.DateTime">
            <summary>
            The DateTime when this statistics was created.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SimpleGrainStatistic">
            <summary>
            Simple snapshot of current statistics for a given grain type on a given silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.GrainType">
            <summary>
            The type of the grain for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.SiloAddress">
            <summary>
            The silo address for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.ActivationCount">
            <summary>
            The number of activations of this grain type on this given silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SimpleGrainStatistic.ToString">
            <summary>
            Returns the string representation of this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainType">
            <summary>
            The type of the grain for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.SiloAddress">
            <summary>
            The silo address for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainId">
            <summary>
            Unique Id for the grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloAddress">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloName">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalCacheActivationAddress">
            <summary>activation addresses in the local directory cache</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalDirectoryActivationAddress">
            <summary>activation addresses in the local directory.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.PrimaryForGrain">
            <summary>primary silo for this grain</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.GrainClassTypeName">
            <summary>the name of the class that implements this grain.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalActivation">
            <summary>activation on this silo</summary>
        </member>
        <member name="T:Orleans.Runtime.ICatalog">
            <summary>
            Remote interface to grain and activation state
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICatalog.DeleteActivations(System.Collections.Generic.List{Orleans.Runtime.GrainAddress},Orleans.DeactivationReasonCode,System.String)">
            <summary>
            Delete activations from this silo
            </summary>
            <param name="activationAddresses"></param>
            <param name="reasonCode"></param>
            <param name="reasonText"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IManagementGrain">
            <summary>
            Interface for system management functions of silos,
            exposed as a grain for receiving remote requests / commands.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and statuses currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned,
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns>The hosts and their corresponding statuses.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and membership information currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned,
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns>The host entries.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceGarbageCollection(Orleans.Runtime.SiloAddress[])">
            <summary>
            Perform a run of the .NET garbage collector in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceActivationCollection(Orleans.Runtime.SiloAddress[],System.TimeSpan)">
            <summary>Perform a run of the Orleans activation collector in the specified silos.</summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="ageLimit">Maximum idle time of activations to be collected.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceActivationCollection(System.TimeSpan)">
            <summary>
            Forces activation collection.
            </summary>
            <param name="ageLimit">The age limit. Grains which have been idle for longer than this period of time will be eligible for collection.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceRuntimeStatisticsCollection(Orleans.Runtime.SiloAddress[])">
            <summary>Perform a run of the silo statistics collector in the specified silos.</summary>
            <param name="siloAddresses">List of silos this command is to be sent to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetRuntimeStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent silo runtime statistics information for the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Runtime statistics from the specified hosts.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent grain statistics information, amalgamated across silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Simple grain statistics for the specified hosts.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics">
            <summary>
            Return the most recent grain statistics information, amalgamated across all silos.
            </summary>
            <returns>Simple grain statistics.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedGrainStatistics(System.String[],Orleans.Runtime.SiloAddress[])">
            <summary>
            Returns the most recent detailed grain statistics information, amalgamated across silos for the specified types.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="types">Array of grain types to filter the results with</param>
            <returns>Detailed grain statistics.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetGrainActivationCount(Orleans.Runtime.GrainReference)">
            <summary>
            Gets the grain activation count for a specific grain type.
            </summary>
            <param name="grainReference">The grain reference.</param>
            <returns>Gets the number of activations of grains with the same type as the provided grain reference.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetTotalActivationCount">
            <summary>
            Return the total count of all current grain activations across all silos.
            </summary>
            <returns>The total number of grain activations across all silos.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SendControlCommandToProvider``1(System.String,System.Int32,System.Object)">
            <summary>
            Execute a control command on the specified providers on all silos in the cluster.
            Commands are sent to all known providers on each silo which match both the <c>providerTypeFullName</c> AND <c>providerName</c> parameters.
            </summary>
            <remarks>
            Providers must implement the <c>Orleans.Providers.IControllable</c>
            interface in order to receive these control channel commands.
            </remarks>
            <param name="providerName">Provider name to send this command to.</param>
            <param name="command">An id / serial number of this command.
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <param name="arg">An opaque command argument.
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetActivationAddress(Orleans.Runtime.IAddressable)">
            <summary>
            Return the <see cref="T:Orleans.Runtime.SiloAddress"/> where a given Grain is activated (if any).
            </summary>
            <remarks>
            Please note that this method does not represent a strong consistent view of the Grain Catalog.
            The return of this method is taken based on a last known state of the grain which may or may not be up-to-date by the time the caller receive the request.
            </remarks>
            <param name="reference">The <see cref="T:Orleans.Runtime.IAddressable"/> to look up.</param>
            <returns>The <see cref="T:Orleans.Runtime.SiloAddress"/> where the Grain is activated or null if not activated taken from a snapshot of the last known state of the Grain Catalog.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetActiveGrains(Orleans.Runtime.GrainType)">
            <summary>
            Returns all activations of the specified grain type.
            </summary>
            <param name="type">The type.</param>
            <returns>A list of all active grains of the specified type.</returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.MembershipChangeNotification(Orleans.Runtime.MembershipTableSnapshot)">
            <summary>
            Receive notifications about a change in the membership table
            </summary>
            <param name="snapshot">Snapshot of the membership table</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.Ping(System.Int32)">
            <summary>
            Ping request from another silo that probes the liveness of the recipient silo.
            </summary>
            <param name="pingNumber">A unique sequence number for ping message, to facilitate testing and debugging.</param>
        </member>
        <member name="T:Orleans.Runtime.IndirectProbeResponse">
            <summary>
            Represents the result of probing a node via an intermediary node.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IndirectProbeResponse.IntermediaryHealthScore">
            <summary>
            The health score of the intermediary node.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IndirectProbeResponse.Succeeded">
            <summary>
            <see langword="true"/> if the probe succeeded; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IndirectProbeResponse.ProbeResponseTime">
            <summary>
            The duration of the probe attempt.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IndirectProbeResponse.FailureMessage">
            <summary>
            The failure message if the probe did not succeed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IndirectProbeResponse.ToString">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.CoarseStopwatch">
            <summary>
            Cheap, non-allocating stopwatch for timing durations with an accuracy within tens of milliseconds.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.StartNew">
            <summary>
            Starts a new instance.
            </summary>
            <returns>A new, running stopwatch.</returns>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.StartNew(System.Int64)">
            <summary>
            Starts a new instance with the specified duration already elapsed.
            </summary>
            <returns>A new, running stopwatch.</returns>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.FromTimestamp(System.Int64)">
            <summary>
            Creates a new instance with the specified timestamp.
            </summary>
            <returns>A new stopwatch.</returns>
        </member>
        <member name="F:Orleans.Runtime.CoarseStopwatch.Frequency">
            <summary>
            The number of ticks per second for this stopwatch.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.CoarseStopwatch.IsRunning">
            <summary>
            Returns true if this instance is running or false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.CoarseStopwatch.Elapsed">
            <summary>
            Returns the elapsed time.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.CoarseStopwatch.IsDefault">
            <summary>
            Returns a value indicating whether this instance has the default value.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.CoarseStopwatch.ElapsedMilliseconds">
            <summary>
            Returns the elapsed ticks.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.GetTimestamp">
            <summary>
            Gets the number of ticks in the timer mechanism.
            </summary>
            <returns>The number of ticks in the timer mechanism</returns>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.FromTimestamp(System.Int64,System.Int64)">
            <summary>
            Returns a new, stopped <see cref="T:Orleans.Runtime.CoarseStopwatch"/> with the provided start and end timestamps.
            </summary>
            <param name="start">The start timestamp.</param>
            <param name="end">The end timestamp.</param>
            <returns>A new, stopped <see cref="T:Orleans.Runtime.CoarseStopwatch"/> with the provided start and end timestamps.</returns>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.GetRawTimestamp">
            <summary>
            Gets the raw counter value for this instance.
            </summary>
            <remarks> 
            A positive timestamp value indicates the start time of a running stopwatch,
            a negative value indicates the negative total duration of a stopped stopwatch.
            </remarks>
            <returns>The raw counter value.</returns>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.Start">
            <summary>
            Starts the stopwatch.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.Restart">
            <summary>
            Restarts this stopwatch, beginning from zero time elapsed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.Reset">
            <summary>
            Resets this stopwatch into a stopped state with no elapsed duration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CoarseStopwatch.Stop">
            <summary>
            Stops this stopwatch.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.NonCapturingTimer">
            <summary>
            A convenience API for interacting with System.Threading.Timer in a way
            that doesn't capture the ExecutionContext. We should be using this (or equivalent)
            everywhere we use timers to avoid rooting any values stored in AsyncLocals.
            </summary>
            <see href="https://github.com/dotnet/extensions/blob/a1389576a3bbc85a48bdcadce4f16bcf7cdfa088/src/Shared/src/NonCapturingTimer/NonCapturingTimer.cs"/>
        </member>
        <member name="T:Orleans.Runtime.SafeTimer">
            <summary>
            SafeTimer - A wrapper class around .NET Timer objects, with some additional built-in safeguards against edge-case errors.
            
            SafeTimer is a replacement for .NET Timer objects, and removes some of the more infrequently used method overloads for simplification.
            SafeTimer provides centralization of various "guard code" previously added in various places for handling edge-case fault conditions.
            
            Log levels used: Recovered faults => Warning, Per-Timer operations => Verbose, Per-tick operations => Verbose3
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SafeTimerBase">
            <summary>
            SafeTimerBase - an internal base class for implementing sync and async timers in Orleans.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SafeTimerBase.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="newDueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns><c>true</c> if the timer was successfully updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Orleans.Runtime.ValueStopwatch">
            <summary>
            Non-allocating stopwatch for timing durations.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.StartNew">
            <summary>
            Starts a new instance.
            </summary>
            <returns>A new, running stopwatch.</returns>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.StartNew(System.TimeSpan)">
            <summary>
            Starts a new instance with an initial elapsed duration.
            </summary>
            <param name="elapsed">
            The initial elapsed duration.
            </param>
            <returns>A new, running stopwatch.</returns>
        </member>
        <member name="P:Orleans.Runtime.ValueStopwatch.IsRunning">
            <summary>
            Returns true if this instance is running or false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ValueStopwatch.Elapsed">
            <summary>
            Returns the elapsed time.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ValueStopwatch.ElapsedTicks">
            <summary>
            Returns the elapsed ticks.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.GetTimestamp">
            <summary>
            Gets the number of ticks in the timer mechanism.
            </summary>
            <returns>The number of ticks in the timer mechanism</returns>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.FromTimestamp(System.Int64,System.Int64)">
            <summary>
            Returns a new, stopped <see cref="T:Orleans.Runtime.ValueStopwatch"/> with the provided start and end timestamps.
            </summary>
            <param name="start">The start timestamp.</param>
            <param name="end">The end timestamp.</param>
            <returns>A new, stopped <see cref="T:Orleans.Runtime.ValueStopwatch"/> with the provided start and end timestamps.</returns>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.GetRawTimestamp">
            <summary>
            Gets the raw counter value for this instance.
            </summary>
            <remarks> 
            A positive timestamp value indicates the start time of a running stopwatch,
            a negative value indicates the negative total duration of a stopped stopwatch.
            </remarks>
            <returns>The raw counter value.</returns>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.Start">
            <summary>
            Starts the stopwatch.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.Restart">
            <summary>
            Restarts this stopwatch, beginning from zero time elapsed.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.Reset">
            <summary>
            Resets this stopwatch into a stopped state with no elapsed duration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ValueStopwatch.Stop">
            <summary>
            Stops this stopwatch.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Internal.ExecutionContextSuppressor">
            <summary>
            Suppresses the flow of <see cref="T:System.Threading.ExecutionContext"/> until it is disposed.
            </summary>
            <remarks>
            Note that this is a ref-struct to avoid it being used in an async method.
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.Internal.ExecutionContextSuppressor.#ctor">
            <summary>
            Initializes a new <see cref="T:Orleans.Runtime.Internal.ExecutionContextSuppressor"/> instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Internal.ExecutionContextSuppressor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LRU`2.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new LRU (Least Recently Used) cache.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
        </member>
        <member name="M:Orleans.Runtime.LRU`2.RemoveExpired">
            <summary>
            Remove all expired values from the LRU (Least Recently Used) instance.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.GrainTypeOptions">
            <summary>
            Contains grain type descriptions.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainTypeOptions.Classes">
            <summary>
            Gets a collection of metadata about grain classes.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainTypeOptions.Interfaces">
            <summary>
            Gets a collection of metadata about grain interfaces.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.DefaultGrainTypeOptionsProvider">
            <summary>
            The default configuration provider for <see cref="T:Orleans.Configuration.GrainTypeOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.DefaultGrainTypeOptionsProvider.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.DefaultGrainTypeOptionsProvider"/> class.
            </summary>
            <param name="typeManifestOptions">The type manifest options.</param>
        </member>
        <member name="M:Orleans.Configuration.DefaultGrainTypeOptionsProvider.Configure(Orleans.Configuration.GrainTypeOptions)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.GrainTypeOptionsValidator">
            <summary>
            Validates <see cref="T:Orleans.Configuration.GrainTypeOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.GrainTypeOptionsValidator.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Configuration.GrainTypeOptions},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.GrainTypeOptionsValidator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Orleans.Configuration.GrainTypeOptionsValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.OptionConfigureExtensionMethods">
            <summary>
            Extension methods on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, to provider better usability to IOptionFormatter.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatter``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures an options formatter for <typeparamref name="TOptions"/>.
            </summary>
            <param name="services">
            The services.
            </param>
            <typeparam name="TOptions">
            The options type.
            </typeparam>
            <typeparam name="TOptionFormatter">
            The option formatter type.
            </typeparam>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining with other calls.
            </returns>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures an options formatter for <typeparamref name="TOptions"/>.
            </summary>
            <remarks>
            This will use the default options formatter unless a non-default formatter is configured.
            </remarks>
            <param name="services">
            The services.
            </param>
            <typeparam name="TOptions">
            The options type.
            </typeparam>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining with other calls.
            </returns>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.TryConfigureFormatter``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures an options formatter for <typeparamref name="TOptions"/> if none are already configured.
            </summary>
            <param name="services">
            The services.
            </param>
            <typeparam name="TOptions">
            The options type.
            </typeparam>
            <typeparam name="TOptionFormatter">
            The option formatter type.
            </typeparam>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining with other calls.
            </returns>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatterResolver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures an options formatter resolver for <typeparamref name="TOptions"/>.
            </summary>
            <param name="services">
            The services.
            </param>
            <typeparam name="TOptions">
            The options type.
            </typeparam>
            <typeparam name="TOptionFormatterResolver">
            The option formatter resolver type.
            </typeparam>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining with other calls.
            </returns>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.TryConfigureFormatterResolver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure option formatter resolver for named option TOptions, if none is configured
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureNamedOptionForLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Configures a named option to be logged.
            </summary>
            <typeparam name="TOptions">
            The option object's type.
            </typeparam>
            <param name="services">
            The services.
            </param>
            <param name="name">
            The option object's name.
            </param>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining with other calls.
            </returns>
        </member>
        <member name="T:Orleans.Configuration.ClientMessagingOptions">
            <summary>
            Specifies global messaging options that are client related.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.ClientSenderBuckets">
            <summary>
             Gets or sets the total number of grain buckets used by the client in client-to-gateway communication
             protocol. In this protocol, grains are mapped to buckets and buckets are mapped to gateway connections, in order to enable stickiness
             of grain to gateway (messages to the same grain go to the same gateway, while evenly spreading grains across gateways).
             This number should be about 10 to 100 times larger than the expected number of gateway connections.
             If this attribute is not specified, then Math.Pow(2, 13) is used.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClientMessagingOptions.DEFAULT_CLIENT_SENDER_BUCKETS">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.ClientMessagingOptions.ClientSenderBuckets"/>.
            </summary>
            <value>8192</value>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.PreferredFamily">
            <summary>
            Gets or sets the preferred <see cref="T:System.Net.Sockets.AddressFamily"/> to be used when determining an appropriate client identity.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClientMessagingOptions.DEFAULT_PREFERRED_FAMILY">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.ClientMessagingOptions.PreferredFamily"/>.
            </summary>
            <value><see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/></value>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.NetworkInterfaceName">
            <summary>
            Gets or sets the name of the network interface to use to work out an IP address for this machine.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.LocalAddress">
            <summary>
            Gets or sets the IP address used for cluster client.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterMembershipOptions">
            <summary>
            Settings for cluster membership.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumMissedTableIAmAliveLimit">
            <summary>
            Gets or sets the number of missed "I am alive" updates in the table from a silo that causes warning to be logged.
            </summary>
            <seealso cref="P:Orleans.Configuration.ClusterMembershipOptions.IAmAliveTablePublishTimeout"/>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.LivenessEnabled">
            <summary>
            Gets or sets a value indicating whether to disable silo liveness protocol (should be used only for testing).
            If a silo is suspected to be down, but this attribute is set to <see langword="false"/>, the suspicions will not propagated to the system and enforced.
            This parameter is intended for use only for testing and troubleshooting.
            In production, liveness should always be enabled.
            </summary>
            <value>Liveness is enabled by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ProbeTimeout">
            <summary>
            Gets or sets both the period between sending a liveness probe to any given host as well as the timeout for each probe.
            </summary>
            <value>Probes timeout and a new probe is sent every 5 seconds by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.TableRefreshTimeout">
            <summary>
            Gets or sets the period between fetching updates from the membership table.
            </summary>
            <value>The membership table is refreshed every 60 seconds by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.DeathVoteExpirationTimeout">
            <summary>
            Gets or sets the expiration time in seconds for votes in the membership table.
            </summary>
            <value>Votes expire after 2 minutes by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.IAmAliveTablePublishTimeout">
            <summary>
            Gets or sets the period between updating this silo's heartbeat in the membership table.
            </summary>
            <remarks>
            These heartbeats are largely for diagnostic purposes, however they are also used to ignore entries
            in the membership table in the event of a total cluster reset. This value multiplied by <see cref="P:Orleans.Configuration.ClusterMembershipOptions.NumMissedTableIAmAliveLimit"/>
            is used to skip hosts in the membership table when performing an initial connectivity check upon startup.
            </remarks>
            <value>Publish an update every 5 minutes by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.MaxJoinAttemptTime">
            <summary>
            Gets or sets the maximum amount of time to attempt to join a cluster before giving up.
            </summary>
            <value>Attempt to join for 5 minutes before giving up by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.UseLivenessGossip">
            <summary>
            Gets or sets a value indicating whether gossip membership updates between hosts.
            </summary>
            <value>Membership updates are disseminated using gossip by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumProbedSilos">
            <summary>
            Gets or sets the number of silos each silo probes for liveness.
            </summary>
            <remarks>
            This determines how many hosts each host will monitor by default.
            A low value, such as the default value of three, is generally sufficient and allows for prompt removal of another silo in the event that it stops functioning.
            When a silo becomes suspicious of another silo, additional silos may begin to probe that silo to speed up the detection of non-functioning silos.
            </remarks>
            <value>Each silo will actively monitor up to three other silos by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumMissedProbesLimit">
            <summary>
            Gets or sets the number of missed probe requests from a silo that lead to suspecting this silo as down.
            </summary>
            <value>A silo will be suspected as being down if three probes are missed, by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumVotesForDeathDeclaration">
            <summary>
            Gets or sets the number of non-expired votes that are needed to declare some silo as down (should be at most <see cref="P:Orleans.Configuration.ClusterMembershipOptions.NumProbedSilos"/>)
            </summary>
            <value>Two votes are sufficient for a silo to be declared as down, by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.DefunctSiloExpiration">
            <summary>
            Gets or sets the period of time after which membership entries for defunct silos are eligible for removal.
            Valid only if <see cref="P:Orleans.Configuration.ClusterMembershipOptions.DefunctSiloCleanupPeriod"/> is not <see langword="null" />.
            </summary>
            <value>Defunct silos are removed from membership after one week by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.DefunctSiloCleanupPeriod">
            <summary>
            Gets or sets the duration between membership table cleanup operations. When this period elapses, all defunct silo
            entries older than <see cref="P:Orleans.Configuration.ClusterMembershipOptions.DefunctSiloExpiration" /> are removed. This value is per-silo.
            </summary>
            <value>Membership is cleared of expired, defunct silos every hour, by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.AllowedIAmAliveMissPeriod">
            <summary>
            /// Gets the period after which a silo is ignored for initial connectivity validation if it has not updated its heartbeat in the silo membership table.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ClusteringShutdownGracePeriod">
            <summary>
            Gets the amount of time to wait for the cluster membership system to terminate during shutdown.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.LocalHealthDegradationMonitoringPeriod">
            <summary>
            Gets or sets the period between self-tests to log local health degradation status.
            </summary>
            <value>The local host will perform a self-test every ten seconds by default.</value>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ExtendProbeTimeoutDuringDegradation">
            <summary>
            Gets or sets a value indicating whether to extend the effective <see cref="P:Orleans.Configuration.ClusterMembershipOptions.ProbeTimeout"/> value based upon current local health degradation.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.EnableIndirectProbes">
            <summary>
            Gets or sets a value indicating whether to enable probing silos indirectly, via other silos.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterOptions">
            <summary>
            Configures the Orleans cluster.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DefaultClusterId">
            <summary>
            The default value of <see cref="P:Orleans.Configuration.ClusterOptions.ClusterId"/>.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DefaultServiceId">
            <summary>
            The default value of <see cref="P:Orleans.Configuration.ClusterOptions.ServiceId"/>.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DevelopmentClusterId">
            <summary>
            Default cluster id for development clusters.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DevelopmentServiceId">
            <summary>
            Default service id for development clusters.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterOptions.ClusterId">
            <summary>
            Gets or sets the cluster identity. This used to be called DeploymentId before Orleans 2.0 name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterOptions.ServiceId">
            <summary>
            Gets or sets a unique identifier for this service, which should survive deployment and redeployment, where as <see cref="P:Orleans.Configuration.ClusterOptions.ClusterId"/> might not.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterOptionsValidator">
            <summary>
            Validator for <see cref="T:Orleans.Configuration.ClusterOptions"/>
            </summary>
        </member>
        <member name="M:Orleans.Configuration.ClusterOptionsValidator.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Configuration.ClusterOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.ClusterOptionsValidator"/> class.
            </summary>
            <param name="options">
            The options.
            </param>
        </member>
        <member name="M:Orleans.Configuration.ClusterOptionsValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.GatewayOptions">
            <summary>
            Options for configuring how clients interact with gateway endpoints.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GatewayOptions.GatewayListRefreshPeriod">
            <summary>
            Gets or sets the period of time between refreshing the list of active gateways.
            </summary>
            <value>The list of active gateways will be refreshed every minute by default.</value>
        </member>
        <member name="F:Orleans.Configuration.GatewayOptions.DEFAULT_PREFERED_GATEWAY_INDEX">
            <summary>
            Default preferred gateway index,. Value -1 means prefer no gateway
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GatewayOptions.PreferredGatewayIndex">
            <summary>
            Gets or sets the index of the preferred gateway within the list of active gateways.
            </summary>
            <remarks>Set this value to its default value, <c>-1</c>, to disable this functionality.</remarks>
            <value>No gateway is preferred by default.</value>
        </member>
        <member name="T:Orleans.Configuration.GrainVersioningOptions">
            <summary>
            Versioning options govern grain implementation selection in heterogeneous deployments.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainVersioningOptions.DefaultCompatibilityStrategy">
            <summary>
            Gets or sets the name of the default strategy used to determine grain compatibility in heterogeneous deployments.
            </summary>
            <value>The <see cref="T:Orleans.Versions.Compatibility.BackwardCompatible"/> strategy is used by default.</value>
        </member>
        <member name="P:Orleans.Configuration.GrainVersioningOptions.DefaultVersionSelectorStrategy">
            <summary>
            Gets or sets the name of the default strategy for selecting grain versions in heterogeneous deployments.
            </summary>
            <value>The <see cref="T:Orleans.Versions.Selector.AllCompatibleVersions"/> strategy is used by default.</value>
        </member>
        <member name="T:Orleans.Configuration.LoadSheddingOptions">
            <summary>
            Options relating to load shedding.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.LoadSheddingOptions.DefaultLoadSheddingLimit">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.LoadSheddingOptions.LoadSheddingLimit"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LoadSheddingOptions.LoadSheddingEnabled">
            <summary>
            Gets or sets a value indicating whether load shedding in the client gateway and stream providers is enabled.
            The default value is <see langword="false"/>, meaning that load shedding is disabled.
            In addition to enabling this option, a valid <see cref="T:Orleans.Statistics.IHostEnvironmentStatistics"/> implementation must be registered on gateway hosts to enable this functionality.
            </summary>
            <value>Load shedding is disabled by default.</value>
        </member>
        <member name="P:Orleans.Configuration.LoadSheddingOptions.LoadSheddingLimit">
            <summary>
            Gets or sets the CPU utilization, expressed as a value between <c>0</c> and <c>100</c>, at which load shedding begins.
            Note that this value is in %, so valid values range from 1 to 100, and a reasonable value is
            typically between 80 and 95.
            This value is ignored if load shedding is disabled, which is the default.
            If load shedding is enabled and this attribute does not appear, then the default limit is 95%.
            </summary>
            <value>Load shedding begins at a CPU utilization of 95% by default.</value>
        </member>
        <member name="T:Orleans.Configuration.MessagingOptions">
            <summary>
            Specifies global messaging options that are common to client and silo.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.MessagingOptions._responseTimeout">
            <summary>
            The <see cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeout"/> value.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.ResponseTimeout">
            <summary>
            Gets or sets the default timeout before a request is assumed to have failed.
            </summary>
            <seealso cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeoutWithDebugger"/>
            <value>Requests will timeout after 30 seconds by default.</value>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.ResponseTimeoutWithDebugger">
            <summary>
            Gets or sets the effective <see cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeout"/> value to use when a debugger is attached.
            </summary>
            <value>Requests will timeout after 30 minutes when a debugger is attached, by default.</value>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.DropExpiredMessages">
            <summary>
            Gets or sets a value indicating whether messages should be dropped once they expire, that is if it was not delivered 
            to the destination before it has timed out on the sender.
            </summary>
            <value>Messages are dropped once they expire, by default.</value>
        </member>
        <member name="F:Orleans.Configuration.MessagingOptions.DEFAULT_MAX_MESSAGE_SEND_RETRIES">
            <summary>
            The maximum number of times a message send attempt will be retried.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.MaxMessageHeaderSize">
            <summary>
            The maximum size, in bytes, of the header for a message. The runtime will forcibly close the connection
            if the header size is greater than this value.
            </summary>
            <value>The maximum message header size is 10 MB by default.</value>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.MaxMessageBodySize">
            <summary>
            The maximum size, in bytes, of the body for a message. The runtime will forcibly close the connection
            if the body size is greater than this value.
            </summary>
            <value>The maximum message body size is 100 MB by default.</value>
        </member>
        <member name="T:Orleans.Configuration.StaticGatewayListProviderOptions">
            <summary>
            Options for configuring a static list of gateways.
            </summary>
            <remarks>>
            See <see cref="M:Orleans.Hosting.ClientBuilderExtensions.UseStaticClustering(Orleans.Hosting.IClientBuilder,System.Net.IPEndPoint[])"/> for more information.
            </remarks>
        </member>
        <member name="P:Orleans.Configuration.StaticGatewayListProviderOptions.Gateways">
            <summary>
            Gets or sets the list of gateway addresses.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.TypeManagementOptions">
            <summary>
            Type management settings for in place upgrade.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.TypeManagementOptions.TypeMapRefreshInterval">
            <summary>
            The number of seconds to refresh the cluster grain interface map
            </summary>
        </member>
        <member name="T:Orleans.Configuration.Overrides.OptionsOverrides">
            <summary>
            Functionality for overriding options using named options, falling back to the default (unnamed) value.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.GetProviderClusterOptions(System.IServiceProvider,System.String)">
            <summary>
            Gets <see cref="T:Orleans.Configuration.ClusterOptions"/> which may have been overridden on a per-provider basis.
            Note: This is intended for migration purposes as a means to handle previously inconsistent behaviors in how providers used ServiceId and ClusterId.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.GetOverridableOption``1(System.IServiceProvider,System.String)">
            <summary>
            Gets option that can be overridden by named service.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.Internal.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Internal.ServiceCollectionExtensions.AddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an existing registration of <typeparamref name="TImplementation"/> as a provider of service type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="M:Orleans.Configuration.Internal.ServiceCollectionExtensions.AddFromExisting(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Registers an existing registration of <paramref name="implementation"/> as a provider of service type <paramref name="service"/>.
            </summary>
            <param name="services">The service collection.</param>
            <param name="service">The service type being provided.</param>
            <param name="implementation">The implementation of <paramref name="service"/>.</param>
        </member>
        <member name="M:Orleans.Configuration.Internal.ServiceCollectionExtensions.TryAddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an existing registration of <typeparamref name="TImplementation"/> as a provider of <typeparamref name="TService"/> if there are no existing <typeparamref name="TService"/> implementations.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="T:Orleans.Configuration.Validators.ClientClusteringValidator">
            <summary>
            Validator for client-side clustering.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.Validators.ClientClusteringValidator.ClusteringNotConfigured">
            <summary>
            The error message displayed when clustering is misconfigured.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.Validators.ClientClusteringValidator._serviceProvider">
            <summary>
            The service provider.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Validators.ClientClusteringValidator.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.Validators.ClientClusteringValidator"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:Orleans.Configuration.Validators.ClientClusteringValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.Validators.LoadSheddingValidator">
            <summary>
            Validates <see cref="T:Orleans.Configuration.LoadSheddingOptions"/> configuration.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Validators.LoadSheddingValidator.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Configuration.LoadSheddingOptions},Orleans.Statistics.IHostEnvironmentStatistics)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Configuration.Validators.LoadSheddingValidator"/> class.
            </summary>
            <param name="loadSheddingOptions">
            The load shedding options.
            </param>
            <param name="hostEnvironmentStatistics">
            The host environment statistics.
            </param>
        </member>
        <member name="M:Orleans.Configuration.Validators.LoadSheddingValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.ClientConnectionOptions">
            <summary>
            Options for clients connections.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.ClientConnectionOptions.ConfigureConnection(System.Action{Microsoft.AspNetCore.Connections.IConnectionBuilder})">
            <summary>
            Adds a connection configuration delegate.
            </summary>
            <param name="configure">The configuration delegate.</param>
        </member>
        <member name="M:Orleans.Configuration.ClientConnectionOptions.ConfigureConnectionBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder)">
            <summary>
            Configures the provided connection builder using these options.
            </summary>
            <param name="builder">The connection builder.</param>
        </member>
        <member name="T:Orleans.Configuration.ConnectionOptions">
            <summary>
            Connection options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConnectionOptions.ProtocolVersion">
            <summary>
            Gets or sets the network protocol version to negotiate with.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConnectionOptions.ConnectionsPerEndpoint">
            <summary>
            Gets or sets the number of connections to maintain for each endpoint.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConnectionOptions.ConnectionRetryDelay">
            <summary>
            Gets or sets the amount of time to wait after a failed connection attempt before retrying the connection.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConnectionOptions.OpenConnectionTimeout">
            <summary>
            Gets or sets the timeout before a connection open is assumed to have failed.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ConnectionOptions.DEFAULT_OPENCONNECTION_TIMEOUT">
            <summary>
            The default value for <see cref="P:Orleans.Configuration.ConnectionOptions.OpenConnectionTimeout"/>.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.INamedServiceConfigurator">
            <summary>
            Functionality for configuring a named service.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.INamedServiceConfigurator.Name">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.INamedServiceConfigurator.ConfigureDelegate">
            <summary>
            Gets the delegate used to configure the service.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.NamedServiceConfigurator">
            <summary>
            Component configurator base class for names services
            This associates any configurations or subcomponents with the same name as the service being configured
            </summary>
        </member>
        <member name="P:Orleans.Hosting.NamedServiceConfigurator.Name">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Hosting.NamedServiceConfigurator.ConfigureDelegate">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.NamedServiceConfigurator.#ctor(System.String,System.Action{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.NamedServiceConfigurator"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="configureDelegate">
            The configuration delegate.
            </param>
        </member>
        <member name="T:Orleans.Hosting.NamedServiceConfiguratorExtensions">
            <summary>
            Extensions for working with <see cref="T:Orleans.Hosting.INamedServiceConfigurator"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.NamedServiceConfiguratorExtensions.Configure``1(Orleans.Hosting.INamedServiceConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{``0}})">
            <summary>
            Configures options for a named service.
            </summary>
            <param name="configurator">
            The named service configurator.
            </param>
            <param name="configureOptions">
            The options configuration delegate.
            </param>
            <typeparam name="TOptions">
            The underlying options type.
            </typeparam>
        </member>
        <member name="M:Orleans.Hosting.NamedServiceConfiguratorExtensions.ConfigureComponent``2(Orleans.Hosting.INamedServiceConfigurator,System.Func{System.IServiceProvider,System.String,``1},System.Action{Microsoft.Extensions.Options.OptionsBuilder{``0}})">
            <summary>
            Adds a singleton component to a named service and configures options for the named service.
            </summary>
            <typeparam name="TOptions">The options type being configured.</typeparam>
            <typeparam name="TComponent">The component service type being registered.</typeparam>
            <param name="configurator">The named configurator which the component and options will be configured for.</param>
            <param name="factory">The factory used to create the component for the named service.</param>
            <param name="configureOptions">The delegate used to configure options for the named service.</param>
        </member>
        <member name="M:Orleans.Hosting.NamedServiceConfiguratorExtensions.ConfigureComponent``1(Orleans.Hosting.INamedServiceConfigurator,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Adds a singleton component to a named service.
            </summary>
            <typeparam name="TComponent">The component service type.</typeparam>
            <param name="configurator">The named configurator which the component will be configured for.</param>
            <param name="factory">The factory used to create the component for the named service.</param>
        </member>
        <member name="T:Orleans.Hosting.ClientBuilder">
            <summary>
            Builder for configuring an Orleans client.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.ClientBuilder"/> class.
            </summary>
            <param name="services">
            The service collection.
            </param>
        </member>
        <member name="P:Orleans.Hosting.ClientBuilder.Services">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Hosting.ClientBuilder.Configuration">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Hosting.ClientBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseConnectionRetryFilter(Orleans.Hosting.IClientBuilder,System.Func{System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Configures the provided delegate as a connection retry filter, used to determine whether initial connection to the Orleans cluster should be retried after a failure.
            </summary>
            <param name="builder">The host builder.</param>
            <param name="connectionRetryFilter">The connection retry filter.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseConnectionRetryFilter(Orleans.Hosting.IClientBuilder,Orleans.IClientConnectionRetryFilter)">
            <summary>
            Configures the provided delegate as a connection retry filter, used to determine whether initial connection to the Orleans cluster should be retried after a failure.
            </summary>
            <param name="builder">The host builder.</param>
            <param name="connectionRetryFilter">The connection retry filter.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseConnectionRetryFilter``1(Orleans.Hosting.IClientBuilder)">
            <summary>
            Configures the provided <typeparamref name="TConnectionRetryFilter"/> type as a connection retry filter, used to determine whether initial connection to the Orleans cluster should be retried after a failure.
            </summary>
            <param name="builder">The host builder.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.ConfigureServices(Orleans.Hosting.IClientBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="builder">The host builder.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.Configure``1(Orleans.Hosting.IClientBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.Configure``1(Orleans.Hosting.IClientBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddGatewayCountChangedHandler(Orleans.Hosting.IClientBuilder,Orleans.GatewayCountChangedHandler)">
            <summary>
            Registers a <see cref="T:Orleans.GatewayCountChangedHandler"/> event handler.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddClusterConnectionLostHandler(Orleans.Hosting.IClientBuilder,Orleans.ConnectionToClusterLostHandler)">
            <summary>
            Registers a <see cref="T:Orleans.ConnectionToClusterLostHandler"/> event handler.
            </summary>
            <param name="builder">The builder.</param>
            <param name="handler">The handler.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddActivityPropagation(Orleans.Hosting.IClientBuilder)">
            <summary>
            Add <see cref="P:System.Diagnostics.Activity.Current"/> propagation through grain calls.
            Note: according to <see cref="M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind)"/> activity will be created only when any listener for activity exists <see cref="M:System.Diagnostics.ActivitySource.HasListeners"/> and <see cref="P:System.Diagnostics.ActivityListener.Sample"/> returns <see cref="F:System.Diagnostics.ActivitySamplingResult.PropagationData"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseLocalhostClustering(Orleans.Hosting.IClientBuilder,System.Int32,System.String,System.String)">
            <summary>
            Configures the client to connect to a silo on the localhost.
            </summary>
            <param name="builder">
            The client builder.
            </param>
            <param name="gatewayPort">
            The local silo's gateway port.
            </param>
            <param name="serviceId">
            The service id.
            </param>
            <param name="clusterId">
            The cluster id.
            </param>
            <returns>
            The <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseLocalhostClustering(Orleans.Hosting.IClientBuilder,System.Int32[],System.String,System.String)">
            <summary>
            Configures the client to connect to a silo on the localhost.
            </summary>
            <param name="builder">
            The client builder.
            </param>
            <param name="gatewayPorts">
            The local silo gateway ports.
            </param>
            <param name="serviceId">
            The service id.
            </param>
            <param name="clusterId">
            The cluster id.
            </param>
            <returns>
            The <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseStaticClustering(Orleans.Hosting.IClientBuilder,System.Net.IPEndPoint[])">
            <summary>
            Configures the client to use static clustering.
            </summary>
            <param name="builder">
            The client builder.
            </param>
            <param name="endpoints">
            The gateway endpoints.
            </param>
            <returns>
            The <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseStaticClustering(Orleans.Hosting.IClientBuilder,System.Action{Orleans.Configuration.StaticGatewayListProviderOptions})">
            <summary>
            Configures the client to use static clustering.
            </summary>
            <param name="builder">
            The client builder.
            </param>
            <param name="configureOptions">
            The configure Options.
            </param>
            <returns>
            The <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.UseStaticClustering(Orleans.Hosting.IClientBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.StaticGatewayListProviderOptions}})">
            <summary>
            Configures the client to use static clustering.
            </summary>
            <param name="builder">
            The client builder.
            </param>
            <param name="configureOptions">
            The configure Options.
            </param>
            <returns>
            The <see cref="T:Orleans.Hosting.IClientBuilder"/>.
            </returns>
        </member>
        <member name="T:Orleans.Hosting.ClientBuilderGrainCallFilterExtensions">
            <summary>
            Extensions for configuring grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter(Orleans.Hosting.IClientBuilder,Orleans.IOutgoingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The <see cref="T:Orleans.Hosting.IClientBuilder"/>.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter``1(Orleans.Hosting.IClientBuilder)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Orleans.Hosting.IClientBuilder"/>.</returns>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter(Orleans.Hosting.IClientBuilder,Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The <see cref="T:Orleans.Hosting.IClientBuilder"/>.</returns>
        </member>
        <member name="T:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extensions.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IIncomingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.GrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddIncomingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IIncomingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddIncomingGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddIncomingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IncomingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddOutgoingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IOutgoingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddOutgoingGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.AddOutgoingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.OutgoingGrainCallFilterWrapper">
            <summary>
            Adapts <see cref="T:Orleans.OutgoingGrainCallFilterDelegate"/> delegates to the <see cref="T:Orleans.IOutgoingGrainCallFilter"/> interface.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.OutgoingGrainCallFilterWrapper.#ctor(Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.OutgoingGrainCallFilterWrapper"/> class.
            </summary>
            <param name="interceptor">
            The interceptor.
            </param>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.OutgoingGrainCallFilterWrapper.Invoke(Orleans.IOutgoingGrainCallContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.IncomingGrainCallFilterWrapper">
            <summary>
            Implements <see cref="T:Orleans.IIncomingGrainCallFilter"/> by delegating all <see cref="M:Orleans.IIncomingGrainCallFilter.Invoke(Orleans.IIncomingGrainCallContext)"/> calls to the provided delegate.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.IncomingGrainCallFilterWrapper.#ctor(Orleans.IncomingGrainCallFilterDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.IncomingGrainCallFilterWrapper"/> class.
            </summary>
            <param name="interceptor">
            The interceptor.
            </param>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterServiceCollectionExtensions.IncomingGrainCallFilterWrapper.Invoke(Orleans.IIncomingGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.Hosting.IClientBuilder">
            <summary>
            Builder for configuring an Orleans client.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.IClientBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.IClientBuilder.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="T:Orleans.DefaultOptionsFormatter`1">
            <summary>
            Default implementation of <see cref="T:Orleans.IOptionFormatter`1"/>.
            </summary>
            <typeparam name="T">The options type.</typeparam>
        </member>
        <member name="M:Orleans.DefaultOptionsFormatter`1.#ctor(Microsoft.Extensions.Options.IOptions{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.DefaultOptionsFormatter`1"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Orleans.DefaultOptionsFormatter`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.DefaultOptionsFormatter`1"/> class.
            </summary>
            <param name="name">The options name.</param>
            <param name="options">The options.</param>
        </member>
        <member name="P:Orleans.DefaultOptionsFormatter`1.Name">
            <summary>
            Gets the options name.
            </summary>
        </member>
        <member name="M:Orleans.DefaultOptionsFormatter`1.Format">
            <summary>
            For
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.IOptionFormatter">
            <summary>
            format the option and give it a category and a name
            </summary>
        </member>
        <member name="P:Orleans.IOptionFormatter.Name">
            <summary>
            Gets the name of the options object.
            </summary>
        </member>
        <member name="M:Orleans.IOptionFormatter.Format">
            <summary>
            Formats the options object into a collection of strings.
            </summary>
            <returns>A collection of formatted string-value pairs corresponding the the properties on the options object.</returns>
        </member>
        <member name="T:Orleans.IOptionFormatter`1">
            <summary>
            Option formatter for a certain option type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The options type.</typeparam>
        </member>
        <member name="T:Orleans.IOptionFormatterResolver`1">
            <summary>
            IOptionFormatterResolver resolve specific OptionFormatter for certain named option
            </summary>
            <typeparam name="T">The options type.</typeparam>
        </member>
        <member name="M:Orleans.IOptionFormatterResolver`1.Resolve(System.String)">
            <summary>
            Resolves the options formatter for the specified options type with the specified options name.
            </summary>
            <param name="name">The options name.</param>
            <returns>The options type.</returns>
        </member>
        <member name="T:Orleans.OptionFormattingUtilities">
            <summary>
            Utility class for option formatting
            </summary>
        </member>
        <member name="F:Orleans.OptionFormattingUtilities.DefaultFormatFormatting">
            <summary>
            The default format string.
            </summary>
        </member>
        <member name="F:Orleans.OptionFormattingUtilities.DefaultNamedFormatting">
            <summary>
            The default format string for options types which are named.
            </summary>
        </member>
        <member name="M:Orleans.OptionFormattingUtilities.Format(System.Object,System.Object,System.String)">
            <summary>
            Formats a key-value pair using default format
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="formatting">
            The format string.
            </param>
            <returns>A formatted key-value pair.</returns>
        </member>
        <member name="M:Orleans.OptionFormattingUtilities.Name``1(System.String,System.String)">
            <summary>
            Formats the name of an options object.
            </summary>
            <typeparam name="TOptions">The options type.</typeparam>
            <param name="name">The options name.</param>
            <param name="formatting">The format string.</param>
            <returns>The formatted options object name.</returns>
        </member>
        <member name="T:Orleans.ClientOptionsLogger">
            <summary>
            Logger for options on the client.
            </summary>
        </member>
        <member name="F:Orleans.ClientOptionsLogger.ClientOptionLoggerLifeCycleRing">
            <summary>
            Logs options as soon as possible.
            </summary>
        </member>
        <member name="M:Orleans.ClientOptionsLogger.#ctor(Microsoft.Extensions.Logging.ILogger{Orleans.ClientOptionsLogger},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClientOptionsLogger"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="services">
            The services.
            </param>
        </member>
        <member name="M:Orleans.ClientOptionsLogger.Participate(Orleans.IClusterClientLifecycle)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientOptionsLogger.OnStart(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.OptionsLogger">
            <summary>
            Base class for client and silo default options loggers.
            </summary>
        </member>
        <member name="M:Orleans.OptionsLogger.#ctor(Microsoft.Extensions.Logging.ILogger,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.OptionsLogger"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="services">
            The services.
            </param>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOptions">
            <summary>
            Log all options with registered formatters
            </summary>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOptions(System.Collections.Generic.IEnumerable{Orleans.IOptionFormatter})">
            <summary>
            Log options using a set of formatters.
            </summary>
            <param name="formatters">The collection of options formatters.</param>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOption(Orleans.IOptionFormatter)">
            <summary>
            Log an options using a formatter.
            </summary>
            <param name="formatter">The options formatter.</param>
        </member>
        <member name="T:Orleans.RedactAttribute">
            <summary>
            When applied to a property on an options class, this attribute prevents the property value from being formatted by conforming <see cref="T:Orleans.IOptionFormatter"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.RedactAttribute.Redact(System.Object)">
            <summary>
            Redacts the provided value.
            </summary>
            <param name="value">The value.</param>
            <returns>The redacted value.</returns>
        </member>
        <member name="T:Orleans.RedactConnectionStringAttribute">
            <summary>
            When applied to a connection string property on an options class, this attribute prevents the property value from being formatted by conforming <see cref="T:Orleans.IOptionFormatter"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.RedactConnectionStringAttribute.Redact(System.Object)">
            <summary>
            Redacts the provided value.
            </summary>
            <param name="value">The value.</param>
            <returns>The redacted value.</returns>
        </member>
        <member name="T:Orleans.SerializerConfigurationValidator">
            <summary>
            Validates serializer configuration.
            </summary>
        </member>
        <member name="M:Orleans.SerializerConfigurationValidator.#ctor(Orleans.Serialization.Serializers.ICodecProvider,Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.SerializerConfigurationValidator"/> class.
            </summary>
            <param name="codecProvider">
            The codec provider.
            </param>
            <param name="options">
            The type manifest options.
            </param>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="T:Orleans.ClusterClient">
            <summary>
            Client for communicating with clusters of Orleans silos.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClient.#ctor(System.IServiceProvider,Orleans.OutsideRuntimeClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Orleans.Configuration.ClientMessagingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClusterClient"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="runtimeClient">The runtime client.</param>
            <param name="loggerFactory">Logger factory used to create loggers</param>
            <param name="clientMessagingOptions">Messaging parameters</param>
        </member>
        <member name="P:Orleans.ClusterClient.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetSystemTarget``1(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#Cast``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IGrainFactory#GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IGrainFactory#GetGrain(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(System.Type,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(System.Type,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(System.Type,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(System.Type,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain(Orleans.Runtime.GrainId,Orleans.Runtime.GrainInterfaceType)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.DefaultClientServices">
            <summary>
            Configures the default services for a client.
            </summary>
        </member>
        <member name="M:Orleans.DefaultClientServices.AddDefaultServices(Orleans.Hosting.IClientBuilder)">
            <summary>
            Configures the default services for a client.
            </summary>
            <param name="builder">The client builder.</param>
        </member>
        <member name="T:Orleans.DefaultClientServices.AllowOrleansTypes">
            <summary>
            A <see cref="T:Orleans.Serialization.ITypeNameFilter"/> which allows any type from an assembly containing "Orleans" in its name to be allowed for the purposes of serialization and deserialization.
            </summary>
        </member>
        <member name="M:Orleans.DefaultClientServices.AllowOrleansTypes.IsTypeNameAllowed(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.DefaultClientServices.ServicesAdded">
            <summary>
            A marker type used to determine
            </summary>
        </member>
        <member name="T:Orleans.ConnectionToClusterLostHandler">
            <summary>
            Handler for client disconnection from a cluster.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orleans.GatewayCountChangedHandler">
            <summary>
            Handler for the number of gateways.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orleans.GatewayCountChangedEventArgs">
            <summary>
            Event arguments for gateway connectivity events.
            </summary>
        </member>
        <member name="P:Orleans.GatewayCountChangedEventArgs.NumberOfConnectedGateways">
            <summary>
            Gets the number of gateways which this client is currently connected to.
            </summary>
        </member>
        <member name="P:Orleans.GatewayCountChangedEventArgs.PreviousNumberOfConnectedGateways">
            <summary>
            Gets the number of gateways which this client was currently connected to before this event.
            </summary>
        </member>
        <member name="P:Orleans.GatewayCountChangedEventArgs.ConnectionRecovered">
            <summary>
            Helper to detect situations where cluster connectivity was regained.
            </summary>
        </member>
        <member name="M:Orleans.GatewayCountChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GatewayCountChangedEventArgs"/> class.
            </summary>
            <param name="currentNumberOfConnectedGateways">
            The current number of connected gateways.
            </param>
            <param name="previousNumberOfConnectedGateways">
            The previous number of connected gateways.
            </param>
        </member>
        <member name="T:Orleans.GrainFactory">
            <summary>
            Factory for accessing grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.typedSystemTargetReferenceCache">
            <summary>
            The cache of typed system target references.
            </summary>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(Orleans.Runtime.GrainId,Orleans.Runtime.GrainInterfaceType)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(System.Type,Orleans.Runtime.IdSpan,System.String)">
            <summary>
            Gets a grain reference which implements the specified grain interface type and has the specified grain key, without specifying the grain type directly.
            </summary>
            <remarks>
            This method infers the most appropriate <see cref="P:Orleans.Runtime.GrainId.Type"/> value based on the <paramref name="interfaceType"/> argument and optional <paramref name="grainClassNamePrefix"/> argument.
            The <see cref="T:Orleans.GrainInterfaceTypeToGrainTypeResolver"/> type is responsible for determining the most appropriate grain type.
            </remarks>
            <param name="interfaceType">The interface type which the returned grain reference will implement.</param>
            <param name="grainKey">The <see cref="P:Orleans.Runtime.GrainId.Key"/> portion of the grain id.</param>
            <param name="grainClassNamePrefix">An optional grain class name prefix.</param>
            <returns>A grain reference which implements the provided interface.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.CreateGrainReference(System.Type,Orleans.Runtime.GrainId)">
            <summary>
            Creates a grain reference.
            </summary>
            <param name="interfaceType">The interface type which the reference must implement..</param>
            <param name="grainId">The grain id which the reference will target.</param>
            <returns>A grain reference.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference(System.Type,Orleans.Runtime.IAddressable)">
            <summary>
            Creates an object reference which points to the provided object.
            </summary>
            <param name="interfaceType">The interface type which the reference must implement..</param>
            <param name="obj">The addressable object implementation.</param>
            <returns>An object reference.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.ValidateGrainKeyExtension(System.String)">
            <summary>
            Validates the provided grain key extension.
            </summary>
            <param name="keyExt">The grain key extension.</param>
            <exception cref="T:System.ArgumentNullException">The key is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The key is empty or contains only whitespace.</exception>
        </member>
        <member name="T:Orleans.GrainInterfaceTypeToGrainTypeResolver">
            <summary>
            Associates <see cref="T:Orleans.Runtime.GrainInterfaceType"/>s with a compatible <see cref="T:Orleans.Runtime.GrainType"/>.
            </summary>
            <remarks>
            This is primarily intended for end-users calling <see cref="T:Orleans.IGrainFactory"/> methods without needing to be overly explicit.
            </remarks>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.#ctor(Orleans.Runtime.IClusterManifestProvider)">
            <summary>
            Creates a new instance of the <see cref="T:Orleans.GrainInterfaceTypeToGrainTypeResolver"/> class.
            </summary>
            <param name="clusterManifestProvider">The cluster manifest provider.</param>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.GetGrainType(Orleans.Runtime.GrainInterfaceType,System.String)">
            <summary>
            Returns the <see cref="T:Orleans.Runtime.GrainType"/> which supports the provided <see cref="T:Orleans.Runtime.GrainInterfaceType"/> and which has an implementing type name beginning with the provided prefix string.
            </summary>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.GetGrainType(Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Returns a <see cref="T:Orleans.Runtime.GrainType"/> which implements the provided <see cref="T:Orleans.Runtime.GrainInterfaceType"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.TryGetGrainType(Orleans.Runtime.GrainInterfaceType,Orleans.Runtime.GrainType@)">
            <summary>
            Resolves a <see cref="T:Orleans.Runtime.GrainType"/> which implements the provided <see cref="T:Orleans.Runtime.GrainInterfaceType"/>, returning <see langword="true"/> if an implementation was found; otherwise <see langword="false"/>.
            </summary>
            <returns><see langword="true"/> if an implementation was found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.GetCache">
            <summary>
            Returns the cache, rebuilding it if it is out of date.
            </summary>
            <returns>The cache.</returns>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.BuildCache(Orleans.Metadata.ClusterManifest)">
            <summary>
            Builds a cached resolution mapping.
            </summary>
            <param name="clusterManifest">The current cluster manifest.</param>
            <returns>The cache.</returns>
        </member>
        <member name="T:Orleans.GrainInterfaceTypeToGrainTypeResolver.Cache">
            <summary>
            Contains a mapping from grain interface type to the implementations of that interface.
            </summary>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.Cache.#ctor(Orleans.Metadata.MajorMinorVersion,System.Collections.Generic.Dictionary{Orleans.Runtime.GrainInterfaceType,Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainInterfaceTypeToGrainTypeResolver.Cache"/> class.
            </summary>
            <param name="version">The cluster manifest version which this instance corresponds to.</param>
            <param name="map">The interface map.</param>
        </member>
        <member name="P:Orleans.GrainInterfaceTypeToGrainTypeResolver.Cache.Version">
            <summary>
            Gets the cluster manifest version which this cache corresponds to.
            </summary>
        </member>
        <member name="P:Orleans.GrainInterfaceTypeToGrainTypeResolver.Cache.Map">
            <summary>
            Gets the mapping from grain interface type to implementations.
            </summary>
        </member>
        <member name="T:Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry">
            <summary>
            Represents the implementation <see cref="T:Orleans.Runtime.GrainType"/> values for a grain interface type.
            </summary>
        </member>
        <member name="M:Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry.#ctor(Orleans.Runtime.GrainType,System.Collections.Generic.List{System.ValueTuple{System.String,Orleans.Runtime.GrainType}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry"/> struct.
            </summary>
            <param name="primaryImplementation">The primary implementation type.</param>
            <param name="implementations">The set of other implementations along with their grain type prefixes.</param>
        </member>
        <member name="P:Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry.PrimaryImplementation">
            <summary>
            Gets the primary implementation type.
            </summary>
        </member>
        <member name="P:Orleans.GrainInterfaceTypeToGrainTypeResolver.CacheEntry.Implementations">
            <summary>
            Gets the collection of implementation types with their class name prefixes.
            </summary>
        </member>
        <member name="T:Orleans.IClientConnectionRetryFilter">
            <summary>
            Filter used to determine if cluster connection should be retried.
            </summary>
        </member>
        <member name="M:Orleans.IClientConnectionRetryFilter.ShouldRetryConnectionAttempt(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Returns a value indicating whether connection to an Orleans cluster should be re-attempted.
            </summary>
            <param name="exception">The exception thrown from the last connection attempt.</param>
            <param name="cancellationToken">The cancellation token used to notify when connection has been aborted externally.</param>
            <returns><see langword="true"/> if connection should be re-attempted, <see langword="false"/> if attempts to connect to the cluster should be aborted.</returns>
        </member>
        <member name="T:Orleans.IClusterClient">
            <summary>
            Client interface for interacting with an Orleans cluster.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.ServiceProvider">
            <summary>
            Gets the service provider used by this client.
            </summary>
        </member>
        <member name="T:Orleans.IClusterConnectionStatusListener">
            <summary>
            Interface for notifying observers that connection to the cluster has been lost.
            </summary>
        </member>
        <member name="M:Orleans.IClusterConnectionStatusListener.NotifyGatewayCountChanged(System.Int32,System.Int32)">
            <summary>
            Notifies this client that the number of connected gateways has changed
            </summary>
            <param name="currentNumberOfGateways">
            The current number of gateways.
            </param>
            <param name="previousNumberOfGateways">
            The previous number of gateways.
            </param>
        </member>
        <member name="M:Orleans.IClusterConnectionStatusListener.NotifyClusterConnectionLost">
            <summary>
            Notifies this client that the connection to the cluster has been lost.
            </summary>
        </member>
        <member name="T:Orleans.IInternalClusterClient">
            <summary>
            The internal-facing client interface.
            </summary>
        </member>
        <member name="T:Orleans.IInternalGrainFactory">
            <summary>
            The internal grain factory interface.
            </summary>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Creates a reference to the provided object.
            </summary>
            <typeparam name="TGrainObserverInterface">The interface which interface.</typeparam>
            <param name="obj">The object.</param>
            <returns>A reference to the provided object.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainType,Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainType">The type of the target.</param>
            <param name="destination">The destination silo.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainId">The id of the target.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.
            </returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Casts the provided <paramref name="grain"/> to the provided <paramref name="interfaceType"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="interfaceType">The resulting interface type.</param>
            <returns>A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="T:Orleans.InterfaceToImplementationMappingCache">
            <summary>
            Maintains a map between grain classes and corresponding interface-implementation mappings.
            </summary>
        </member>
        <member name="T:Orleans.InterfaceToImplementationMappingCache.Entry">
            <summary>
            Maps a grain interface method's <see cref="T:System.Reflection.MethodInfo"/> to an implementation's <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Orleans.InterfaceToImplementationMappingCache.Entry.ImplementationMethod">
            <summary>
            Gets the grain implementation <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Orleans.InterfaceToImplementationMappingCache.Entry.InterfaceMethod">
            <summary>
            Gets the grain interface <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Orleans.InterfaceToImplementationMappingCache.Entry.ConstructedGenericMethods">
            <summary>
            Gets the constructed generic instances of this method.
            </summary>
        </member>
        <member name="F:Orleans.InterfaceToImplementationMappingCache.mappings">
            <summary>
            The map from implementation types to interface types to map of method to method infos.
            </summary>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.GetOrCreate(System.Type,System.Type)">
            <summary>
            Returns a mapping from method id to method info for the provided implementation and interface types.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <param name="interfaceType">The interface type.</param>
            <returns>
            A mapping from method id to method info.
            </returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateInterfaceToImplementationMap(System.Type)">
            <summary>
            Maps the interfaces of the provided <paramref name="implementationType"/>.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>The mapped interface.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.IDhtGrainDirectory">
            <summary>
            Recursive distributed operations on grain directories.
            Each operation may forward the request to a remote owner, increasing the hopCount.
            
            The methods here can be called remotely (where extended by IRemoteGrainDirectory) or
            locally (where extended by ILocalGrainDirectory)
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.RegisterAsync(Orleans.Runtime.GrainAddress,System.Int32)">
            <summary>
            Record a new grain activation by adding it to the directory.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the new activation.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>The registered address and the version associated with this directory mapping.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.RegisterAsync(Orleans.Runtime.GrainAddress,Orleans.Runtime.GrainAddress,System.Int32)">
            <summary>
            Record a new grain activation by adding it to the directory.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the new activation.</param>
            <param name="currentRegistration">The existing registration, which may be null.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>The registered address and the version associated with this directory mapping.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.UnregisterAsync(Orleans.Runtime.GrainAddress,Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Removes the record for an existing activation from the directory service.
            This is used when an activation is being deleted.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to remove.</param>
            <param name="hopCount">Counts recursion depth across silos.</param>
            <param name="cause">The reason for deregistration.</param>
            <returns>An acknowledgement that the deregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.UnregisterManyAsync(System.Collections.Generic.List{Orleans.Runtime.GrainAddress},Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Unregister a batch of addresses at once
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="addresses">The addresses to deregister.</param>
            <param name="hopCount">Counts recursion depth across silos.</param>
            <param name="cause">The reason for deregistration.</param>
            <returns>An acknowledgement that the unregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.DeleteGrainAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Removes all directory information about a grain.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain.</param>
            <param name="hopCount">Counts recursion depth across silos.</param>
            <returns>
            An acknowledgement that the deletion has completed.
            </returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IDhtGrainDirectory.LookupAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Fetches complete directory information for a grain.
            If there is no local information, then this method will query the appropriate remote directory node.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain to look up.</param>
            <param name="hopCount">Counts recursion depth across silos.</param>
            <returns>A list of all known activations of the grain, and the e-tag.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.AddressAndTag">
            <summary>
            Represents the address of a grain as well as a version tag.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.AddressAndTag.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.AddressAndTag.VersionTag">
            <summary>
            The version of this entry.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.UnregistrationCause">
            <summary>
            Indicates the reason for removing activations from the directory.
            This influences the conditions that are applied when determining whether or not to remove an entry.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.Force">
            <summary>
            Remove the directory entry forcefully, without any conditions
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.NonexistentActivation">
            <summary>
            Remove the directory entry only if it is not too fresh (to avoid races on new registrations)
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainLocator">
            <summary>
            Used to locate Grain activation in the cluster
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.Register(Orleans.Runtime.GrainAddress,Orleans.Runtime.GrainAddress)">
            <summary>
            Registers the provided address in the appropriate grain directory.
            </summary>
            <param name="address">The address to register.</param>
            <returns>The grain address which is registered in the directory immediately following this call.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.Unregister(Orleans.Runtime.GrainAddress,Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Deregisters a grain address from the directory.
            </summary>
            <param name="address">The address to deregister.</param>
            <param name="cause">The cause for deregistration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.Lookup(Orleans.Runtime.GrainId)">
            <summary>
            Finds the corresponding address for a grain.
            </summary>
            <param name="grainId">The grain id.</param>
            <returns>The address corresponding to the specified grain id, or <see langword="null"/> if the grain is not currently registered.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.UpdateCache(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Updates the cache with a grain placement decision or known activation address.
            </summary>
            <param name="grainId">The grain identifier.</param>
            <param name="siloAddress">The silo which may host the grain.</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.InvalidateCache(Orleans.Runtime.GrainId)">
            <summary>
            Invalidates any lookup cache entry associated with the provided grain id.
            </summary>
            <param name="grainId">
            The grain id.
            </param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.InvalidateCache(Orleans.Runtime.GrainAddress)">
            <summary>
            Removes the specified address from the lookup cache.
            </summary>
            <param name="address">
            The grain address to invalidate.
            </param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainLocator.TryLookupInCache(Orleans.Runtime.GrainId,Orleans.Runtime.GrainAddress@)">
            <summary>
            Attempts to find the grain address for the provided grain id in the local lookup cache.
            </summary>
            <param name="grainId">The grain id to find.</param>
            <param name="address">The resulting grain address, if found, or <see langword="null"/> if not found.</param>
            <returns>A value indicating whether a valid entry was found.</returns>
        </member>
        <member name="T:Orleans.GrainReferences.GrainReferenceActivator">
            <summary>
            The central point for creating <see cref="T:Orleans.Runtime.GrainReference"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivator.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Orleans.GrainReferences.IGrainReferenceActivatorProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainReferences.GrainReferenceActivator"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="providers">The collection of grain reference activator providers.</param>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivator.CreateReference(Orleans.Runtime.GrainId,Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Creates a grain reference pointing to the specified grain id and implementing the specified grain interface type.
            </summary>
            <param name="grainId">The grain id.</param>
            <param name="interfaceType">The grain interface type.</param>
            <returns>A new grain reference.</returns>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivator.CreateActivator(Orleans.Runtime.GrainType,Orleans.Runtime.GrainInterfaceType)">
            <summary>
            Creates a grain reference activator for the provided arguments.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="interfaceType">the grain interface type.</param>
            <returns>An activator for the provided arguments.</returns>
            <exception cref="T:System.InvalidOperationException">No suitable activator was found.</exception>
        </member>
        <member name="T:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider">
            <summary>
            Creates grain references which do not have any specified grain interface, only a target grain id.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.#ctor(Orleans.Runtime.Versions.GrainVersionManifest,Orleans.Serialization.Serializers.CodecProvider,Orleans.Serialization.Cloning.CopyContextPool,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider"/> class.
            </summary>
            <param name="manifest">The grain version manifest.</param>
            <param name="copyContextPool">The copy context pool.</param>
            <param name="codecProvider">The serialization codec provider.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.TryGet(Orleans.Runtime.GrainType,Orleans.Runtime.GrainInterfaceType,Orleans.GrainReferences.IGrainReferenceActivator@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.UntypedGrainReferenceActivator">
            <summary>
            Activator for grain references which have no specified grain interface, only a target grain id.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.UntypedGrainReferenceActivator.#ctor(Orleans.Runtime.GrainReferenceShared)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.UntypedGrainReferenceActivator"/> class.
            </summary>
            <param name="shared">The shared functionality for all grains of a given type.</param>
        </member>
        <member name="M:Orleans.GrainReferences.UntypedGrainReferenceActivatorProvider.UntypedGrainReferenceActivator.CreateReference(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainReferences.RpcProvider">
            <summary>
            Provides functionality for mapping from a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> to the corresponding generated proxy type.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.RpcProvider.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Serialization.Configuration.TypeManifestOptions},Orleans.Metadata.GrainInterfaceTypeResolver,Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Initializes a new  instance of the <see cref="T:Orleans.GrainReferences.RpcProvider"/> class.
            </summary>
            <param name="config">The local type manifest.</param>
            <param name="resolver">The grain interface type to grain type resolver.</param>
            <param name="typeConverter">The type converter, for generic parameter.</param>
        </member>
        <member name="M:Orleans.GrainReferences.RpcProvider.TryGet(Orleans.Runtime.GrainInterfaceType,System.Type@)">
            <summary>
            Gets the generated proxy object type corresponding to the specified <see cref="T:Orleans.Runtime.GrainInterfaceType"/>.
            </summary>
            <param name="interfaceType">The grain interface type.</param>
            <param name="result">The proxy object type.</param>
            <returns>A value indicating whether a suitable type was found and was able to be constructed.</returns>
        </member>
        <member name="T:Orleans.GrainReferences.GrainReferenceActivatorProvider">
            <summary>
            Creates grain references using generated proxy objects.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivatorProvider.#ctor(System.IServiceProvider,Orleans.Metadata.GrainPropertiesResolver,Orleans.GrainReferences.RpcProvider,Orleans.Serialization.Cloning.CopyContextPool,Orleans.Serialization.Serializers.CodecProvider,Orleans.Runtime.Versions.GrainVersionManifest)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainReferences.GrainReferenceActivatorProvider"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="propertiesResolver">The grain property resolver.</param>
            <param name="rpcProvider">The proxy object type provider.</param>
            <param name="copyContextPool">The copy context pool.</param>
            <param name="codecProvider">The serialization codec provider.</param>
            <param name="grainVersionManifest">The grain version manifest.</param>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivatorProvider.TryGet(Orleans.Runtime.GrainType,Orleans.Runtime.GrainInterfaceType,Orleans.GrainReferences.IGrainReferenceActivator@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainReferences.GrainReferenceActivatorProvider.GrainReferenceActivator">
            <summary>
            Creates grain references for a given grain type and grain interface type.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.GrainReferenceActivatorProvider.GrainReferenceActivator.#ctor(System.Type,Orleans.Runtime.GrainReferenceShared)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.GrainReferences.GrainReferenceActivatorProvider.GrainReferenceActivator"/> class.
            </summary>
            <param name="referenceType">The generated proxy object type.</param>
            <param name="shared">The functionality shared between all grain references for a specified grain type and grain interface type.</param>
        </member>
        <member name="T:Orleans.GrainReferences.IGrainReferenceActivatorProvider">
            <summary>
            Functionality for getting the appropriate <see cref="T:Orleans.GrainReferences.IGrainReferenceActivator"/> for a given <see cref="T:Orleans.Runtime.GrainType"/> and <see cref="T:Orleans.Runtime.GrainInterfaceType"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.IGrainReferenceActivatorProvider.TryGet(Orleans.Runtime.GrainType,Orleans.Runtime.GrainInterfaceType,Orleans.GrainReferences.IGrainReferenceActivator@)">
            <summary>
            Gets a grain reference activator for the provided arguments.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="interfaceType">The grain interface type.</param>
            <param name="activator">The grain activator.</param>
            <returns>A value indicating whether a suitable grain activator was found.</returns>
        </member>
        <member name="T:Orleans.GrainReferences.IGrainReferenceActivator">
            <summary>
            Creates grain references.
            </summary>
        </member>
        <member name="M:Orleans.GrainReferences.IGrainReferenceActivator.CreateReference(Orleans.Runtime.GrainId)">
            <summary>
            Creates a new grain reference.
            </summary>
            <param name="grainId">The grain id.</param>
            <returns>A new grain reference.</returns>
        </member>
        <member name="T:Orleans.ClusterClientLifecycle">
            <summary>
            Implementation of <see cref="T:Orleans.IClusterClientLifecycle"/>.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClientLifecycle.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClusterClientLifecycle"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:Orleans.IClusterClientLifecycle">
            <summary>
            A <see cref="T:Orleans.ILifecycleObservable"/> marker type for client lifecycles.
            </summary>
        </member>
        <member name="T:Orleans.LifecycleSubject">
            <summary>
            Provides functionality for observing a lifecycle.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>Single use, does not support multiple start/stop cycles.</description></item>
            <item><description>Once started, no other observers can be subscribed.</description></item>
            <item><description>OnStart starts stages in order until first failure or cancellation.</description></item>
            <item><description>OnStop stops states in reverse order starting from highest started stage.</description></item>
            <item><description>OnStop stops all stages regardless of errors even if canceled canceled.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Orleans.LifecycleSubject.GetStageName(System.Int32)">
            <summary>
            Gets the name of the specified numeric stage.
            </summary>
            <param name="stage">The stage number.</param>
            <returns>The name of the stage.</returns>
        </member>
        <member name="M:Orleans.LifecycleSubject.GetStageNames(System.Type)">
            <summary>
            Gets the collection of all stage numbers and their corresponding names.
            </summary>
            <seealso cref="T:Orleans.ServiceLifecycleStage"/>
            <param name="type">The lifecycle stage class.</param>
            <returns>The collection of all stage numbers and their corresponding names.</returns>
        </member>
        <member name="M:Orleans.LifecycleSubject.PerfMeasureOnStart(System.Int32,System.TimeSpan)">
            <summary>
            Logs the observed performance of an <see cref="M:Orleans.LifecycleSubject.OnStart(System.Threading.CancellationToken)"/> call.
            </summary>
            <param name="stage">The stage.</param>
            <param name="elapsed">The period of time which elapsed before <see cref="M:Orleans.LifecycleSubject.OnStart(System.Threading.CancellationToken)"/> completed once it was initiated.</param>
        </member>
        <member name="M:Orleans.LifecycleSubject.OnStart(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.LifecycleSubject.OnStartStageCompleted(System.Int32)">
            <summary>
            Signifies that <see cref="M:Orleans.LifecycleSubject.OnStart(System.Threading.CancellationToken)"/> completed.
            </summary>
            <param name="stage">The stage which completed.</param>
        </member>
        <member name="M:Orleans.LifecycleSubject.PerfMeasureOnStop(System.Int32,System.TimeSpan)">
            <summary>
            Logs the observed performance of an <see cref="M:Orleans.LifecycleSubject.OnStop(System.Threading.CancellationToken)"/> call.
            </summary>
            <param name="stage">The stage.</param>
            <param name="elapsed">The period of time which elapsed before <see cref="M:Orleans.LifecycleSubject.OnStop(System.Threading.CancellationToken)"/> completed once it was initiated.</param>
        </member>
        <member name="M:Orleans.LifecycleSubject.OnStop(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.LifecycleSubject.OnStopStageCompleted(System.Int32)">
            <summary>
            Signifies that <see cref="M:Orleans.LifecycleSubject.OnStop(System.Threading.CancellationToken)"/> completed.
            </summary>
            <param name="stage">The stage which completed.</param>
        </member>
        <member name="T:Orleans.LifecycleSubject.OrderedObserver">
            <summary>
            Represents a <see cref="T:Orleans.ILifecycleObservable"/>'s participation in a given lifecycle stage.
            </summary>
        </member>
        <member name="P:Orleans.LifecycleSubject.OrderedObserver.Observer">
            <summary>
            Gets the observer.
            </summary>
        </member>
        <member name="P:Orleans.LifecycleSubject.OrderedObserver.Stage">
            <summary>
            Gets the stage which the observer is participating in.
            </summary>
        </member>
        <member name="M:Orleans.LifecycleSubject.OrderedObserver.#ctor(System.Int32,Orleans.ILifecycleObserver)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.LifecycleSubject.OrderedObserver"/> class.
            </summary>
            <param name="stage">The stage which the observer is participating in.</param>
            <param name="observer">The participating observer.</param>
        </member>
        <member name="M:Orleans.LifecycleSubject.OrderedObserver.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ServiceLifecycleStage">
            <summary>
            Lifecycle stages of an Orleans client or silo.
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.First">
            <summary>
            First valid stage in service's lifecycle
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeInitialize">
            <summary>
            Initialize runtime
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeServices">
            <summary>
            Start runtime services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeStorageServices">
            <summary>
            Initialize runtime storage
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeGrainServices">
            <summary>
            Start runtime services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.AfterRuntimeGrainServices">
            <summary>
            After runtime services have started.
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.ApplicationServices">
            <summary>
            Start application layer services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.BecomeActive">
            <summary>
            Service will be active after this step.
            It should only be used by the membership oracle 
            and the gateway, no other component should run
            at this stage
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.Active">
            <summary>
            Service is active.
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.Last">
            <summary>
            Last valid stage in service's lifecycle
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainBindings">
            <summary>
            Describes the bindings for a given grain type.
            </summary>
            <remarks>
            Bindings are a way to declaratively connect grains with other resources.
            </remarks>
        </member>
        <member name="M:Orleans.Metadata.GrainBindings.#ctor(Orleans.Runtime.GrainType,System.Collections.Immutable.ImmutableArray{System.Collections.Immutable.ImmutableDictionary{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainBindings"/> class.
            </summary>
            <param name="grainType">The grain type.</param>
            <param name="bindings">The bindings for the specified grain type.</param>
        </member>
        <member name="P:Orleans.Metadata.GrainBindings.GrainType">
            <summary>
            Gets the grain type.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainBindings.Bindings">
            <summary>
            Gets the bindings for the specified grain type.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainBindingsResolver">
            <summary>
            Resolves bindings for grain types.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainBindingsResolver.#ctor(Orleans.Runtime.IClusterManifestProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainBindingsResolver"/> class.
            </summary>
            <param name="clusterManifestProvider">
            The cluster manifest provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.GrainBindingsResolver.GetBindings(Orleans.Runtime.GrainType)">
            <summary>
            Gets bindings for the provided grain type.
            </summary>
            <param name="grainType">
            The grain type.
            </param>
            <returns>The grain bindings.</returns>
        </member>
        <member name="M:Orleans.Metadata.GrainBindingsResolver.GetAllBindings">
            <summary>
            Gets all bindings.
            </summary>
            <returns>The collection of all grain bindings.</returns>
        </member>
        <member name="T:Orleans.Metadata.GrainInterfaceTypeResolver">
            <summary>
            Associates a <see cref="T:Orleans.Runtime.GrainInterfaceType"/> with a <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceTypeResolver.#ctor(System.Collections.Generic.IEnumerable{Orleans.Runtime.IGrainInterfaceTypeProvider},Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainInterfaceTypeResolver"/> class.
            </summary>
            <param name="providers">
            The collection of grain interface type providers.
            </param>
            <param name="typeConverter">
            The type converter, used for generic parameter names.
            </param>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceTypeResolver.GetGrainInterfaceType(System.Type)">
            <summary>
            Returns the <see cref="T:Orleans.Runtime.GrainInterfaceType"/> for the provided interface.
            </summary>
            <param name="type">The grain interface.</param>
            <returns>The <see cref="T:Orleans.Runtime.GrainInterfaceType"/> for the provided interface.</returns>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceTypeResolver.GetGrainInterfaceTypeByConvention(System.Type)">
            <summary>
            Gets a grain interface type based upon the default conventions.
            </summary>
            <param name="type">The grain interface type.</param>
            <returns>The grain interface type name.</returns>
        </member>
        <member name="T:Orleans.Metadata.GrainPropertiesResolver">
            <summary>
            Responsible for resolving <see cref="T:Orleans.Metadata.GrainProperties"/> for <see cref="T:Orleans.Runtime.GrainType"/> values.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainPropertiesResolver.#ctor(Orleans.Runtime.IClusterManifestProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainPropertiesResolver"/> class.
            </summary>
            <param name="clusterManifestProvider">
            The cluster manifest provider.
            </param>
        </member>
        <member name="M:Orleans.Metadata.GrainPropertiesResolver.GetGrainProperties(Orleans.Runtime.GrainType)">
            <summary>
            Gets the grain properties for the provided type.
            </summary>
            <param name="grainType">
            The grain type.
            </param>
            <returns>
            The grain properties.
            </returns>
        </member>
        <member name="M:Orleans.Metadata.GrainPropertiesResolver.TryGetGrainProperties(Orleans.Runtime.GrainType,Orleans.Metadata.GrainProperties@)">
            <summary>
            Gets the grain properties for the provided type.
            </summary>
            <param name="grainType">
            The grain type.
            </param>
            <param name="properties">
            The grain properties.
            </param>
            <returns>
            A value indicating whether grain properties could be found for the provided grain type.
            </returns>
        </member>
        <member name="T:Orleans.Metadata.GrainTypeResolver">
            <summary>
            Associates a <see cref="T:Orleans.Runtime.GrainType"/> with a grain class.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainTypeResolver.#ctor(System.Collections.Generic.IEnumerable{Orleans.Metadata.IGrainTypeProvider},Orleans.Serialization.TypeSystem.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.GrainTypeResolver"/> class.
            </summary>
            <param name="resolvers">
            The grain type name providers.
            </param>
            <param name="argumentFormatter">
            The type converter, used to format generic parameters.
            </param>
        </member>
        <member name="M:Orleans.Metadata.GrainTypeResolver.GetGrainType(System.Type)">
            <summary>
            Returns the grain type for the provided class.
            </summary>
            <param name="type">The grain class.</param>
            <returns>The grain type for the provided class.</returns>
        </member>
        <member name="T:Orleans.Metadata.ImplementedInterfaceProvider">
            <summary>
            Populates grain interface properties with the grain interfaces implemented by a grain class.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.ImplementedInterfaceProvider.#ctor(Orleans.Metadata.GrainInterfaceTypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.ImplementedInterfaceProvider"/> class.
            </summary>
            <param name="interfaceTypeResolver">The interface type resolver.</param>
        </member>
        <member name="M:Orleans.Metadata.ImplementedInterfaceProvider.Populate(System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Metadata.ImplementedInterfaceProvider.IsGrainInterface(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a grain interface type.
            </summary>
            <param name="type">The type to inspect.</param>
            <returns>A value indicating whether the specified type is a grain interface type.</returns>
        </member>
        <member name="T:Orleans.Metadata.TypeNameGrainPropertiesProvider">
            <summary>
            Populates type names on grain properties and grain interface properties.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.TypeNameGrainPropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Metadata.TypeNameGrainPropertiesProvider.Populate(System.Type,Orleans.Runtime.GrainInterfaceType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Messaging.GatewayManager">
             <summary>
             The GatewayManager class holds the list of known gateways, as well as maintaining the list of "dead" gateways.
            
             The known list can come from one of two places: the full list may appear in the client configuration object, or
             the config object may contain an IGatewayListProvider delegate. If both appear, then the delegate takes priority.
             </summary>
        </member>
        <member name="M:Orleans.Messaging.GatewayManager.GetLiveGateway">
             <summary>
             Selects a gateway to use for a new bucket.
            
             Note that if a list provider delegate was given, the delegate is invoked every time this method is called.
             This method performs caching to avoid hammering the ultimate data source.
            
             This implementation does a simple round robin selection. It assumes that the gateway list from the provider
             is in the same order every time.
             </summary>
             <returns></returns>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListProvider">
            <summary>
            Interface that provides Orleans gateways information.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.InitializeGatewayListProvider">
            <summary>
            Initializes the provider, will be called before all other methods.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.GetGateways">
            <summary>
            Returns the list of gateways (silos) that can be used by a client to connect to Orleans cluster.
            The Uri is in the form of: "gwy.tcp://IP:port/Generation". See Utils.ToGatewayUri and Utils.ToSiloAddress for more details about Uri format.
            </summary>
            <returns>The list of gateway endpoints.</returns>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.MaxStaleness">
            <summary>
            Gets the period of time between refreshes.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.IsUpdatable">
            <summary>
            Gets a value indicating whether this IGatewayListProvider ever refreshes its returned information, or always returns the same gateway list.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.StaticGatewayListProvider">
            <summary>
            <see cref="T:Orleans.Messaging.IGatewayListProvider"/> implementation which returns a static list, configured via <see cref="T:Orleans.Configuration.StaticGatewayListProviderOptions"/>.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.StaticGatewayListProvider.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Configuration.StaticGatewayListProviderOptions},Microsoft.Extensions.Options.IOptions{Orleans.Configuration.GatewayOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Messaging.StaticGatewayListProvider"/> class.
            </summary>
            <param name="options">The specific options.</param>
            <param name="gatewayOptions">The general gateway options.</param>
        </member>
        <member name="M:Orleans.Messaging.StaticGatewayListProvider.InitializeGatewayListProvider">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Messaging.StaticGatewayListProvider.GetGateways">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Messaging.StaticGatewayListProvider.MaxStaleness">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Messaging.StaticGatewayListProvider.IsUpdatable">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.ClientProviderRuntime">
            <summary>
            <see cref="T:Orleans.Providers.IProviderRuntime"/> for clients.
            </summary>
            <seealso cref="T:Orleans.Providers.IProviderRuntime" />
        </member>
        <member name="M:Orleans.Providers.ClientProviderRuntime.#ctor(Orleans.IInternalGrainFactory,System.IServiceProvider,Orleans.ClientGrainContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.ClientProviderRuntime"/> class.
            </summary>
            <param name="grainFactory">The grain factory.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="clientContext">The client context.</param>
        </member>
        <member name="P:Orleans.Providers.ClientProviderRuntime.GrainFactory">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.Providers.ClientProviderRuntime.ServiceProvider">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Providers.ClientProviderRuntime.BindExtension``2(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Providers.IControllable">
            <summary>
            A general interface for controllable components inside Orleans runtime.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IControllable.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            A function to execute a control command.
            </summary>
            <param name="command">A serial number of the command.</param>
            <param name="arg">An opaque command argument.</param>
            <returns>The value returned from the command handler.</returns>
        </member>
        <member name="T:Orleans.Providers.IProviderRuntime">
            <summary>
            Interface to allow callbacks from providers into their assigned provider-manager.
            This allows access to runtime functionality, such as logging.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.GrainFactory">
            <summary>
            Gets factory for getting references to grains.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceProvider">
            <summary>
            Gets service provider for dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.BindExtension``2(System.Func{``0})">
            <summary>
            Binds an extension to an addressable object, if not already done.
            </summary>
            <typeparam name="TExtension">The type of the extension (e.g. StreamConsumerExtension).</typeparam>
            <typeparam name="TExtensionInterface">The public interface type of the implementation.</typeparam>
            <param name="newExtensionFunc">A factory function that constructs a new extension object.</param>
            <returns>A tuple, containing first the extension and second an addressable reference to the extension's interface.</returns>
        </member>
        <member name="T:Orleans.Providers.ProviderInitializationException">
            <summary>
            Exception thrown whenever a provider has failed to be initialized.
            </summary>
        </member>
        <member name="M:Orleans.Providers.ProviderInitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.ProviderInitializationException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Providers.ProviderInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.ProviderInitializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Providers.ProviderInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.ProviderInitializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Providers.ProviderInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.ProviderInitializationException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Networking.Shared.MemoryPoolBlock">
            <summary>
            Block tracking object used by the byte buffer memory pool. A slab is a large allocation which is divided into smaller blocks. The
            individual blocks are then treated as independent array segments.
            </summary>
        </member>
        <member name="M:Orleans.Networking.Shared.MemoryPoolBlock.#ctor(Orleans.Networking.Shared.SlabMemoryPool,Orleans.Networking.Shared.MemoryPoolSlab,System.Int32,System.Int32)">
            <summary>
            This object cannot be instantiated outside of the static Create method
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.MemoryPoolBlock.Pool">
            <summary>
            Back-reference to the memory pool which this block was allocated from. It may only be returned to this pool.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.MemoryPoolBlock.Slab">
            <summary>
            Back-reference to the slab from which this block was taken, or null if it is one-time-use memory.
            </summary>
        </member>
        <member name="T:Orleans.Networking.Shared.MemoryPoolSlab">
            <summary>
            Slab tracking object used by the byte buffer memory pool. A slab is a large allocation which is divided into smaller blocks. The
            individual blocks are then treated as independent array segments.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.MemoryPoolSlab._gcHandle">
            <summary>
            This handle pins the managed array in memory until the slab is disposed. This prevents it from being
            relocated and enables any subsections of the array to be used as native memory pointers to P/Invoked API calls.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.MemoryPoolSlab.IsActive">
            <summary>
            True as long as the blocks from this slab are to be considered returnable to the pool. In order to shrink the
            memory pool size an entire slab must be removed. That is done by (1) setting IsActive to false and removing the
            slab from the pool's _slabs collection, (2) as each block currently in use is Return()ed to the pool it will
            be allowed to be garbage collected rather than re-pooled, and (3) when all block tracking objects are garbage
            collected and the slab is no longer references the slab will be garbage collected and the memory unpinned will
            be unpinned by the slab's Dispose.
            </summary>
        </member>
        <member name="T:Orleans.Networking.Shared.SlabMemoryPool">
            <summary>
            Used to allocate and distribute re-usable blocks of memory.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._blockSize">
            <summary>
            The size of a block. 4096 is chosen because most operating systems use 4k pages.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._blockCount">
            <summary>
            Allocating 32 contiguous blocks per slab makes the slab size 128k. This is larger than the 85k size which will place the memory
            in the large object heap. This means the GC will not try to relocate this array, so the fact it remains pinned does not negatively
            affect memory management's compactification.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.SlabMemoryPool.MaxBufferSize">
            <summary>
            Max allocation block size for pooled blocks,
            larger values can be leased but they will be disposed after use rather than returned to the pool.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.SlabMemoryPool.BlockSize">
            <summary>
            The size of a block. 4096 is chosen because most operating systems use 4k pages.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._slabLength">
            <summary>
            4096 * 32 gives you a slabLength of 128k contiguous bytes allocated per slab
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._blocks">
            <summary>
            Thread-safe collection of blocks which are currently in the pool. A slab will pre-allocate all of the block tracking objects
            and add them to this collection. When memory is requested it is taken from here first, and when it is returned it is re-added.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._slabs">
            <summary>
            Thread-safe collection of slabs which have been allocated by this pool. As long as a slab is in this collection and slab.IsActive,
            the blocks will be added to _blocks when returned.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool._isDisposed">
            <summary>
            This is part of implementing the IDisposable pattern.
            </summary>
        </member>
        <member name="F:Orleans.Networking.Shared.SlabMemoryPool.AnySize">
            <summary>
            This default value passed in to Rent to use the default value for the pool.
            </summary>
        </member>
        <member name="M:Orleans.Networking.Shared.SlabMemoryPool.Lease">
            <summary>
            Called to take a block from the pool.
            </summary>
            <returns>The block that is reserved for the called. It must be passed to Return when it is no longer being used.</returns>
        </member>
        <member name="M:Orleans.Networking.Shared.SlabMemoryPool.AllocateSlab">
            <summary>
            Internal method called when a block is requested and the pool is empty. It allocates one additional slab, creates all of the
            block tracking objects, and adds them all to the pool.
            </summary>
        </member>
        <member name="M:Orleans.Networking.Shared.SlabMemoryPool.Return(Orleans.Networking.Shared.MemoryPoolBlock)">
            <summary>
            Called to return a block to the pool. Once Return has been called the memory no longer belongs to the caller, and
            Very Bad Things will happen if the memory is read of modified subsequently. If a caller fails to call Return and the
            block tracking object is garbage collected, the block tracking object's finalizer will automatically re-create and return
            a new tracking object into the pool. This will only happen if there is a bug in the server, however it is necessary to avoid
            leaving "dead zones" in the slab due to lost block tracking objects.
            </summary>
            <param name="block">The block to return. It must have been acquired by calling Lease on the same memory pool instance.</param>
        </member>
        <member name="T:Orleans.Networking.Shared.SocketConnectionOptions">
            <summary>
            Options for configuring socket connections.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.SocketConnectionOptions.IOQueueCount">
            <summary>
            Gets or sets the number of I/O queues used to process requests. Set to 0 to directly schedule I/O to the ThreadPool.
            </summary>
            <remarks>
            Defaults to <see cref="P:System.Environment.ProcessorCount" /> rounded down and clamped between 1 and 16.
            </remarks>
        </member>
        <member name="P:Orleans.Networking.Shared.SocketConnectionOptions.NoDelay">
            <summary>
            Gets or sets a value indicating whether the Nagle algorithm should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Orleans.Networking.Shared.SocketConnectionOptions.MemoryPoolFactory">
            <summary>
            Gets or sets the memory pool factory.
            </summary>
        </member>
        <member name="M:Orleans.Networking.Shared.SocketExtensions.EnableFastPath(System.Net.Sockets.Socket)">
            <summary>
            Enables TCP Loopback Fast Path on a socket.
            See https://blogs.technet.microsoft.com/wincat/2012/12/05/fast-tcp-loopback-performance-and-low-latency-with-windows-server-2012-tcp-loopback-fast-path/
            for more information.
            </summary>
            <param name="socket">The socket for which FastPath should be enabled.</param>
        </member>
        <member name="T:Orleans.Storage.GrainStorageHelpers">
            <summary>
            Utility functions for grain storage.
            </summary>
        </member>
        <member name="M:Orleans.Storage.GrainStorageHelpers.GetGrainStorage(System.Type,System.IServiceProvider)">
            <summary>
            Gets the <see cref="T:Orleans.Storage.IGrainStorage"/> associated with the specified grain type, which must derive from <see cref="T:Orleans.Grain`1"/>.
            </summary>
            <param name="grainType">The grain type, which must derive from <see cref="T:Orleans.Grain`1"/>.</param>
            <param name="services">The service provider.</param>
            <returns>
            The <see cref="T:Orleans.Storage.IGrainStorage"/> associated with the specified grain type, which must derive from <see cref="T:Orleans.Grain`1"/>.
            </returns>
        </member>
        <member name="T:Orleans.Storage.IGrainStorage">
            <summary>
            Interface to be implemented for a storage able to read and write Orleans grain state data.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.ReadStateAsync``1(System.String,Orleans.Runtime.GrainId,Orleans.IGrainState{``0})">
            <summary>Read data function for this storage instance.</summary>
            <param name="stateName">Name of the state for this grain</param>
            <param name="grainId">Grain ID</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <typeparam name="T">The grain state type.</typeparam>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.WriteStateAsync``1(System.String,Orleans.Runtime.GrainId,Orleans.IGrainState{``0})">
            <summary>Write data function for this storage instance.</summary>
            <param name="stateName">Name of the state for this grain</param>
            <param name="grainId">Grain ID</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <typeparam name="T">The grain state type.</typeparam>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.ClearStateAsync``1(System.String,Orleans.Runtime.GrainId,Orleans.IGrainState{``0})">
            <summary>Delete / Clear data function for this storage instance.</summary>
            <param name="stateName">Name of the state for this grain</param>
            <param name="grainId">Grain ID</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <typeparam name="T">The grain state type.</typeparam>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.IRestExceptionDecoder">
            <summary>
            Interface to be optionally implemented by storage to return richer exception details.
            TODO: Remove this interface.  Move to decorator pattern for monitoring purposes. - jbragg
            </summary>
        </member>
        <member name="M:Orleans.Storage.IRestExceptionDecoder.DecodeException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Decode details of the exception.
            </summary>
            <param name="exception">Exception to decode.</param>
            <param name="httpStatusCode">HTTP status code for the error.</param>
            <param name="restStatus">REST status for the error.</param>
            <param name="getExtendedErrors">Whether or not to extract REST error code.</param>
            <returns>A value indicating whether the exception was decoded.</returns>
        </member>
        <member name="T:Orleans.Storage.InconsistentStateException">
            <summary>
            Exception thrown when a storage detects an Etag inconsistency when attempting to perform a WriteStateAsync operation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.IsSourceActivation">
            <summary>
            Gets or sets a value indicating whether this exception occurred on the current activation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.StoredEtag">
            <summary>Gets the Etag value currently held in persistent storage.</summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.CurrentEtag">
            <summary>Gets the Etag value currently help in memory, and attempting to be updated.</summary>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="errorMsg">The error message.</param>
            <param name="storedEtag">The stored ETag.</param>
            <param name="currentEtag">The current ETag.</param>
            <param name="storageException">The inner exception.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="errorMsg">The error message.</param>
            <param name="storedEtag">The stored ETag.</param>
            <param name="currentEtag">The current ETag.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.InconsistentStateException"/> class.
            </summary>
            <param name="storedEtag">The stored ETag.</param>
            <param name="currentEtag">The current ETag.</param>
            <param name="storageException">The storage exception.</param>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Storage.InconsistentStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Storage.IGrainStorageSerializer">
            <summary>
            Common interface for grain state serializers.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IGrainStorageSerializer.Serialize``1(``0)">
            <summary>
            Serializes the object input.
            </summary>
            <param name="input">The object to serialize.</param>
            <typeparam name="T">The input type.</typeparam>
            <returns>The serialized input.</returns>
        </member>
        <member name="M:Orleans.Storage.IGrainStorageSerializer.Deserialize``1(System.BinaryData)">
            <summary>
            Deserializes the provided data.
            </summary>
            <param name="input">The data to deserialize.</param>
            <typeparam name="T">The output type.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Orleans.Storage.GrainStorageSerializerExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Storage.IGrainStorageSerializer"/>.
            </summary>
        </member>
        <member name="M:Orleans.Storage.GrainStorageSerializerExtensions.Deserialize``1(Orleans.Storage.IGrainStorageSerializer,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializes the provided data.
            </summary>
            <param name="serializer">The grain state serializer.</param>
            <param name="input">The data to deserialize.</param>
            <typeparam name="T">The output type.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Orleans.Storage.IStorageProviderSerializerOptions">
            <summary>
            Interface to be implemented by the storage provider options.
            </summary>
        </member>
        <member name="P:Orleans.Storage.IStorageProviderSerializerOptions.GrainStorageSerializer">
            <summary>
            Gets or sets the serializer to use for this storage provider.
            </summary>
        </member>
        <member name="T:Orleans.Storage.DefaultStorageProviderSerializerOptionsConfigurator`1">
            <summary>
            Provides default configuration for <see cref="P:Orleans.Storage.IStorageProviderSerializerOptions.GrainStorageSerializer"/>.
            </summary>
            <typeparam name="TOptions">The options type.</typeparam>
        </member>
        <member name="M:Orleans.Storage.DefaultStorageProviderSerializerOptionsConfigurator`1.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.DefaultStorageProviderSerializerOptionsConfigurator`1"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Orleans.Storage.DefaultStorageProviderSerializerOptionsConfigurator`1.PostConfigure(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Storage.IMemoryStorageGrain">
            <summary>
            Grain interface for internal memory storage grain used by Orleans in-memory storage provider.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.ReadStateAsync``1(System.String)">
            <summary>Async method to cause retrieval of the specified grain state data from memory store.</summary>
            <param name="grainStoreKey">Store key for this grain.</param>
            <returns>Value promise for the currently stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.WriteStateAsync``1(System.String,Orleans.IGrainState{``0})">
            <summary>Async method to cause update of the specified grain state data into memory store.</summary>
            <param name="grainStoreKey">Grain ID.</param>
            <param name="grainState">New state data to be stored for this grain.</param>
            <returns>Completion promise with new eTag for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.DeleteStateAsync``1(System.String,System.String)">
            <param name="grainStoreKey">Store key for this grain.</param>
            <param name="eTag">The previous etag that was read.</param>
            <returns>Completion promise for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.BadProviderConfigException">
            <summary>
            Exception thrown whenever a grain call is attempted with a bad / missing storage provider configuration settings for that grain.
            </summary>
        </member>
        <member name="T:Orleans.Storage.GrainStorageSerializer">
            <summary>
            Provides functionality for serializing and deserializing grain state, delegating to a prefered and fallback implementation of <see cref="T:Orleans.Storage.IGrainStorageSerializer"/>.
            </summary>
        </member>
        <member name="M:Orleans.Storage.GrainStorageSerializer.#ctor(Orleans.Storage.IGrainStorageSerializer,Orleans.Storage.IGrainStorageSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.GrainStorageSerializer"/> class.
            </summary>
            <param name="serializer">The grain storage serializer.</param>
            <param name="fallbackDeserializer">The fallback grain storage serializer.</param>
        </member>
        <member name="M:Orleans.Storage.GrainStorageSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Storage.GrainStorageSerializer.Deserialize``1(System.BinaryData)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Storage.JsonGrainStorageSerializer">
            <summary>
            Grain storage serializer that uses Newtonsoft.Json
            </summary>
        </member>
        <member name="M:Orleans.Storage.JsonGrainStorageSerializer.#ctor(Orleans.Serialization.OrleansJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.JsonGrainStorageSerializer"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Storage.JsonGrainStorageSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Storage.JsonGrainStorageSerializer.Deserialize``1(System.BinaryData)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Storage.OrleansGrainStorageSerializer">
            <summary>
            Grain storage serializer that uses the Orleans <see cref="T:Orleans.Serialization.Serializer"/>.
            </summary>
        </member>
        <member name="M:Orleans.Storage.OrleansGrainStorageSerializer.#ctor(Orleans.Serialization.Serializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Storage.OrleansGrainStorageSerializer"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Orleans.Storage.OrleansGrainStorageSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Storage.OrleansGrainStorageSerializer.Deserialize``1(System.BinaryData)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.LeaseProviders.AcquiredLease">
            <summary>
            Acquired lease
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.ResourceKey">
            <summary>
            The resource key which the lease is attached to 
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.Duration">
            <summary>
            Duration of the acquired lease
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.Token">
            <summary>
            Lease token, which will be null if acquiring or renewing the lease failed
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.StartTimeUtc">
            <summary>
            Caller side start time for this lease, which is when the lease is acquired or renewed
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.AcquiredLease.#ctor(System.String,System.TimeSpan,System.String,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="resourceKey"></param>
            <param name="duration"></param>
            <param name="token"></param>
            <param name="startTimeUtc"></param>
        </member>
        <member name="M:Orleans.LeaseProviders.AcquiredLease.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourceKey"></param>
        </member>
        <member name="T:Orleans.LeaseProviders.AcquireLeaseResult">
            <summary>
            AcquireLeaseResult class, which demonstrates result of acquiring or renewing lease operation
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.AcquiredLease">
            <summary>
            Acquired lease, which will be null if acquire or renew operation failed.
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.StatusCode">
            <summary>
            Response status
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.FailureException">
            <summary>
            If acquiring or renewing the lease failed, this is the exception which caused it. This field would be null if operation succeed.
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.OK">
            <summary>
            Operation succeed
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.LeaseNotAvailable">
            <summary>
            Lease is owned by other entity
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.InvalidToken">
            <summary>
            The token in the AcquiredLease is invalid, which means the lease expired
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.TransientFailure">
            <summary>
            TransientFailure, which should be retriable. 
            </summary>
        </member>
        <member name="T:Orleans.LeaseProviders.LeaseRequest">
            <summary>
            Lease request where you can specify ResourceKey and duration of your lease. 
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.LeaseRequest.ResourceKey">
            <summary>
            The key of the resource where you want to apply the lease on
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.LeaseRequest.Duration">
            <summary>
            Duration of the lease
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.LeaseRequest.#ctor(System.String,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="resourceKey"></param>
            <param name="duration"></param>
        </member>
        <member name="T:Orleans.LeaseProviders.ILeaseProvider">
            <summary>
            Lease provider interface 
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Acquire(System.String,Orleans.LeaseProviders.LeaseRequest[])">
            <summary>
            Batch acquire leases operation
            </summary>
            <param name="category">resource category</param>
            <param name="leaseRequests"></param>
            <returns>Lease acquiring results array, whose order is the same with leaseRequstes</returns>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Renew(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <summary>
            Batch renew lease operation
            </summary>
            <param name="category">resource category</param>
            <param name="aquiredLeases"></param>
            <returns>Lease renew results array, whose order is the same with acquiredLeases</returns>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Release(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <summary>
            Batch release lease operation
            </summary>
            <param name="category">resource category</param>
            <param name="aquiredLeases"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.GetResponseTimeout">
            <inheritdoc />
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="E:Orleans.OutsideRuntimeClient.ClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="E:Orleans.OutsideRuntimeClient.GatewayCountChanged">
            <inheritdoc />
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.NotifyClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.NotifyGatewayCountChanged(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.OrleansJsonSerializationBinder">
            <summary>
            Implementation of <see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder"/> which resolves types using a <see cref="T:Orleans.Serialization.TypeSystem.TypeResolver"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializationBinder.#ctor(Orleans.Serialization.TypeSystem.TypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.OrleansJsonSerializationBinder"/> class.
            </summary>
            <param name="typeResolver">The type resolver.</param>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.OrleansJsonSerializer">
            <summary>
            Utility class for configuring <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to support Orleans types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Serialization.OrleansJsonSerializerOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.OrleansJsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes an object of the specified expected type from the provided input.
            </summary>
            <param name="expectedType">The expected type.</param>
            <param name="input">The input.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes an object to a JSON string.
            </summary>
            <param name="item">The object to serialize.</param>
            <param name="expectedType">The type the deserializer should expect.</param>
        </member>
        <member name="T:Orleans.Serialization.IPAddressConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.IPAddressConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.IPAddressConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.IPAddressConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.GrainIdConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.GrainId"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.GrainIdConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.GrainIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.GrainIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.ActivationIdConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.ActivationId"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.ActivationIdConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.ActivationIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.ActivationIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.SiloAddressJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.SiloAddress"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.SiloAddressJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.SiloAddressJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.SiloAddressJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.MembershipVersionJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.MembershipVersion"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.MembershipVersionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.MembershipVersionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.MembershipVersionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.UniqueKeyConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.UniqueKey"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.UniqueKeyConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.UniqueKeyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.UniqueKeyConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.IPEndPointConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.IPEndPointConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.Serialization.GrainReferenceJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation for <see cref="T:Orleans.Runtime.GrainReference"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceJsonConverter.#ctor(Orleans.GrainReferences.GrainReferenceActivator)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Serialization.GrainReferenceJsonConverter"/> class.
            </summary>
            <param name="referenceActivator">The grain reference activator.</param>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializerSettings.GetDefaultSerializerSettings(System.IServiceProvider)">
            <summary>
            Returns the default serializer settings.
            </summary>
            <param name="services">
            The service provider.
            </param>
            <returns>The default serializer settings.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializerSettings.UpdateSerializerSettings(Newtonsoft.Json.JsonSerializerSettings,System.Boolean,System.Boolean,System.Nullable{Newtonsoft.Json.TypeNameHandling})">
            <summary>
            Updates the provided serializer settings with the specified options.
            </summary>
            <param name="settings">The settings.</param>
            <param name="useFullAssemblyNames">if set to <c>true</c>, use full assembly-qualified names when formatting type names.</param>
            <param name="indentJson">if set to <c>true</c>, indent the formatted JSON.</param>
            <param name="typeNameHandling">The type name handling options.</param>
            <returns>The provided serializer settings.</returns>
        </member>
        <member name="P:Orleans.Statistics.LinuxEnvironmentStatistics.TotalPhysicalMemory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Statistics.LinuxEnvironmentStatistics.CpuUsage">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Statistics.LinuxEnvironmentStatistics.AvailableMemory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Statistics.LinuxEnvironmentStatistics.MemoryUsage">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Statistics.LinuxEnvironmentStatisticsServices.RegisterServices``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers <see cref="T:Orleans.Statistics.LinuxEnvironmentStatistics"/> services.
            </summary>
        </member>
        <member name="T:Orleans.Statistics.LinuxEnvironmentStatisticsValidator">
            <summary>
            Validates <see cref="T:Orleans.Statistics.LinuxEnvironmentStatistics"/> requirements for.
            </summary>
        </member>
        <member name="M:Orleans.Statistics.LinuxEnvironmentStatisticsValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.IMembershipTable">
            <summary>
            Interface for Membership Table.
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.InitializeMembershipTable(System.Boolean)">
            <summary>
            Initializes the membership table, will be called before all other methods
            </summary>
            <param name="tryInitTableVersion">whether an attempt will be made to init the underlying table</param>
        </member>
        <member name="M:Orleans.IMembershipTable.DeleteMembershipTableEntries(System.String)">
            <summary>
            Deletes all table entries of the given clusterId
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.CleanupDefunctSiloEntries(System.DateTimeOffset)">
            <summary>
            Delete all dead silo entries older than <paramref name="beforeDate"/>
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadRow(Orleans.Runtime.SiloAddress)">
            <summary>
            Atomically reads the Membership Table information about a given silo.
            The returned MembershipTableData includes one MembershipEntry entry for a given silo and the 
            TableVersion for this table. The MembershipEntry and the TableVersion have to be read atomically.
            </summary>
            <param name="key">The address of the silo whose membership information needs to be read.</param>
            <returns>The membership information for a given silo: MembershipTableData consisting one MembershipEntry entry and
            TableVersion, read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadAll">
            <summary>
            Atomically reads the full content of the Membership Table.
            The returned MembershipTableData includes all MembershipEntry entry for all silos in the table and the 
            TableVersion for this table. The MembershipEntries and the TableVersion have to be read atomically.
            </summary>
            <returns>The membership information for a given table: MembershipTableData consisting multiple MembershipEntry entries and
            TableVersion, all read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.InsertRow(Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Atomically tries to insert (add) a new MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) New MembershipEntry will be added to the table.
            2) The newly added MembershipEntry will also be added with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, insert of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo already exist in the table
            2) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be inserted.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the insert operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateRow(Orleans.MembershipEntry,System.String,Orleans.TableVersion)">
            <summary>
            Atomically tries to update the MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) The MembershipEntry for this silo will be updated to the new MembershipEntry (the old entry will be fully substituted by the new entry) 
            2) The eTag for the updated MembershipEntry will also be eTag with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, update of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo does not exist in the table
            2) A MembershipEntry for a given silo exist in the table but its etag in the table does not match the provided etag.
            3) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be updated.</param>
            <param name="etag">The etag  for the given MembershipEntry.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the update operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateIAmAlive(Orleans.MembershipEntry)">
            <summary>
            Updates the IAmAlive part (column) of the MembershipEntry for this silo.
            This operation should only update the IAmAlive column and not change other columns.
            This operation is a "dirty write" or "in place update" and is performed without etag validation. 
            With regards to eTags update:
            This operation may automatically update the eTag associated with the given silo row, but it does not have to. It can also leave the etag not changed ("dirty write").
            With regards to TableVersion:
            this operation should not change the TableVersion of the table. It should leave it untouched.
            There is no scenario where this operation could fail due to table semantical reasons. It can only fail due to network problems or table unavailability.
            </summary>
            <param name="entry"></param>
            <returns>Task representing the successful execution of this operation. </returns>
        </member>
        <member name="T:Orleans.IMembershipTableSystemTarget">
            <summary>
            Membership table interface for system target based implementation.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.Version">
            <summary>
            The version part of this TableVersion. Monotonically increasing number.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.VersionEtag">
            <summary>
            The etag of this TableVersion, used for validation of table update operations.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloAddress">
            <summary>
            The silo unique identity (ip:port:epoch). Used mainly by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.Status">
            <summary>
            The silo status. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SuspectTimes">
            <summary>
            The list of silos that suspect this silo. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.ProxyPort">
            <summary>
            Silo to clients TCP port. Set on silo startup.
            </summary>    
        </member>
        <member name="P:Orleans.MembershipEntry.HostName">
            <summary>
            The DNS host name of the silo. Equals to Dns.GetHostName(). Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloName">
            <summary>
            the name of the specific silo instance within a cluster. 
            If running in Azure - the name of this role instance. Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.StartTime">
            <summary>
            Time this silo was started. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.IAmAliveTime">
            <summary>
            the last time this silo reported that it is alive. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="T:Orleans.Threading.RecursiveInterlockedExchangeLock">
            <summary>
            Lightweight recursive lock.
            </summary>
        </member>
        <member name="M:Orleans.Threading.RecursiveInterlockedExchangeLock.Get">
            <summary>
            Acquire the lock, blocking the thread if necessary.
            </summary>
        </member>
        <member name="T:Orleans.Timers.Internal.ITimerManager">
            <summary>
            Provides functionality for managing single-shot timers.
            </summary>
        </member>
        <member name="M:Orleans.Timers.Internal.ITimerManager.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Returns a task which will complete when the specified timespan elapses or the provided cancellation token is canceled.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see langword="true"/> if the timer ran to completion; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Orleans.Timers.Internal.TimerManager`1">
            <summary>
            Manages timers of a specified type, firing them after they expire.
            </summary>
            <typeparam name="T">The timer type.</typeparam>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.MAX_STARVATION">
            <summary>
            The maximum number of times a queue can be denied servicing before servicing is mandatory.
            </summary>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.TIMER_TICK_MILLISECONDS">
            <summary>
            The number of milliseconds between timer servicing ticks.
            </summary>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.AllQueuesLock">
            <summary>
            Lock protecting <see cref="F:Orleans.Timers.Internal.TimerManager`1.allQueues"/>.
            </summary>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.allQueues">
            <summary>
            Collection of all thread-local timer queues.
            </summary>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.threadLocalQueue">
            <summary>
            The queue for the current thread.
            </summary>
        </member>
        <member name="M:Orleans.Timers.Internal.TimerManager`1.Register(`0)">
            <summary>
            Registers a timer.
            </summary>
        </member>
        <member name="M:Orleans.Timers.Internal.TimerManager`1.EnsureCurrentThreadHasQueue">
            <summary>
            Returns the queue for the current thread, creating and registering one if it does not yet exist.
            </summary>
            <returns>The current thread's <see cref="T:Orleans.Timers.Internal.TimerManager`1.ThreadLocalQueue"/>.</returns>
        </member>
        <member name="T:Orleans.Timers.Internal.TimerManager`1.ThreadLocalQueue">
            <summary>
            Holds per-thread timer data.
            </summary>
        </member>
        <member name="F:Orleans.Timers.Internal.TimerManager`1.ThreadLocalQueue.StarvationCount">
            <summary>
            The number of times that this queue has been starved since it was last serviced.
            </summary>
        </member>
        <member name="T:Orleans.Timers.Internal.TimerManager`1.ExpiredTimers">
            <summary>
            Holds timers that have expired and should be fired.
            </summary>
        </member>
        <member name="P:Orleans.Timers.Internal.ITimerCallback.DueTime">
            <summary>
            The UTC time when this timer is due.
            </summary>
        </member>
        <member name="T:Orleans.Timers.Internal.ILinkedList`1">
            <summary>
            Represents a linked list.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="P:Orleans.Timers.Internal.ILinkedList`1.Head">
            <summary>
            Gets or sets the first element in the list.
            This value must never be accessed or modified by user code.
            </summary>
        </member>
        <member name="P:Orleans.Timers.Internal.ILinkedList`1.Tail">
            <summary>
            Gets or sets the last element in the list.
            This value must never be accessed or modified by user code.
            </summary>
        </member>
        <member name="T:Orleans.Timers.Internal.ILinkedListElement`1">
            <summary>
            Represents an element in a linked list.
            </summary>
            <typeparam name="TSelf">Self-type. The type implementing this interface.</typeparam>
        </member>
        <member name="P:Orleans.Timers.Internal.ILinkedListElement`1.Next">
            <summary>
            The next element in the list.
            This value must never be accessed or modified by user code.
            </summary>
        </member>
        <member name="M:Orleans.Timers.Internal.LinkedList.AddTail``2(``0,``1)">
            <summary>
            Appends an item to the tail of a linked list.
            </summary>
            <param name="list">The linked list.</param>
            <param name="element">The element to append.</param>
        </member>
        <member name="M:Orleans.Timers.Internal.LinkedList.Remove``2(``0,``1,``1)">
            <summary>
            Removes an item from a linked list.
            </summary>
            <param name="list">The linked list.</param>
            <param name="previous">The element before <paramref name="current"/>.</param>
            <param name="current">The element to remove.</param>
        </member>
        <member name="T:Orleans.Factory`1">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <returns>The instance.</returns>
        </member>
        <member name="T:Orleans.Factory`2">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <typeparam name="TParam1">The parameter type.</typeparam>
            <returns>The instance.</returns>
        </member>
        <member name="T:Orleans.Factory`3">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <typeparam name="TParam1">The first parameter type.</typeparam>
            <typeparam name="TParam2">The second parameter type.</typeparam>
            <returns>The instance.</returns>
        </member>
        <member name="T:Orleans.Factory`4">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <typeparam name="TParam1">The first parameter type.</typeparam>
            <typeparam name="TParam2">The second parameter type.</typeparam>
            <typeparam name="TParam3">The third parameter type.</typeparam>
            <returns>The instance.</returns>
        </member>
        <member name="T:Orleans.NamedOptionExtensions">
            <summary>
            Extensions for working with named option classes.
            </summary>
        </member>
        <member name="M:Orleans.NamedOptionExtensions.GetOptionsByName``1(System.IServiceProvider,System.String)">
            <summary>
            Gets a named options instance.
            </summary>
            <typeparam name="TOption">The type of the t option.</typeparam>
            <param name="services">The services.</param>
            <param name="name">The name.</param>
            <returns>TOption.</returns>
        </member>
        <member name="T:Orleans.Utilities.ObserverManager`1">
            <summary>
            Maintains a collection of observers.
            </summary>
            <typeparam name="TObserver">
            The observer type.
            </typeparam>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`1.#ctor(System.TimeSpan,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.ObserverManager`1"/> class. 
            </summary>
            <param name="expiration">
            The expiration.
            </param>
            <param name="log">The log.</param>
        </member>
        <member name="T:Orleans.Utilities.ObserverManager`2">
            <summary>
            Maintains a collection of observers.
            </summary>
            <typeparam name="TIdentity">
            The address type, used to identify observers.
            </typeparam>
            <typeparam name="TObserver">
            The observer type.
            </typeparam>
        </member>
        <member name="F:Orleans.Utilities.ObserverManager`2._observers">
            <summary>
            The observers.
            </summary>
        </member>
        <member name="F:Orleans.Utilities.ObserverManager`2._log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.#ctor(System.TimeSpan,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.ObserverManager`2"/> class. 
            </summary>
            <param name="expiration">
            The expiration.
            </param>
            <param name="log">The log.</param>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.GetDateTime">
            <summary>
            Gets or sets the delegate used to get the date and time, for expiry.
            </summary>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.ExpirationDuration">
            <summary>
            Gets or sets the expiration time span, after which observers are lazily removed.
            </summary>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.Count">
            <summary>
            Gets the number of observers.
            </summary>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.Observers">
            <summary>
            Gets a copy of the observers.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.Clear">
            <summary>
            Removes all observers.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.Subscribe(`0,`1)">
            <summary>
            Ensures that the provided <paramref name="observer"/> is subscribed, renewing its subscription.
            </summary>
            <param name="id">
            The observer's identity.
            </param>
            <param name="observer">
            The observer.
            </param>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.Unsubscribe(`0)">
            <summary>
            Ensures that the provided <paramref name="id"/> is unsubscribed.
            </summary>
            <param name="id">
            The observer.
            </param>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.Notify(System.Func{`1,System.Threading.Tasks.Task},System.Func{`1,System.Boolean})">
            <summary>
            Notifies all observers.
            </summary>
            <param name="notification">
            The notification delegate to call on each observer.
            </param>
            <param name="predicate">
            The predicate used to select observers to notify.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.
            </returns>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.Notify(System.Action{`1},System.Func{`1,System.Boolean})">
            <summary>
            Notifies all observers which match the provided <paramref name="predicate"/>.
            </summary>
            <param name="notification">
            The notification delegate to call on each observer.
            </param>
            <param name="predicate">
            The predicate used to select observers to notify.
            </param>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.ClearExpired">
            <summary>
            Removed all expired observers.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Orleans.Utilities.ObserverManager`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Orleans.Utilities.ObserverManager`2.ObserverEntry">
            <summary>
            An observer entry.
            </summary>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.ObserverEntry.Observer">
            <summary>
            Gets or sets the observer.
            </summary>
        </member>
        <member name="P:Orleans.Utilities.ObserverManager`2.ObserverEntry.LastSeen">
            <summary>
            Gets or sets the UTC last seen time.
            </summary>
        </member>
        <member name="T:Orleans.Utilities.TypeConverterExtensions">
            <summary>
            Extensions for working with <see cref="T:Orleans.Serialization.TypeSystem.TypeConverter"/>.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.IsGenericType(Orleans.Runtime.IdSpan)">
            <summary>
            Returns true if the provided type string is a generic type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.GetGenericTypeArity(Orleans.Runtime.IdSpan)">
            <summary>
            Returns the generic arity of the specified grain type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.IsConstructed(Orleans.Runtime.IdSpan)">
            <summary>
            Returns true if the provided type string is a constructed generic type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.GetDeconstructed(Orleans.Runtime.IdSpan)">
            <summary>
            Returns the deconstructed form of the provided generic type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.GetConstructed(Orleans.Serialization.TypeSystem.TypeConverter,Orleans.Runtime.IdSpan,System.Type[])">
            <summary>
            Returns the constructed form of the provided generic type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.GetConstructed(Orleans.Runtime.GenericGrainType,Orleans.Runtime.GenericGrainInterfaceType)">
            <summary>
            Returns the constructed form of the provided generic grain type using the type arguments from the provided constructed interface type.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.TypeConverterExtensions.GetArguments(Orleans.Serialization.TypeSystem.TypeConverter,Orleans.Runtime.IdSpan)">
            <summary>
            Returns the type arguments for the provided constructed generic type string.
            </summary>
        </member>
        <member name="P:Orleans.ReferenceEqualsComparer.Default">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:Orleans.ReferenceEqualsComparer.Equals(System.Object,System.Object)">
            <summary>
            Defines object equality by reference equality (eq, in LISP).
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="P:Orleans.ReferenceEqualsComparer`1.Default">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:Orleans.ReferenceEqualsComparer`1.Equals(`0,`0)">
            <summary>
            Defines object equality by reference equality (eq, in LISP).
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Orleans.SetExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shortcut to create HashSet from IEnumerable that supports type inference
            (which the standard constructor does not)
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Orleans.SetExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.String)">
            <summary>
            ToString every element of an enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toString">Can supply null to use Object.ToString()</param>
            <param name="separator">Before each element, or space if unspecified</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.HostApplicationBuilder)">
            <summary>
            Configures the host app builder to host an Orleans client.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            Note that this method shouldn't be used in conjunction with HostApplicationBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostAppBuilder"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.HostApplicationBuilder,System.Action{Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the host app builder to host an Orleans client.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method shouldn't be used in conjunction with HostApplicationBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostAppBuilder"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.IHostApplicationBuilder)">
            Configures the host app builder to host an Orleans client.
            <summary>
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            Note that this method shouldn't be used in conjunction with IHostApplicationBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostAppBuilder"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.IHostApplicationBuilder,System.Action{Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the host app builder to host an Orleans client.
            </summary>
            <param name="hostAppBuilder">The host app builder.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method shouldn't be used in conjunction with IHostApplicationBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostAppBuilder"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Configures the host builder to host an Orleans client.
            </summary>
            <param name="hostBuilder">The host builder.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            Note that this method should not be used in conjunction with IHostBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostBuilder"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the host builder to host an Orleans client.
            </summary>
            <param name="hostBuilder">The host builder.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method should not be used in conjunction with IHostBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostBuilder"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.UseOrleansClient(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the host builder to host an Orleans client.
            </summary>
            <param name="hostBuilder">The host builder.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The host builder.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method should not be used in conjunction with IHostBuilder.UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostBuilder"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.AddOrleansClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the service collection to host an Orleans client.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The service collection.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method should not be used in conjunction with UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="services"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansClientGenericHostExtensions.AddOrleansClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Orleans.Hosting.IClientBuilder})">
            <summary>
            Configures the service collection to host an Orleans client.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configuration">The configuration.</param>
            <param name="configureDelegate">The delegate used to configure the client.</param>
            <returns>The service collection.</returns>
            <remarks>
            Calling this method multiple times on the same <see cref="T:Orleans.Hosting.IClientBuilder"/> instance will result in one client being configured.
            However, the effects of <paramref name="configureDelegate"/> will be applied once for each call.
            Note that this method should not be used in conjunction with UseOrleans, since UseOrleans includes a client automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="services"/> was null or <paramref name="configureDelegate"/> was null.</exception>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.OrleansBuilderMarker">
            <summary>
            Marker type used for storing a builder in a service collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.OrleansBuilderMarker.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.OrleansBuilderMarker"/> class.
            </summary>
            <param name="builderInstance">The builder instance.</param>
        </member>
        <member name="P:Microsoft.Extensions.Hosting.OrleansBuilderMarker.BuilderInstance">
            <summary>
            Gets the builder instance.
            </summary>
        </member>
    </members>
</doc>
